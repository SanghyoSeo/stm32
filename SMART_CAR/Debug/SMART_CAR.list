
SMART_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003590  08003590  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003590  08003590  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00004590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003594  08003594  00004594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003598  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  08003600  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003600  000052c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b541  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abb  00000000  00000000  000105d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00012090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c7  00000000  00000000  00012d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018640  00000000  00000000  000136df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1c3  00000000  00000000  0002bd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c34f  00000000  00000000  00038ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5231  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bfc  00000000  00000000  000c5274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c8e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080034a8 	.word	0x080034a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080034a8 	.word	0x080034a8

0800014c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 f836 	bl	80021d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 f82f 	bl	80021d4 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080034c0 	.word	0x080034c0
 8000184:	20000124 	.word	0x20000124

08000188 <timer_start>:

void timer_start(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 800018c:	4802      	ldr	r0, [pc, #8]	@ (8000198 <timer_start+0x10>)
 800018e:	f001 fd5d 	bl	8001c4c <HAL_TIM_Base_Start>
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	20000094 	.word	0x20000094

0800019c <delay_us>:

void delay_us(uint16_t us) {
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0); // initialize counter to start from 0
 80001a6:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <delay_us+0x2c>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2200      	movs	r2, #0
 80001ac:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < us)
 80001ae:	bf00      	nop
 80001b0:	4b05      	ldr	r3, [pc, #20]	@ (80001c8 <delay_us+0x2c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001b6:	88fb      	ldrh	r3, [r7, #6]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d3f9      	bcc.n	80001b0 <delay_us+0x14>
		; // wait count until us
}
 80001bc:	bf00      	nop
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000094 	.word	0x20000094

080001cc <trig>:

void trig(void) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2180      	movs	r1, #128	@ 0x80
 80001d4:	4806      	ldr	r0, [pc, #24]	@ (80001f0 <trig+0x24>)
 80001d6:	f001 f89e 	bl	8001316 <HAL_GPIO_WritePin>
	delay_us(10);
 80001da:	200a      	movs	r0, #10
 80001dc:	f7ff ffde 	bl	800019c <delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2180      	movs	r1, #128	@ 0x80
 80001e4:	4802      	ldr	r0, [pc, #8]	@ (80001f0 <trig+0x24>)
 80001e6:	f001 f896 	bl	8001316 <HAL_GPIO_WritePin>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40011000 	.word	0x40011000

080001f4 <echo>:
/**
 * @brief echo 신호가 HIGH를 유지하는 시간을 (㎲)단위로 측정하여 리턴한다.
 * @param no param(void)
 */

long unsigned int echo(void) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	long unsigned int echo = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]

	while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == 0) {
 80001fe:	bf00      	nop
 8000200:	2101      	movs	r1, #1
 8000202:	4812      	ldr	r0, [pc, #72]	@ (800024c <echo+0x58>)
 8000204:	f001 f870 	bl	80012e8 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f8      	beq.n	8000200 <echo+0xc>
	}
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800020e:	4b10      	ldr	r3, [pc, #64]	@ (8000250 <echo+0x5c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2200      	movs	r2, #0
 8000214:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == 1)
 8000216:	bf00      	nop
 8000218:	2101      	movs	r1, #1
 800021a:	480c      	ldr	r0, [pc, #48]	@ (800024c <echo+0x58>)
 800021c:	f001 f864 	bl	80012e8 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b01      	cmp	r3, #1
 8000224:	d0f8      	beq.n	8000218 <echo+0x24>
		;
	echo = __HAL_TIM_GET_COUNTER(&htim1);
 8000226:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <echo+0x5c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800022c:	607b      	str	r3, [r7, #4]

	if (echo >= 240 && echo <= 23000)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2bef      	cmp	r3, #239	@ 0xef
 8000232:	d906      	bls.n	8000242 <echo+0x4e>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 800023a:	4293      	cmp	r3, r2
 800023c:	d801      	bhi.n	8000242 <echo+0x4e>
		return echo;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	e000      	b.n	8000244 <echo+0x50>
	else
		return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40010c00 	.word	0x40010c00
 8000250:	20000094 	.word	0x20000094

08000254 <timer2_start>:

void timer2_start(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8000258:	4802      	ldr	r0, [pc, #8]	@ (8000264 <timer2_start+0x10>)
 800025a:	f001 fcf7 	bl	8001c4c <HAL_TIM_Base_Start>
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	200000dc 	.word	0x200000dc

08000268 <delay2_us>:

void delay2_us(uint16_t us) {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0); // initialize counter to start from 0
 8000272:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <delay2_us+0x2c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < us)
 800027a:	bf00      	nop
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <delay2_us+0x2c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000282:	88fb      	ldrh	r3, [r7, #6]
 8000284:	429a      	cmp	r2, r3
 8000286:	d3f9      	bcc.n	800027c <delay2_us+0x14>
		; // wait count until us
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	200000dc 	.word	0x200000dc

08000298 <trig2>:

void trig2(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 1);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a2:	4807      	ldr	r0, [pc, #28]	@ (80002c0 <trig2+0x28>)
 80002a4:	f001 f837 	bl	8001316 <HAL_GPIO_WritePin>
	delay2_us(10);
 80002a8:	200a      	movs	r0, #10
 80002aa:	f7ff ffdd 	bl	8000268 <delay2_us>
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b4:	4802      	ldr	r0, [pc, #8]	@ (80002c0 <trig2+0x28>)
 80002b6:	f001 f82e 	bl	8001316 <HAL_GPIO_WritePin>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010800 	.word	0x40010800

080002c4 <echo2>:

long unsigned int echo2(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
	long unsigned int echo2 = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]

	while (HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) == 0) {
 80002ce:	bf00      	nop
 80002d0:	2110      	movs	r1, #16
 80002d2:	4812      	ldr	r0, [pc, #72]	@ (800031c <echo2+0x58>)
 80002d4:	f001 f808 	bl	80012e8 <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f8      	beq.n	80002d0 <echo2+0xc>
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80002de:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <echo2+0x5c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) == 1)
 80002e6:	bf00      	nop
 80002e8:	2110      	movs	r1, #16
 80002ea:	480c      	ldr	r0, [pc, #48]	@ (800031c <echo2+0x58>)
 80002ec:	f000 fffc 	bl	80012e8 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d0f8      	beq.n	80002e8 <echo2+0x24>
		;
	echo2 = __HAL_TIM_GET_COUNTER(&htim2);
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <echo2+0x5c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002fc:	607b      	str	r3, [r7, #4]

	if (echo2 >= 240 && echo2 <= 23000)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2bef      	cmp	r3, #239	@ 0xef
 8000302:	d906      	bls.n	8000312 <echo2+0x4e>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 800030a:	4293      	cmp	r3, r2
 800030c:	d801      	bhi.n	8000312 <echo2+0x4e>
		return echo2;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	e000      	b.n	8000314 <echo2+0x50>
	else
		return 0;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40010800 	.word	0x40010800
 8000320:	200000dc 	.word	0x200000dc

08000324 <smartcar_forward>:

void smartcar_forward(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	2108      	movs	r1, #8
 800032c:	4816      	ldr	r0, [pc, #88]	@ (8000388 <smartcar_forward+0x64>)
 800032e:	f000 fff2 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000338:	4814      	ldr	r0, [pc, #80]	@ (800038c <smartcar_forward+0x68>)
 800033a:	f000 ffec 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LRF_GPIO_Port, LRF_Pin, 1);
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000344:	4811      	ldr	r0, [pc, #68]	@ (800038c <smartcar_forward+0x68>)
 8000346:	f000 ffe6 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LRB_GPIO_Port, LRB_Pin, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000350:	480d      	ldr	r0, [pc, #52]	@ (8000388 <smartcar_forward+0x64>)
 8000352:	f000 ffe0 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	2110      	movs	r1, #16
 800035a:	480b      	ldr	r0, [pc, #44]	@ (8000388 <smartcar_forward+0x64>)
 800035c:	f000 ffdb 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4808      	ldr	r0, [pc, #32]	@ (8000388 <smartcar_forward+0x64>)
 8000366:	f000 ffd6 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RRF_GPIO_Port, RRF_Pin, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000370:	4805      	ldr	r0, [pc, #20]	@ (8000388 <smartcar_forward+0x64>)
 8000372:	f000 ffd0 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RRB_GPIO_Port, RRB_Pin, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800037c:	4802      	ldr	r0, [pc, #8]	@ (8000388 <smartcar_forward+0x64>)
 800037e:	f000 ffca 	bl	8001316 <HAL_GPIO_WritePin>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40010800 	.word	0x40010800

08000390 <smartcar_right>:

	HAL_GPIO_WritePin(RRF_GPIO_Port, RRF_Pin, 0);
	HAL_GPIO_WritePin(RRB_GPIO_Port, RRB_Pin, 1);
}

void smartcar_right(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 8000394:	2201      	movs	r2, #1
 8000396:	2108      	movs	r1, #8
 8000398:	4816      	ldr	r0, [pc, #88]	@ (80003f4 <smartcar_right+0x64>)
 800039a:	f000 ffbc 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003a4:	4814      	ldr	r0, [pc, #80]	@ (80003f8 <smartcar_right+0x68>)
 80003a6:	f000 ffb6 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LRF_GPIO_Port, LRF_Pin, 1);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003b0:	4811      	ldr	r0, [pc, #68]	@ (80003f8 <smartcar_right+0x68>)
 80003b2:	f000 ffb0 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LRB_GPIO_Port, LRB_Pin, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003bc:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <smartcar_right+0x64>)
 80003be:	f000 ffaa 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2110      	movs	r1, #16
 80003c6:	480b      	ldr	r0, [pc, #44]	@ (80003f4 <smartcar_right+0x64>)
 80003c8:	f000 ffa5 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	4808      	ldr	r0, [pc, #32]	@ (80003f4 <smartcar_right+0x64>)
 80003d2:	f000 ffa0 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RRF_GPIO_Port, RRF_Pin, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003dc:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <smartcar_right+0x64>)
 80003de:	f000 ff9a 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RRB_GPIO_Port, RRB_Pin, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003e8:	4802      	ldr	r0, [pc, #8]	@ (80003f4 <smartcar_right+0x64>)
 80003ea:	f000 ff94 	bl	8001316 <HAL_GPIO_WritePin>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	40010800 	.word	0x40010800

080003fc <smartcar_left>:

void smartcar_left(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	2108      	movs	r1, #8
 8000404:	4816      	ldr	r0, [pc, #88]	@ (8000460 <smartcar_left+0x64>)
 8000406:	f000 ff86 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000410:	4814      	ldr	r0, [pc, #80]	@ (8000464 <smartcar_left+0x68>)
 8000412:	f000 ff80 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LRF_GPIO_Port, LRF_Pin, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800041c:	4811      	ldr	r0, [pc, #68]	@ (8000464 <smartcar_left+0x68>)
 800041e:	f000 ff7a 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LRB_GPIO_Port, LRB_Pin, 1);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000428:	480d      	ldr	r0, [pc, #52]	@ (8000460 <smartcar_left+0x64>)
 800042a:	f000 ff74 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	2110      	movs	r1, #16
 8000432:	480b      	ldr	r0, [pc, #44]	@ (8000460 <smartcar_left+0x64>)
 8000434:	f000 ff6f 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	4808      	ldr	r0, [pc, #32]	@ (8000460 <smartcar_left+0x64>)
 800043e:	f000 ff6a 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RRF_GPIO_Port, RRF_Pin, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000448:	4805      	ldr	r0, [pc, #20]	@ (8000460 <smartcar_left+0x64>)
 800044a:	f000 ff64 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RRB_GPIO_Port, RRB_Pin, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000454:	4802      	ldr	r0, [pc, #8]	@ (8000460 <smartcar_left+0x64>)
 8000456:	f000 ff5e 	bl	8001316 <HAL_GPIO_WritePin>
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010c00 	.word	0x40010c00
 8000464:	40010800 	.word	0x40010800

08000468 <smartcar_stop>:

void smartcar_stop(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	2108      	movs	r1, #8
 8000470:	4816      	ldr	r0, [pc, #88]	@ (80004cc <smartcar_stop+0x64>)
 8000472:	f000 ff50 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800047c:	4814      	ldr	r0, [pc, #80]	@ (80004d0 <smartcar_stop+0x68>)
 800047e:	f000 ff4a 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LRF_GPIO_Port, LRF_Pin, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000488:	4811      	ldr	r0, [pc, #68]	@ (80004d0 <smartcar_stop+0x68>)
 800048a:	f000 ff44 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LRB_GPIO_Port, LRB_Pin, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000494:	480d      	ldr	r0, [pc, #52]	@ (80004cc <smartcar_stop+0x64>)
 8000496:	f000 ff3e 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2110      	movs	r1, #16
 800049e:	480b      	ldr	r0, [pc, #44]	@ (80004cc <smartcar_stop+0x64>)
 80004a0:	f000 ff39 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2120      	movs	r1, #32
 80004a8:	4808      	ldr	r0, [pc, #32]	@ (80004cc <smartcar_stop+0x64>)
 80004aa:	f000 ff34 	bl	8001316 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RRF_GPIO_Port, RRF_Pin, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004b4:	4805      	ldr	r0, [pc, #20]	@ (80004cc <smartcar_stop+0x64>)
 80004b6:	f000 ff2e 	bl	8001316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RRB_GPIO_Port, RRB_Pin, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <smartcar_stop+0x64>)
 80004c2:	f000 ff28 	bl	8001316 <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	40010800 	.word	0x40010800

080004d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d8:	f000 fbee 	bl	8000cb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004dc:	f000 f88c 	bl	80005f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e0:	f000 f992 	bl	8000808 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004e4:	f000 f966 	bl	80007b4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80004e8:	f000 f8c8 	bl	800067c <MX_TIM1_Init>
	MX_TIM2_Init();
 80004ec:	f000 f916 	bl	800071c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	printf("=== UART2 Receive Test ===\r\n");
 80004f0:	4837      	ldr	r0, [pc, #220]	@ (80005d0 <main+0xfc>)
 80004f2:	f002 f96d 	bl	80027d0 <puts>
	timer_start();
 80004f6:	f7ff fe47 	bl	8000188 <timer_start>
	timer2_start();
 80004fa:	f7ff feab 	bl	8000254 <timer2_start>
	uint8_t ch;

	smartcar_stop();
 80004fe:	f7ff ffb3 	bl	8000468 <smartcar_stop>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//		HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);

		trig();
 8000502:	f7ff fe63 	bl	80001cc <trig>
		echo_time = echo();
 8000506:	f7ff fe75 	bl	80001f4 <echo>
 800050a:	4603      	mov	r3, r0
 800050c:	4a31      	ldr	r2, [pc, #196]	@ (80005d4 <main+0x100>)
 800050e:	6013      	str	r3, [r2, #0]

		if (echo_time != 0) {
 8000510:	4b30      	ldr	r3, [pc, #192]	@ (80005d4 <main+0x100>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d012      	beq.n	800053e <main+0x6a>
			dist = (int) (17 * echo_time / 100);
 8000518:	4b2e      	ldr	r3, [pc, #184]	@ (80005d4 <main+0x100>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4613      	mov	r3, r2
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	4413      	add	r3, r2
 8000522:	4a2d      	ldr	r2, [pc, #180]	@ (80005d8 <main+0x104>)
 8000524:	fba2 2303 	umull	r2, r3, r2, r3
 8000528:	095b      	lsrs	r3, r3, #5
 800052a:	461a      	mov	r2, r3
 800052c:	4b2b      	ldr	r3, [pc, #172]	@ (80005dc <main+0x108>)
 800052e:	601a      	str	r2, [r3, #0]
			printf("\n Distance = %d(mm)\n", dist);
 8000530:	4b2a      	ldr	r3, [pc, #168]	@ (80005dc <main+0x108>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	482a      	ldr	r0, [pc, #168]	@ (80005e0 <main+0x10c>)
 8000538:	f002 f8e2 	bl	8002700 <iprintf>
 800053c:	e002      	b.n	8000544 <main+0x70>
		} else
			printf("Out of Range!\n");
 800053e:	4829      	ldr	r0, [pc, #164]	@ (80005e4 <main+0x110>)
 8000540:	f002 f946 	bl	80027d0 <puts>

		trig2();
 8000544:	f7ff fea8 	bl	8000298 <trig2>
		echo2_time = echo2();
 8000548:	f7ff febc 	bl	80002c4 <echo2>
 800054c:	4603      	mov	r3, r0
 800054e:	4a26      	ldr	r2, [pc, #152]	@ (80005e8 <main+0x114>)
 8000550:	6013      	str	r3, [r2, #0]
		if (echo2_time != 0) {
 8000552:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <main+0x114>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d012      	beq.n	8000580 <main+0xac>
			dist2 = (int) (17 * echo2_time / 100);
 800055a:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <main+0x114>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4613      	mov	r3, r2
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	4a1c      	ldr	r2, [pc, #112]	@ (80005d8 <main+0x104>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	095b      	lsrs	r3, r3, #5
 800056c:	461a      	mov	r2, r3
 800056e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <main+0x118>)
 8000570:	601a      	str	r2, [r3, #0]
			printf("Distance2 = %d(mm)\n\n", dist2);
 8000572:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <main+0x118>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	481d      	ldr	r0, [pc, #116]	@ (80005f0 <main+0x11c>)
 800057a:	f002 f8c1 	bl	8002700 <iprintf>
 800057e:	e002      	b.n	8000586 <main+0xb2>
		} else
			printf("Out of Range2!\n");
 8000580:	481c      	ldr	r0, [pc, #112]	@ (80005f4 <main+0x120>)
 8000582:	f002 f925 	bl	80027d0 <puts>

		smartcar_forward();
 8000586:	f7ff fecd 	bl	8000324 <smartcar_forward>

		if (dist <= 200 || dist2 <= 200){
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <main+0x108>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000590:	dd03      	ble.n	800059a <main+0xc6>
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <main+0x118>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2bc8      	cmp	r3, #200	@ 0xc8
 8000598:	dcb3      	bgt.n	8000502 <main+0x2e>
			if (dist > dist2){
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <main+0x108>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <main+0x118>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dd06      	ble.n	80005b4 <main+0xe0>
				smartcar_right();
 80005a6:	f7ff fef3 	bl	8000390 <smartcar_right>
				HAL_Delay(300);
 80005aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005ae:	f000 fbe5 	bl	8000d7c <HAL_Delay>
 80005b2:	e7a6      	b.n	8000502 <main+0x2e>
			}
			else if (dist < dist2){
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <main+0x108>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <main+0x118>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	daa0      	bge.n	8000502 <main+0x2e>
				smartcar_left();
 80005c0:	f7ff ff1c 	bl	80003fc <smartcar_left>
				HAL_Delay(300);
 80005c4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005c8:	f000 fbd8 	bl	8000d7c <HAL_Delay>
		trig();
 80005cc:	e799      	b.n	8000502 <main+0x2e>
 80005ce:	bf00      	nop
 80005d0:	080034c4 	.word	0x080034c4
 80005d4:	20000084 	.word	0x20000084
 80005d8:	51eb851f 	.word	0x51eb851f
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	080034e0 	.word	0x080034e0
 80005e4:	080034f8 	.word	0x080034f8
 80005e8:	20000088 	.word	0x20000088
 80005ec:	20000090 	.word	0x20000090
 80005f0:	08003508 	.word	0x08003508
 80005f4:	08003520 	.word	0x08003520

080005f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b090      	sub	sp, #64	@ 0x40
 80005fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2228      	movs	r2, #40	@ 0x28
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f9c2 	bl	8002990 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800062a:	2300      	movs	r3, #0
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800062e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fea7 	bl	800138c <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x50>
		Error_Handler();
 8000644:	f000 f992 	bl	800096c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000658:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f914 	bl	8001890 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x7a>
		Error_Handler();
 800066e:	f000 f97d 	bl	800096c <Error_Handler>
	}
}
 8000672:	bf00      	nop
 8000674:	3740      	adds	r7, #64	@ 0x40
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000698:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_TIM1_Init+0x98>)
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <MX_TIM1_Init+0x9c>)
 800069c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64 - 1;
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006a0:	223f      	movs	r2, #63	@ 0x3f
 80006a2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80006c4:	4813      	ldr	r0, [pc, #76]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006c6:	f001 fa71 	bl	8001bac <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x58>
		Error_Handler();
 80006d0:	f000 f94c 	bl	800096c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006e2:	f001 fafd 	bl	8001ce0 <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x74>
		Error_Handler();
 80006ec:	f000 f93e 	bl	800096c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_TIM1_Init+0x98>)
 80006fe:	f001 fcbb 	bl	8002078 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000708:	f000 f930 	bl	800096c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000094 	.word	0x20000094
 8000718:	40012c00 	.word	0x40012c00

0800071c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64 - 1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000742:	223f      	movs	r2, #63	@ 0x3f
 8000744:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800074e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000752:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000762:	f001 fa23 	bl	8001bac <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x54>
		Error_Handler();
 800076c:	f000 f8fe 	bl	800096c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800077e:	f001 faaf 	bl	8001ce0 <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x70>
		Error_Handler();
 8000788:	f000 f8f0 	bl	800096c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800079a:	f001 fc6d 	bl	8002078 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80007a4:	f000 f8e2 	bl	800096c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000dc 	.word	0x200000dc

080007b4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_USART2_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ec:	f001 fca2 	bl	8002134 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80007f6:	f000 f8b9 	bl	800096c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000124 	.word	0x20000124
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800081c:	4b4e      	ldr	r3, [pc, #312]	@ (8000958 <MX_GPIO_Init+0x150>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a4d      	ldr	r2, [pc, #308]	@ (8000958 <MX_GPIO_Init+0x150>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b4b      	ldr	r3, [pc, #300]	@ (8000958 <MX_GPIO_Init+0x150>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0310 	and.w	r3, r3, #16
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000834:	4b48      	ldr	r3, [pc, #288]	@ (8000958 <MX_GPIO_Init+0x150>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a47      	ldr	r2, [pc, #284]	@ (8000958 <MX_GPIO_Init+0x150>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b45      	ldr	r3, [pc, #276]	@ (8000958 <MX_GPIO_Init+0x150>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0320 	and.w	r3, r3, #32
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b42      	ldr	r3, [pc, #264]	@ (8000958 <MX_GPIO_Init+0x150>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a41      	ldr	r2, [pc, #260]	@ (8000958 <MX_GPIO_Init+0x150>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <MX_GPIO_Init+0x150>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	4b3c      	ldr	r3, [pc, #240]	@ (8000958 <MX_GPIO_Init+0x150>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a3b      	ldr	r2, [pc, #236]	@ (8000958 <MX_GPIO_Init+0x150>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b39      	ldr	r3, [pc, #228]	@ (8000958 <MX_GPIO_Init+0x150>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0308 	and.w	r3, r3, #8
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED2_Pin | LD2_Pin | TRIG2_Pin | LRF_Pin | LFB_Pin,
 800087c:	2200      	movs	r2, #0
 800087e:	f240 7121 	movw	r1, #1825	@ 0x721
 8000882:	4836      	ldr	r0, [pc, #216]	@ (800095c <MX_GPIO_Init+0x154>)
 8000884:	f000 fd47 	bl	8001316 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 800088e:	4834      	ldr	r0, [pc, #208]	@ (8000960 <MX_GPIO_Init+0x158>)
 8000890:	f000 fd41 	bl	8001316 <HAL_GPIO_WritePin>
	LRB_Pin | LFF_Pin | RFF_Pin | RFB_Pin | RRF_Pin | RRB_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	4832      	ldr	r0, [pc, #200]	@ (8000964 <MX_GPIO_Init+0x15c>)
 800089a:	f000 fd3c 	bl	8001316 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a4:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <MX_GPIO_Init+0x160>)
 80008a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	482c      	ldr	r0, [pc, #176]	@ (8000964 <MX_GPIO_Init+0x15c>)
 80008b4:	f000 fb94 	bl	8000fe0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LD2_Pin TRIG2_Pin LRF_Pin
	 LFB_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LD2_Pin | TRIG2_Pin | LRF_Pin | LFB_Pin;
 80008b8:	f240 7321 	movw	r3, #1825	@ 0x721
 80008bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4822      	ldr	r0, [pc, #136]	@ (800095c <MX_GPIO_Init+0x154>)
 80008d2:	f000 fb85 	bl	8000fe0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ECHO2_Pin */
	GPIO_InitStruct.Pin = ECHO2_Pin;
 80008d6:	2310      	movs	r3, #16
 80008d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ECHO2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	481c      	ldr	r0, [pc, #112]	@ (800095c <MX_GPIO_Init+0x154>)
 80008ea:	f000 fb79 	bl	8000fe0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ECHO_Pin */
	GPIO_InitStruct.Pin = ECHO_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	4817      	ldr	r0, [pc, #92]	@ (8000960 <MX_GPIO_Init+0x158>)
 8000902:	f000 fb6d 	bl	8000fe0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LRB_Pin LFF_Pin RFF_Pin RFB_Pin
	 RRF_Pin RRB_Pin */
	GPIO_InitStruct.Pin = LRB_Pin | LFF_Pin | RFF_Pin | RFB_Pin | RRF_Pin
 8000906:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 800090a:	613b      	str	r3, [r7, #16]
			| RRB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4810      	ldr	r0, [pc, #64]	@ (8000960 <MX_GPIO_Init+0x158>)
 8000920:	f000 fb5e 	bl	8000fe0 <HAL_GPIO_Init>

	/*Configure GPIO pin : TRIG_Pin */
	GPIO_InitStruct.Pin = TRIG_Pin;
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <MX_GPIO_Init+0x15c>)
 800093c:	f000 fb50 	bl	8000fe0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2028      	movs	r0, #40	@ 0x28
 8000946:	f000 fb14 	bl	8000f72 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094a:	2028      	movs	r0, #40	@ 0x28
 800094c:	f000 fb2d 	bl	8000faa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800
 8000960:	40010c00 	.word	0x40010c00
 8000964:	40011000 	.word	0x40011000
 8000968:	10110000 	.word	0x10110000

0800096c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_MspInit+0x5c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a14      	ldr	r2, [pc, #80]	@ (80009d4 <HAL_MspInit+0x5c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_MspInit+0x5c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a0e      	ldr	r2, [pc, #56]	@ (80009d4 <HAL_MspInit+0x5c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_MspInit+0x60>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <HAL_MspInit+0x60>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010000 	.word	0x40010000

080009dc <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM1) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <HAL_TIM_Base_MspInit+0x58>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10c      	bne.n	8000a08 <HAL_TIM_Base_MspInit+0x2c>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_TIM_Base_MspInit+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a11      	ldr	r2, [pc, #68]	@ (8000a38 <HAL_TIM_Base_MspInit+0x5c>)
 80009f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <HAL_TIM_Base_MspInit+0x5c>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 8000a06:	e010      	b.n	8000a2a <HAL_TIM_Base_MspInit+0x4e>
	} else if (htim_base->Instance == TIM2) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a10:	d10b      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x4e>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_TIM_Base_MspInit+0x5c>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_TIM_Base_MspInit+0x5c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_TIM_Base_MspInit+0x5c>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	40012c00 	.word	0x40012c00
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART2) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <HAL_UART_MspInit+0x70>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d123      	bne.n	8000aa4 <HAL_UART_MspInit+0x68>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <HAL_UART_MspInit+0x74>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <HAL_UART_MspInit+0x74>)
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a66:	61d3      	str	r3, [r2, #28]
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <HAL_UART_MspInit+0x74>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <HAL_UART_MspInit+0x74>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <HAL_UART_MspInit+0x74>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <HAL_UART_MspInit+0x74>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <HAL_UART_MspInit+0x78>)
 8000aa0:	f000 fa9e 	bl	8000fe0 <HAL_GPIO_Init>

		/* USER CODE END USART2_MspInit 1 */

	}

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010800 	.word	0x40010800

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f91c 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b18:	f000 fc16 	bl	8001348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
  }

  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fae9 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
  }
  return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bb8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	@ (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f001 ff02 	bl	8002a2c <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20005000 	.word	0x20005000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	2000016c 	.word	0x2000016c
 8000c5c:	200002c0 	.word	0x200002c0

08000c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c6c:	f7ff fff8 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c72:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c88:	4c09      	ldr	r4, [pc, #36]	@ (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f001 fecf 	bl	8002a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff fc1b 	bl	80004d4 <main>
  bx lr
 8000c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca8:	08003598 	.word	0x08003598
  ldr r2, =_sbss
 8000cac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb0:	200002c0 	.word	0x200002c0

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_Init+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_Init+0x28>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f947 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe50 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f95f 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f927 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000170 	.word	0x20000170

08000d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	@ (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000170 	.word	0x20000170

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff0 	bl	8000d68 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffe0 	bl	8000d68 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4906      	ldr	r1, [pc, #24]	@ (8000e5c <__NVIC_EnableIRQ+0x34>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff90 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff2d 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff42 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff90 	bl	8000eb4 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5f 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff35 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b08b      	sub	sp, #44	@ 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e169      	b.n	80012c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8158 	bne.w	80012c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a9a      	ldr	r2, [pc, #616]	@ (8001280 <HAL_GPIO_Init+0x2a0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d05e      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800101c:	4a98      	ldr	r2, [pc, #608]	@ (8001280 <HAL_GPIO_Init+0x2a0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d875      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001022:	4a98      	ldr	r2, [pc, #608]	@ (8001284 <HAL_GPIO_Init+0x2a4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d058      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001028:	4a96      	ldr	r2, [pc, #600]	@ (8001284 <HAL_GPIO_Init+0x2a4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d86f      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800102e:	4a96      	ldr	r2, [pc, #600]	@ (8001288 <HAL_GPIO_Init+0x2a8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d052      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001034:	4a94      	ldr	r2, [pc, #592]	@ (8001288 <HAL_GPIO_Init+0x2a8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d869      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800103a:	4a94      	ldr	r2, [pc, #592]	@ (800128c <HAL_GPIO_Init+0x2ac>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d04c      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001040:	4a92      	ldr	r2, [pc, #584]	@ (800128c <HAL_GPIO_Init+0x2ac>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d863      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001046:	4a92      	ldr	r2, [pc, #584]	@ (8001290 <HAL_GPIO_Init+0x2b0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d046      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800104c:	4a90      	ldr	r2, [pc, #576]	@ (8001290 <HAL_GPIO_Init+0x2b0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d85d      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001052:	2b12      	cmp	r3, #18
 8001054:	d82a      	bhi.n	80010ac <HAL_GPIO_Init+0xcc>
 8001056:	2b12      	cmp	r3, #18
 8001058:	d859      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800105a:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <HAL_GPIO_Init+0x80>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	080010db 	.word	0x080010db
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010c7 	.word	0x080010c7
 800106c:	08001109 	.word	0x08001109
 8001070:	0800110f 	.word	0x0800110f
 8001074:	0800110f 	.word	0x0800110f
 8001078:	0800110f 	.word	0x0800110f
 800107c:	0800110f 	.word	0x0800110f
 8001080:	0800110f 	.word	0x0800110f
 8001084:	0800110f 	.word	0x0800110f
 8001088:	0800110f 	.word	0x0800110f
 800108c:	0800110f 	.word	0x0800110f
 8001090:	0800110f 	.word	0x0800110f
 8001094:	0800110f 	.word	0x0800110f
 8001098:	0800110f 	.word	0x0800110f
 800109c:	0800110f 	.word	0x0800110f
 80010a0:	0800110f 	.word	0x0800110f
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	4a79      	ldr	r2, [pc, #484]	@ (8001294 <HAL_GPIO_Init+0x2b4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010b2:	e02c      	b.n	800110e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	623b      	str	r3, [r7, #32]
          break;
 80010ba:	e029      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	3304      	adds	r3, #4
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	e024      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	3308      	adds	r3, #8
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e01f      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	330c      	adds	r3, #12
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e01a      	b.n	8001110 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010e2:	2304      	movs	r3, #4
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e013      	b.n	8001110 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d105      	bne.n	80010fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f0:	2308      	movs	r3, #8
 80010f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	611a      	str	r2, [r3, #16]
          break;
 80010fa:	e009      	b.n	8001110 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010fc:	2308      	movs	r3, #8
 80010fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	615a      	str	r2, [r3, #20]
          break;
 8001106:	e003      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x130>
          break;
 800110e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2bff      	cmp	r3, #255	@ 0xff
 8001114:	d801      	bhi.n	800111a <HAL_GPIO_Init+0x13a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e001      	b.n	800111e <HAL_GPIO_Init+0x13e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3304      	adds	r3, #4
 800111e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	d802      	bhi.n	800112c <HAL_GPIO_Init+0x14c>
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0x152>
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	3b08      	subs	r3, #8
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	210f      	movs	r1, #15
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	6a39      	ldr	r1, [r7, #32]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80b1 	beq.w	80012c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001160:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a4c      	ldr	r2, [pc, #304]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b4a      	ldr	r3, [pc, #296]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001178:	4a48      	ldr	r2, [pc, #288]	@ (800129c <HAL_GPIO_Init+0x2bc>)
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a40      	ldr	r2, [pc, #256]	@ (80012a0 <HAL_GPIO_Init+0x2c0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3f      	ldr	r2, [pc, #252]	@ (80012a4 <HAL_GPIO_Init+0x2c4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1e8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <HAL_GPIO_Init+0x2c8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3d      	ldr	r2, [pc, #244]	@ (80012ac <HAL_GPIO_Init+0x2cc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1e0>
 80011bc:	2303      	movs	r3, #3
 80011be:	e006      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e004      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011cc:	2300      	movs	r3, #0
 80011ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011de:	492f      	ldr	r1, [pc, #188]	@ (800129c <HAL_GPIO_Init+0x2bc>)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	492c      	ldr	r1, [pc, #176]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4928      	ldr	r1, [pc, #160]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	4922      	ldr	r1, [pc, #136]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	491e      	ldr	r1, [pc, #120]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4918      	ldr	r1, [pc, #96]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	4914      	ldr	r1, [pc, #80]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d021      	beq.n	80012b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	490e      	ldr	r1, [pc, #56]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e021      	b.n	80012c2 <HAL_GPIO_Init+0x2e2>
 800127e:	bf00      	nop
 8001280:	10320000 	.word	0x10320000
 8001284:	10310000 	.word	0x10310000
 8001288:	10220000 	.word	0x10220000
 800128c:	10210000 	.word	0x10210000
 8001290:	10120000 	.word	0x10120000
 8001294:	10110000 	.word	0x10110000
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	40010800 	.word	0x40010800
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40011400 	.word	0x40011400
 80012b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	4909      	ldr	r1, [pc, #36]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80012be:	4013      	ands	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	3301      	adds	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f ae8e 	bne.w	8000ff4 <HAL_GPIO_Init+0x14>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	372c      	adds	r7, #44	@ 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e001      	b.n	800130a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	807b      	strh	r3, [r7, #2]
 8001322:	4613      	mov	r3, r2
 8001324:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001326:	787b      	ldrb	r3, [r7, #1]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001332:	e003      	b.n	800133c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	041a      	lsls	r2, r3, #16
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	611a      	str	r2, [r3, #16]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
	...

08001348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f806 	bl	8001378 <HAL_GPIO_EXTI_Callback>
  }
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e272      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8087 	beq.w	80014ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ac:	4b92      	ldr	r3, [pc, #584]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d00c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b8:	4b8f      	ldr	r3, [pc, #572]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d112      	bne.n	80013ea <HAL_RCC_OscConfig+0x5e>
 80013c4:	4b8c      	ldr	r3, [pc, #560]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d0:	d10b      	bne.n	80013ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d2:	4b89      	ldr	r3, [pc, #548]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d06c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x12c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d168      	bne.n	80014b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e24c      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x76>
 80013f4:	4b80      	ldr	r3, [pc, #512]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a7f      	ldr	r2, [pc, #508]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e02e      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x98>
 800140a:	4b7b      	ldr	r3, [pc, #492]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7a      	ldr	r2, [pc, #488]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b78      	ldr	r3, [pc, #480]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a77      	ldr	r2, [pc, #476]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0xbc>
 800142e:	4b72      	ldr	r3, [pc, #456]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a71      	ldr	r2, [pc, #452]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b6f      	ldr	r3, [pc, #444]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6e      	ldr	r2, [pc, #440]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001448:	4b6b      	ldr	r3, [pc, #428]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a6a      	ldr	r2, [pc, #424]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b68      	ldr	r3, [pc, #416]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a67      	ldr	r2, [pc, #412]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc7e 	bl	8000d68 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fc7a 	bl	8000d68 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e200      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b5d      	ldr	r3, [pc, #372]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xe4>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fc6a 	bl	8000d68 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fc66 	bl	8000d68 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	@ 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1ec      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b53      	ldr	r3, [pc, #332]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x10c>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d063      	beq.n	800158e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	4b4c      	ldr	r3, [pc, #304]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014d2:	4b49      	ldr	r3, [pc, #292]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x18c>
 80014de:	4b46      	ldr	r3, [pc, #280]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x176>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1c0      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4939      	ldr	r1, [pc, #228]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e03a      	b.n	800158e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <HAL_RCC_OscConfig+0x270>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fc1f 	bl	8000d68 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fc1b 	bl	8000d68 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1a1      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4927      	ldr	r1, [pc, #156]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <HAL_RCC_OscConfig+0x270>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fbfe 	bl	8000d68 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fbfa 	bl	8000d68 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e180      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d03a      	beq.n	8001610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d019      	beq.n	80015d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <HAL_RCC_OscConfig+0x274>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fbde 	bl	8000d68 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fbda 	bl	8000d68 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e160      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 face 	bl	8001b70 <RCC_Delay>
 80015d4:	e01c      	b.n	8001610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_RCC_OscConfig+0x274>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fbc4 	bl	8000d68 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e2:	e00f      	b.n	8001604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fbc0 	bl	8000d68 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d908      	bls.n	8001604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e146      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	42420000 	.word	0x42420000
 8001600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b92      	ldr	r3, [pc, #584]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e9      	bne.n	80015e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a6 	beq.w	800176a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b8b      	ldr	r3, [pc, #556]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b88      	ldr	r3, [pc, #544]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a87      	ldr	r2, [pc, #540]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b85      	ldr	r3, [pc, #532]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b82      	ldr	r3, [pc, #520]	@ (8001854 <HAL_RCC_OscConfig+0x4c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b7f      	ldr	r3, [pc, #508]	@ (8001854 <HAL_RCC_OscConfig+0x4c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a7e      	ldr	r2, [pc, #504]	@ (8001854 <HAL_RCC_OscConfig+0x4c8>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fb81 	bl	8000d68 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fb7d 	bl	8000d68 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b64      	cmp	r3, #100	@ 0x64
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e103      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b75      	ldr	r3, [pc, #468]	@ (8001854 <HAL_RCC_OscConfig+0x4c8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x312>
 8001690:	4b6f      	ldr	r3, [pc, #444]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a6e      	ldr	r2, [pc, #440]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	e02d      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x334>
 80016a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a69      	ldr	r2, [pc, #420]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b67      	ldr	r3, [pc, #412]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a66      	ldr	r2, [pc, #408]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	e01c      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d10c      	bne.n	80016e2 <HAL_RCC_OscConfig+0x356>
 80016c8:	4b61      	ldr	r3, [pc, #388]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a60      	ldr	r2, [pc, #384]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	e00b      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 80016e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b58      	ldr	r3, [pc, #352]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a57      	ldr	r2, [pc, #348]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d015      	beq.n	800172e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb31 	bl	8000d68 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb2d 	bl	8000d68 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0b1      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ee      	beq.n	800170a <HAL_RCC_OscConfig+0x37e>
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb1b 	bl	8000d68 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fb17 	bl	8000d68 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e09b      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ee      	bne.n	8001736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d105      	bne.n	800176a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175e:	4b3c      	ldr	r3, [pc, #240]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a3b      	ldr	r2, [pc, #236]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8087 	beq.w	8001882 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001774:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d061      	beq.n	8001844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d146      	bne.n	8001816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <HAL_RCC_OscConfig+0x4cc>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff faeb 	bl	8000d68 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fae7 	bl	8000d68 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e06d      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017be:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4921      	ldr	r1, [pc, #132]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a19      	ldr	r1, [r3, #32]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	430b      	orrs	r3, r1
 80017e2:	491b      	ldr	r1, [pc, #108]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_RCC_OscConfig+0x4cc>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fabb 	bl	8000d68 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fab7 	bl	8000d68 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e03d      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46a>
 8001814:	e035      	b.n	8001882 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_RCC_OscConfig+0x4cc>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff faa4 	bl	8000d68 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff faa0 	bl	8000d68 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e026      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x498>
 8001842:	e01e      	b.n	8001882 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e019      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
 8001850:	40021000 	.word	0x40021000
 8001854:	40007000 	.word	0x40007000
 8001858:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_RCC_OscConfig+0x500>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	429a      	cmp	r2, r3
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0d0      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d910      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b67      	ldr	r3, [pc, #412]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4965      	ldr	r1, [pc, #404]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b63      	ldr	r3, [pc, #396]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b8      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b59      	ldr	r3, [pc, #356]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a58      	ldr	r2, [pc, #352]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001904:	4b53      	ldr	r3, [pc, #332]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a52      	ldr	r2, [pc, #328]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800190e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b50      	ldr	r3, [pc, #320]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	494d      	ldr	r1, [pc, #308]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d040      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d115      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194e:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e073      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06b      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4936      	ldr	r1, [pc, #216]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001980:	f7ff f9f2 	bl	8000d68 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	e00a      	b.n	800199e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	f7ff f9ee 	bl	8000d68 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e053      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 020c 	and.w	r2, r3, #12
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1eb      	bne.n	8001988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d210      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0207 	bic.w	r2, r3, #7
 80019c6:	4922      	ldr	r1, [pc, #136]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e032      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4916      	ldr	r1, [pc, #88]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490e      	ldr	r1, [pc, #56]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1e:	f000 f821 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490a      	ldr	r1, [pc, #40]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	4a09      	ldr	r2, [pc, #36]	@ (8001a5c <HAL_RCC_ClockConfig+0x1cc>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_RCC_ClockConfig+0x1d0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f950 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	08003530 	.word	0x08003530
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x30>
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x36>
 8001a92:	e027      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x98>)
 8001a96:	613b      	str	r3, [r7, #16]
      break;
 8001a98:	e027      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	0c9b      	lsrs	r3, r3, #18
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d010      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0c5b      	lsrs	r3, r3, #17
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	4a11      	ldr	r2, [pc, #68]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ac6:	fb03 f202 	mul.w	r2, r3, r2
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e004      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	613b      	str	r3, [r7, #16]
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ae6:	613b      	str	r3, [r7, #16]
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	693b      	ldr	r3, [r7, #16]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	007a1200 	.word	0x007a1200
 8001b00:	08003548 	.word	0x08003548
 8001b04:	08003558 	.word	0x08003558
 8001b08:	003d0900 	.word	0x003d0900

08001b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b02      	ldr	r3, [pc, #8]	@ (8001b1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff2 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	@ (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08003540 	.word	0x08003540

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	0adb      	lsrs	r3, r3, #11
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	@ (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08003540 	.word	0x08003540

08001b70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <RCC_Delay+0x34>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <RCC_Delay+0x38>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0a5b      	lsrs	r3, r3, #9
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b8c:	bf00      	nop
  }
  while (Delay --);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	60fa      	str	r2, [r7, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f9      	bne.n	8001b8c <RCC_Delay+0x1c>
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	10624dd3 	.word	0x10624dd3

08001bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e041      	b.n	8001c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe ff02 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3304      	adds	r3, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f000 f940 	bl	8001e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <HAL_TIM_Base_Start+0x88>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_TIM_Base_Start+0x48>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7e:	d009      	beq.n	8001c94 <HAL_TIM_Base_Start+0x48>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a14      	ldr	r2, [pc, #80]	@ (8001cd8 <HAL_TIM_Base_Start+0x8c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_TIM_Base_Start+0x48>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a13      	ldr	r2, [pc, #76]	@ (8001cdc <HAL_TIM_Base_Start+0x90>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d010      	beq.n	8001cc8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb6:	e007      	b.n	8001cc8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800

08001ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_TIM_ConfigClockSource+0x1c>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e0b4      	b.n	8001e66 <HAL_TIM_ConfigClockSource+0x186>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d34:	d03e      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0xd4>
 8001d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d3a:	f200 8087 	bhi.w	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d42:	f000 8086 	beq.w	8001e52 <HAL_TIM_ConfigClockSource+0x172>
 8001d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d4a:	d87f      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d4c:	2b70      	cmp	r3, #112	@ 0x70
 8001d4e:	d01a      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0xa6>
 8001d50:	2b70      	cmp	r3, #112	@ 0x70
 8001d52:	d87b      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d54:	2b60      	cmp	r3, #96	@ 0x60
 8001d56:	d050      	beq.n	8001dfa <HAL_TIM_ConfigClockSource+0x11a>
 8001d58:	2b60      	cmp	r3, #96	@ 0x60
 8001d5a:	d877      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d5c:	2b50      	cmp	r3, #80	@ 0x50
 8001d5e:	d03c      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0xfa>
 8001d60:	2b50      	cmp	r3, #80	@ 0x50
 8001d62:	d873      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d64:	2b40      	cmp	r3, #64	@ 0x40
 8001d66:	d058      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0x13a>
 8001d68:	2b40      	cmp	r3, #64	@ 0x40
 8001d6a:	d86f      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d6c:	2b30      	cmp	r3, #48	@ 0x30
 8001d6e:	d064      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d70:	2b30      	cmp	r3, #48	@ 0x30
 8001d72:	d86b      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d060      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d867      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05c      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d05a      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d84:	e062      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d96:	f000 f950 	bl	800203a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	609a      	str	r2, [r3, #8]
      break;
 8001db2:	e04f      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dc4:	f000 f939 	bl	800203a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dd6:	609a      	str	r2, [r3, #8]
      break;
 8001dd8:	e03c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de6:	461a      	mov	r2, r3
 8001de8:	f000 f8b0 	bl	8001f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2150      	movs	r1, #80	@ 0x50
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f907 	bl	8002006 <TIM_ITRx_SetConfig>
      break;
 8001df8:	e02c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e06:	461a      	mov	r2, r3
 8001e08:	f000 f8ce 	bl	8001fa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2160      	movs	r1, #96	@ 0x60
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f8f7 	bl	8002006 <TIM_ITRx_SetConfig>
      break;
 8001e18:	e01c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e26:	461a      	mov	r2, r3
 8001e28:	f000 f890 	bl	8001f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2140      	movs	r1, #64	@ 0x40
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f8e7 	bl	8002006 <TIM_ITRx_SetConfig>
      break;
 8001e38:	e00c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f000 f8de 	bl	8002006 <TIM_ITRx_SetConfig>
      break;
 8001e4a:	e003      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e50:	e000      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a2f      	ldr	r2, [pc, #188]	@ (8001f40 <TIM_Base_SetConfig+0xd0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00b      	beq.n	8001ea0 <TIM_Base_SetConfig+0x30>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8e:	d007      	beq.n	8001ea0 <TIM_Base_SetConfig+0x30>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a2c      	ldr	r2, [pc, #176]	@ (8001f44 <TIM_Base_SetConfig+0xd4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <TIM_Base_SetConfig+0x30>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f48 <TIM_Base_SetConfig+0xd8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a22      	ldr	r2, [pc, #136]	@ (8001f40 <TIM_Base_SetConfig+0xd0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00b      	beq.n	8001ed2 <TIM_Base_SetConfig+0x62>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec0:	d007      	beq.n	8001ed2 <TIM_Base_SetConfig+0x62>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f44 <TIM_Base_SetConfig+0xd4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d003      	beq.n	8001ed2 <TIM_Base_SetConfig+0x62>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f48 <TIM_Base_SetConfig+0xd8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d108      	bne.n	8001ee4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <TIM_Base_SetConfig+0xd0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d103      	bne.n	8001f18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f023 0201 	bic.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]
  }
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	40012c00 	.word	0x40012c00
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40000800 	.word	0x40000800

08001f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	f023 0201 	bic.w	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f023 030a 	bic.w	r3, r3, #10
 8001f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	621a      	str	r2, [r3, #32]
}
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f023 0210 	bic.w	r2, r3, #16
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	031b      	lsls	r3, r3, #12
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	621a      	str	r2, [r3, #32]
}
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800201c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	f043 0307 	orr.w	r3, r3, #7
 8002028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002054:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	021a      	lsls	r2, r3, #8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	431a      	orrs	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4313      	orrs	r3, r2
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	609a      	str	r2, [r3, #8]
}
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800208c:	2302      	movs	r3, #2
 800208e:	e046      	b.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a16      	ldr	r2, [pc, #88]	@ (8002128 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00e      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020dc:	d009      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a10      	ldr	r2, [pc, #64]	@ (8002130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10c      	bne.n	800210c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4313      	orrs	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800

08002134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e042      	b.n	80021cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fc6e 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	@ 0x24
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f971 	bl	8002460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800218c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800219c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	@ 0x28
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d175      	bne.n	80022e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_UART_Transmit+0x2c>
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e06e      	b.n	80022e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2221      	movs	r2, #33	@ 0x21
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002212:	f7fe fda9 	bl	8000d68 <HAL_GetTick>
 8002216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	88fa      	ldrh	r2, [r7, #6]
 8002222:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800222c:	d108      	bne.n	8002240 <HAL_UART_Transmit+0x6c>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e003      	b.n	8002248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002248:	e02e      	b.n	80022a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f848 	bl	80022ea <UART_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e03a      	b.n	80022e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10b      	bne.n	800228a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	3302      	adds	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	e007      	b.n	800229a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1cb      	bne.n	800224a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2140      	movs	r1, #64	@ 0x40
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f814 	bl	80022ea <UART_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e006      	b.n	80022e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fa:	e03b      	b.n	8002374 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d037      	beq.n	8002374 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002304:	f7fe fd30 	bl	8000d68 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <UART_WaitOnFlagUntilTimeout+0x30>
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e03a      	b.n	8002394 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <UART_WaitOnFlagUntilTimeout+0x8a>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b80      	cmp	r3, #128	@ 0x80
 8002330:	d020      	beq.n	8002374 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b40      	cmp	r3, #64	@ 0x40
 8002336:	d01d      	beq.n	8002374 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b08      	cmp	r3, #8
 8002344:	d116      	bne.n	8002374 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f81d 	bl	800239c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2208      	movs	r2, #8
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e00f      	b.n	8002394 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	429a      	cmp	r2, r3
 8002390:	d0b4      	beq.n	80022fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800239c:	b480      	push	{r7}
 800239e:	b095      	sub	sp, #84	@ 0x54
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ae:	e853 3f00 	ldrex	r3, [r3]
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	330c      	adds	r3, #12
 80023c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80023c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023cc:	e841 2300 	strex	r3, r2, [r1]
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e5      	bne.n	80023a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3314      	adds	r3, #20
 80023de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	e853 3f00 	ldrex	r3, [r3]
 80023e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3314      	adds	r3, #20
 80023f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002400:	e841 2300 	strex	r3, r2, [r1]
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e5      	bne.n	80023d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	2b01      	cmp	r3, #1
 8002412:	d119      	bne.n	8002448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	e853 3f00 	ldrex	r3, [r3]
 8002422:	60bb      	str	r3, [r7, #8]
   return(result);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f023 0310 	bic.w	r3, r3, #16
 800242a:	647b      	str	r3, [r7, #68]	@ 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002434:	61ba      	str	r2, [r7, #24]
 8002436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002438:	6979      	ldr	r1, [r7, #20]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	e841 2300 	strex	r3, r2, [r1]
 8002440:	613b      	str	r3, [r7, #16]
   return(result);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e5      	bne.n	8002414 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002456:	bf00      	nop
 8002458:	3754      	adds	r7, #84	@ 0x54
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800249a:	f023 030c 	bic.w	r3, r3, #12
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002574 <UART_SetConfig+0x114>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d103      	bne.n	80024d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024c8:	f7ff fb3e 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	e002      	b.n	80024d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024d0:	f7ff fb26 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 80024d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009a      	lsls	r2, r3, #2
 80024e0:	441a      	add	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	4a22      	ldr	r2, [pc, #136]	@ (8002578 <UART_SetConfig+0x118>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	0119      	lsls	r1, r3, #4
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	009a      	lsls	r2, r3, #2
 8002500:	441a      	add	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	fbb2 f2f3 	udiv	r2, r2, r3
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <UART_SetConfig+0x118>)
 800250e:	fba3 0302 	umull	r0, r3, r3, r2
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2064      	movs	r0, #100	@ 0x64
 8002516:	fb00 f303 	mul.w	r3, r0, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	3332      	adds	r3, #50	@ 0x32
 8002520:	4a15      	ldr	r2, [pc, #84]	@ (8002578 <UART_SetConfig+0x118>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800252c:	4419      	add	r1, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009a      	lsls	r2, r3, #2
 8002538:	441a      	add	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fbb2 f2f3 	udiv	r2, r2, r3
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <UART_SetConfig+0x118>)
 8002546:	fba3 0302 	umull	r0, r3, r3, r2
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2064      	movs	r0, #100	@ 0x64
 800254e:	fb00 f303 	mul.w	r3, r0, r3
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	3332      	adds	r3, #50	@ 0x32
 8002558:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <UART_SetConfig+0x118>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	f003 020f 	and.w	r2, r3, #15
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	440a      	add	r2, r1
 800256a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40013800 	.word	0x40013800
 8002578:	51eb851f 	.word	0x51eb851f

0800257c <std>:
 800257c:	2300      	movs	r3, #0
 800257e:	b510      	push	{r4, lr}
 8002580:	4604      	mov	r4, r0
 8002582:	e9c0 3300 	strd	r3, r3, [r0]
 8002586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800258a:	6083      	str	r3, [r0, #8]
 800258c:	8181      	strh	r1, [r0, #12]
 800258e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002590:	81c2      	strh	r2, [r0, #14]
 8002592:	6183      	str	r3, [r0, #24]
 8002594:	4619      	mov	r1, r3
 8002596:	2208      	movs	r2, #8
 8002598:	305c      	adds	r0, #92	@ 0x5c
 800259a:	f000 f9f9 	bl	8002990 <memset>
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <std+0x58>)
 80025a0:	6224      	str	r4, [r4, #32]
 80025a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <std+0x5c>)
 80025a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <std+0x60>)
 80025aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <std+0x64>)
 80025ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <std+0x68>)
 80025b2:	429c      	cmp	r4, r3
 80025b4:	d006      	beq.n	80025c4 <std+0x48>
 80025b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025ba:	4294      	cmp	r4, r2
 80025bc:	d002      	beq.n	80025c4 <std+0x48>
 80025be:	33d0      	adds	r3, #208	@ 0xd0
 80025c0:	429c      	cmp	r4, r3
 80025c2:	d105      	bne.n	80025d0 <std+0x54>
 80025c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025cc:	f000 ba58 	b.w	8002a80 <__retarget_lock_init_recursive>
 80025d0:	bd10      	pop	{r4, pc}
 80025d2:	bf00      	nop
 80025d4:	080027e1 	.word	0x080027e1
 80025d8:	08002803 	.word	0x08002803
 80025dc:	0800283b 	.word	0x0800283b
 80025e0:	0800285f 	.word	0x0800285f
 80025e4:	20000174 	.word	0x20000174

080025e8 <stdio_exit_handler>:
 80025e8:	4a02      	ldr	r2, [pc, #8]	@ (80025f4 <stdio_exit_handler+0xc>)
 80025ea:	4903      	ldr	r1, [pc, #12]	@ (80025f8 <stdio_exit_handler+0x10>)
 80025ec:	4803      	ldr	r0, [pc, #12]	@ (80025fc <stdio_exit_handler+0x14>)
 80025ee:	f000 b869 	b.w	80026c4 <_fwalk_sglue>
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	08003315 	.word	0x08003315
 80025fc:	2000001c 	.word	0x2000001c

08002600 <cleanup_stdio>:
 8002600:	6841      	ldr	r1, [r0, #4]
 8002602:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <cleanup_stdio+0x34>)
 8002604:	b510      	push	{r4, lr}
 8002606:	4299      	cmp	r1, r3
 8002608:	4604      	mov	r4, r0
 800260a:	d001      	beq.n	8002610 <cleanup_stdio+0x10>
 800260c:	f000 fe82 	bl	8003314 <_fflush_r>
 8002610:	68a1      	ldr	r1, [r4, #8]
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <cleanup_stdio+0x38>)
 8002614:	4299      	cmp	r1, r3
 8002616:	d002      	beq.n	800261e <cleanup_stdio+0x1e>
 8002618:	4620      	mov	r0, r4
 800261a:	f000 fe7b 	bl	8003314 <_fflush_r>
 800261e:	68e1      	ldr	r1, [r4, #12]
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <cleanup_stdio+0x3c>)
 8002622:	4299      	cmp	r1, r3
 8002624:	d004      	beq.n	8002630 <cleanup_stdio+0x30>
 8002626:	4620      	mov	r0, r4
 8002628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800262c:	f000 be72 	b.w	8003314 <_fflush_r>
 8002630:	bd10      	pop	{r4, pc}
 8002632:	bf00      	nop
 8002634:	20000174 	.word	0x20000174
 8002638:	200001dc 	.word	0x200001dc
 800263c:	20000244 	.word	0x20000244

08002640 <global_stdio_init.part.0>:
 8002640:	b510      	push	{r4, lr}
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <global_stdio_init.part.0+0x30>)
 8002644:	4c0b      	ldr	r4, [pc, #44]	@ (8002674 <global_stdio_init.part.0+0x34>)
 8002646:	4a0c      	ldr	r2, [pc, #48]	@ (8002678 <global_stdio_init.part.0+0x38>)
 8002648:	4620      	mov	r0, r4
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	2104      	movs	r1, #4
 800264e:	2200      	movs	r2, #0
 8002650:	f7ff ff94 	bl	800257c <std>
 8002654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002658:	2201      	movs	r2, #1
 800265a:	2109      	movs	r1, #9
 800265c:	f7ff ff8e 	bl	800257c <std>
 8002660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002664:	2202      	movs	r2, #2
 8002666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800266a:	2112      	movs	r1, #18
 800266c:	f7ff bf86 	b.w	800257c <std>
 8002670:	200002ac 	.word	0x200002ac
 8002674:	20000174 	.word	0x20000174
 8002678:	080025e9 	.word	0x080025e9

0800267c <__sfp_lock_acquire>:
 800267c:	4801      	ldr	r0, [pc, #4]	@ (8002684 <__sfp_lock_acquire+0x8>)
 800267e:	f000 ba00 	b.w	8002a82 <__retarget_lock_acquire_recursive>
 8002682:	bf00      	nop
 8002684:	200002b5 	.word	0x200002b5

08002688 <__sfp_lock_release>:
 8002688:	4801      	ldr	r0, [pc, #4]	@ (8002690 <__sfp_lock_release+0x8>)
 800268a:	f000 b9fb 	b.w	8002a84 <__retarget_lock_release_recursive>
 800268e:	bf00      	nop
 8002690:	200002b5 	.word	0x200002b5

08002694 <__sinit>:
 8002694:	b510      	push	{r4, lr}
 8002696:	4604      	mov	r4, r0
 8002698:	f7ff fff0 	bl	800267c <__sfp_lock_acquire>
 800269c:	6a23      	ldr	r3, [r4, #32]
 800269e:	b11b      	cbz	r3, 80026a8 <__sinit+0x14>
 80026a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a4:	f7ff bff0 	b.w	8002688 <__sfp_lock_release>
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <__sinit+0x28>)
 80026aa:	6223      	str	r3, [r4, #32]
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <__sinit+0x2c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f5      	bne.n	80026a0 <__sinit+0xc>
 80026b4:	f7ff ffc4 	bl	8002640 <global_stdio_init.part.0>
 80026b8:	e7f2      	b.n	80026a0 <__sinit+0xc>
 80026ba:	bf00      	nop
 80026bc:	08002601 	.word	0x08002601
 80026c0:	200002ac 	.word	0x200002ac

080026c4 <_fwalk_sglue>:
 80026c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026c8:	4607      	mov	r7, r0
 80026ca:	4688      	mov	r8, r1
 80026cc:	4614      	mov	r4, r2
 80026ce:	2600      	movs	r6, #0
 80026d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026d4:	f1b9 0901 	subs.w	r9, r9, #1
 80026d8:	d505      	bpl.n	80026e6 <_fwalk_sglue+0x22>
 80026da:	6824      	ldr	r4, [r4, #0]
 80026dc:	2c00      	cmp	r4, #0
 80026de:	d1f7      	bne.n	80026d0 <_fwalk_sglue+0xc>
 80026e0:	4630      	mov	r0, r6
 80026e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026e6:	89ab      	ldrh	r3, [r5, #12]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d907      	bls.n	80026fc <_fwalk_sglue+0x38>
 80026ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026f0:	3301      	adds	r3, #1
 80026f2:	d003      	beq.n	80026fc <_fwalk_sglue+0x38>
 80026f4:	4629      	mov	r1, r5
 80026f6:	4638      	mov	r0, r7
 80026f8:	47c0      	blx	r8
 80026fa:	4306      	orrs	r6, r0
 80026fc:	3568      	adds	r5, #104	@ 0x68
 80026fe:	e7e9      	b.n	80026d4 <_fwalk_sglue+0x10>

08002700 <iprintf>:
 8002700:	b40f      	push	{r0, r1, r2, r3}
 8002702:	b507      	push	{r0, r1, r2, lr}
 8002704:	4906      	ldr	r1, [pc, #24]	@ (8002720 <iprintf+0x20>)
 8002706:	ab04      	add	r3, sp, #16
 8002708:	6808      	ldr	r0, [r1, #0]
 800270a:	f853 2b04 	ldr.w	r2, [r3], #4
 800270e:	6881      	ldr	r1, [r0, #8]
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	f000 fad7 	bl	8002cc4 <_vfiprintf_r>
 8002716:	b003      	add	sp, #12
 8002718:	f85d eb04 	ldr.w	lr, [sp], #4
 800271c:	b004      	add	sp, #16
 800271e:	4770      	bx	lr
 8002720:	20000018 	.word	0x20000018

08002724 <_puts_r>:
 8002724:	6a03      	ldr	r3, [r0, #32]
 8002726:	b570      	push	{r4, r5, r6, lr}
 8002728:	4605      	mov	r5, r0
 800272a:	460e      	mov	r6, r1
 800272c:	6884      	ldr	r4, [r0, #8]
 800272e:	b90b      	cbnz	r3, 8002734 <_puts_r+0x10>
 8002730:	f7ff ffb0 	bl	8002694 <__sinit>
 8002734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002736:	07db      	lsls	r3, r3, #31
 8002738:	d405      	bmi.n	8002746 <_puts_r+0x22>
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	0598      	lsls	r0, r3, #22
 800273e:	d402      	bmi.n	8002746 <_puts_r+0x22>
 8002740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002742:	f000 f99e 	bl	8002a82 <__retarget_lock_acquire_recursive>
 8002746:	89a3      	ldrh	r3, [r4, #12]
 8002748:	0719      	lsls	r1, r3, #28
 800274a:	d502      	bpl.n	8002752 <_puts_r+0x2e>
 800274c:	6923      	ldr	r3, [r4, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d135      	bne.n	80027be <_puts_r+0x9a>
 8002752:	4621      	mov	r1, r4
 8002754:	4628      	mov	r0, r5
 8002756:	f000 f8c5 	bl	80028e4 <__swsetup_r>
 800275a:	b380      	cbz	r0, 80027be <_puts_r+0x9a>
 800275c:	f04f 35ff 	mov.w	r5, #4294967295
 8002760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002762:	07da      	lsls	r2, r3, #31
 8002764:	d405      	bmi.n	8002772 <_puts_r+0x4e>
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	059b      	lsls	r3, r3, #22
 800276a:	d402      	bmi.n	8002772 <_puts_r+0x4e>
 800276c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800276e:	f000 f989 	bl	8002a84 <__retarget_lock_release_recursive>
 8002772:	4628      	mov	r0, r5
 8002774:	bd70      	pop	{r4, r5, r6, pc}
 8002776:	2b00      	cmp	r3, #0
 8002778:	da04      	bge.n	8002784 <_puts_r+0x60>
 800277a:	69a2      	ldr	r2, [r4, #24]
 800277c:	429a      	cmp	r2, r3
 800277e:	dc17      	bgt.n	80027b0 <_puts_r+0x8c>
 8002780:	290a      	cmp	r1, #10
 8002782:	d015      	beq.n	80027b0 <_puts_r+0x8c>
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	6022      	str	r2, [r4, #0]
 800278a:	7019      	strb	r1, [r3, #0]
 800278c:	68a3      	ldr	r3, [r4, #8]
 800278e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002792:	3b01      	subs	r3, #1
 8002794:	60a3      	str	r3, [r4, #8]
 8002796:	2900      	cmp	r1, #0
 8002798:	d1ed      	bne.n	8002776 <_puts_r+0x52>
 800279a:	2b00      	cmp	r3, #0
 800279c:	da11      	bge.n	80027c2 <_puts_r+0x9e>
 800279e:	4622      	mov	r2, r4
 80027a0:	210a      	movs	r1, #10
 80027a2:	4628      	mov	r0, r5
 80027a4:	f000 f85f 	bl	8002866 <__swbuf_r>
 80027a8:	3001      	adds	r0, #1
 80027aa:	d0d7      	beq.n	800275c <_puts_r+0x38>
 80027ac:	250a      	movs	r5, #10
 80027ae:	e7d7      	b.n	8002760 <_puts_r+0x3c>
 80027b0:	4622      	mov	r2, r4
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 f857 	bl	8002866 <__swbuf_r>
 80027b8:	3001      	adds	r0, #1
 80027ba:	d1e7      	bne.n	800278c <_puts_r+0x68>
 80027bc:	e7ce      	b.n	800275c <_puts_r+0x38>
 80027be:	3e01      	subs	r6, #1
 80027c0:	e7e4      	b.n	800278c <_puts_r+0x68>
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	6022      	str	r2, [r4, #0]
 80027c8:	220a      	movs	r2, #10
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e7ee      	b.n	80027ac <_puts_r+0x88>
	...

080027d0 <puts>:
 80027d0:	4b02      	ldr	r3, [pc, #8]	@ (80027dc <puts+0xc>)
 80027d2:	4601      	mov	r1, r0
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	f7ff bfa5 	b.w	8002724 <_puts_r>
 80027da:	bf00      	nop
 80027dc:	20000018 	.word	0x20000018

080027e0 <__sread>:
 80027e0:	b510      	push	{r4, lr}
 80027e2:	460c      	mov	r4, r1
 80027e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e8:	f000 f8fc 	bl	80029e4 <_read_r>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	bfab      	itete	ge
 80027f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80027f2:	89a3      	ldrhlt	r3, [r4, #12]
 80027f4:	181b      	addge	r3, r3, r0
 80027f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027fa:	bfac      	ite	ge
 80027fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027fe:	81a3      	strhlt	r3, [r4, #12]
 8002800:	bd10      	pop	{r4, pc}

08002802 <__swrite>:
 8002802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002806:	461f      	mov	r7, r3
 8002808:	898b      	ldrh	r3, [r1, #12]
 800280a:	4605      	mov	r5, r0
 800280c:	05db      	lsls	r3, r3, #23
 800280e:	460c      	mov	r4, r1
 8002810:	4616      	mov	r6, r2
 8002812:	d505      	bpl.n	8002820 <__swrite+0x1e>
 8002814:	2302      	movs	r3, #2
 8002816:	2200      	movs	r2, #0
 8002818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800281c:	f000 f8d0 	bl	80029c0 <_lseek_r>
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	4632      	mov	r2, r6
 8002824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002828:	81a3      	strh	r3, [r4, #12]
 800282a:	4628      	mov	r0, r5
 800282c:	463b      	mov	r3, r7
 800282e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002836:	f000 b8e7 	b.w	8002a08 <_write_r>

0800283a <__sseek>:
 800283a:	b510      	push	{r4, lr}
 800283c:	460c      	mov	r4, r1
 800283e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002842:	f000 f8bd 	bl	80029c0 <_lseek_r>
 8002846:	1c43      	adds	r3, r0, #1
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	bf15      	itete	ne
 800284c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800284e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002852:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002856:	81a3      	strheq	r3, [r4, #12]
 8002858:	bf18      	it	ne
 800285a:	81a3      	strhne	r3, [r4, #12]
 800285c:	bd10      	pop	{r4, pc}

0800285e <__sclose>:
 800285e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002862:	f000 b89d 	b.w	80029a0 <_close_r>

08002866 <__swbuf_r>:
 8002866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002868:	460e      	mov	r6, r1
 800286a:	4614      	mov	r4, r2
 800286c:	4605      	mov	r5, r0
 800286e:	b118      	cbz	r0, 8002878 <__swbuf_r+0x12>
 8002870:	6a03      	ldr	r3, [r0, #32]
 8002872:	b90b      	cbnz	r3, 8002878 <__swbuf_r+0x12>
 8002874:	f7ff ff0e 	bl	8002694 <__sinit>
 8002878:	69a3      	ldr	r3, [r4, #24]
 800287a:	60a3      	str	r3, [r4, #8]
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	071a      	lsls	r2, r3, #28
 8002880:	d501      	bpl.n	8002886 <__swbuf_r+0x20>
 8002882:	6923      	ldr	r3, [r4, #16]
 8002884:	b943      	cbnz	r3, 8002898 <__swbuf_r+0x32>
 8002886:	4621      	mov	r1, r4
 8002888:	4628      	mov	r0, r5
 800288a:	f000 f82b 	bl	80028e4 <__swsetup_r>
 800288e:	b118      	cbz	r0, 8002898 <__swbuf_r+0x32>
 8002890:	f04f 37ff 	mov.w	r7, #4294967295
 8002894:	4638      	mov	r0, r7
 8002896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	6922      	ldr	r2, [r4, #16]
 800289c:	b2f6      	uxtb	r6, r6
 800289e:	1a98      	subs	r0, r3, r2
 80028a0:	6963      	ldr	r3, [r4, #20]
 80028a2:	4637      	mov	r7, r6
 80028a4:	4283      	cmp	r3, r0
 80028a6:	dc05      	bgt.n	80028b4 <__swbuf_r+0x4e>
 80028a8:	4621      	mov	r1, r4
 80028aa:	4628      	mov	r0, r5
 80028ac:	f000 fd32 	bl	8003314 <_fflush_r>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d1ed      	bne.n	8002890 <__swbuf_r+0x2a>
 80028b4:	68a3      	ldr	r3, [r4, #8]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	60a3      	str	r3, [r4, #8]
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	6022      	str	r2, [r4, #0]
 80028c0:	701e      	strb	r6, [r3, #0]
 80028c2:	6962      	ldr	r2, [r4, #20]
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d004      	beq.n	80028d4 <__swbuf_r+0x6e>
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	07db      	lsls	r3, r3, #31
 80028ce:	d5e1      	bpl.n	8002894 <__swbuf_r+0x2e>
 80028d0:	2e0a      	cmp	r6, #10
 80028d2:	d1df      	bne.n	8002894 <__swbuf_r+0x2e>
 80028d4:	4621      	mov	r1, r4
 80028d6:	4628      	mov	r0, r5
 80028d8:	f000 fd1c 	bl	8003314 <_fflush_r>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d0d9      	beq.n	8002894 <__swbuf_r+0x2e>
 80028e0:	e7d6      	b.n	8002890 <__swbuf_r+0x2a>
	...

080028e4 <__swsetup_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	4b29      	ldr	r3, [pc, #164]	@ (800298c <__swsetup_r+0xa8>)
 80028e8:	4605      	mov	r5, r0
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	460c      	mov	r4, r1
 80028ee:	b118      	cbz	r0, 80028f8 <__swsetup_r+0x14>
 80028f0:	6a03      	ldr	r3, [r0, #32]
 80028f2:	b90b      	cbnz	r3, 80028f8 <__swsetup_r+0x14>
 80028f4:	f7ff fece 	bl	8002694 <__sinit>
 80028f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028fc:	0719      	lsls	r1, r3, #28
 80028fe:	d422      	bmi.n	8002946 <__swsetup_r+0x62>
 8002900:	06da      	lsls	r2, r3, #27
 8002902:	d407      	bmi.n	8002914 <__swsetup_r+0x30>
 8002904:	2209      	movs	r2, #9
 8002906:	602a      	str	r2, [r5, #0]
 8002908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	81a3      	strh	r3, [r4, #12]
 8002912:	e033      	b.n	800297c <__swsetup_r+0x98>
 8002914:	0758      	lsls	r0, r3, #29
 8002916:	d512      	bpl.n	800293e <__swsetup_r+0x5a>
 8002918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800291a:	b141      	cbz	r1, 800292e <__swsetup_r+0x4a>
 800291c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002920:	4299      	cmp	r1, r3
 8002922:	d002      	beq.n	800292a <__swsetup_r+0x46>
 8002924:	4628      	mov	r0, r5
 8002926:	f000 f8af 	bl	8002a88 <_free_r>
 800292a:	2300      	movs	r3, #0
 800292c:	6363      	str	r3, [r4, #52]	@ 0x34
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002934:	81a3      	strh	r3, [r4, #12]
 8002936:	2300      	movs	r3, #0
 8002938:	6063      	str	r3, [r4, #4]
 800293a:	6923      	ldr	r3, [r4, #16]
 800293c:	6023      	str	r3, [r4, #0]
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	81a3      	strh	r3, [r4, #12]
 8002946:	6923      	ldr	r3, [r4, #16]
 8002948:	b94b      	cbnz	r3, 800295e <__swsetup_r+0x7a>
 800294a:	89a3      	ldrh	r3, [r4, #12]
 800294c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002954:	d003      	beq.n	800295e <__swsetup_r+0x7a>
 8002956:	4621      	mov	r1, r4
 8002958:	4628      	mov	r0, r5
 800295a:	f000 fd28 	bl	80033ae <__smakebuf_r>
 800295e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002962:	f013 0201 	ands.w	r2, r3, #1
 8002966:	d00a      	beq.n	800297e <__swsetup_r+0x9a>
 8002968:	2200      	movs	r2, #0
 800296a:	60a2      	str	r2, [r4, #8]
 800296c:	6962      	ldr	r2, [r4, #20]
 800296e:	4252      	negs	r2, r2
 8002970:	61a2      	str	r2, [r4, #24]
 8002972:	6922      	ldr	r2, [r4, #16]
 8002974:	b942      	cbnz	r2, 8002988 <__swsetup_r+0xa4>
 8002976:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800297a:	d1c5      	bne.n	8002908 <__swsetup_r+0x24>
 800297c:	bd38      	pop	{r3, r4, r5, pc}
 800297e:	0799      	lsls	r1, r3, #30
 8002980:	bf58      	it	pl
 8002982:	6962      	ldrpl	r2, [r4, #20]
 8002984:	60a2      	str	r2, [r4, #8]
 8002986:	e7f4      	b.n	8002972 <__swsetup_r+0x8e>
 8002988:	2000      	movs	r0, #0
 800298a:	e7f7      	b.n	800297c <__swsetup_r+0x98>
 800298c:	20000018 	.word	0x20000018

08002990 <memset>:
 8002990:	4603      	mov	r3, r0
 8002992:	4402      	add	r2, r0
 8002994:	4293      	cmp	r3, r2
 8002996:	d100      	bne.n	800299a <memset+0xa>
 8002998:	4770      	bx	lr
 800299a:	f803 1b01 	strb.w	r1, [r3], #1
 800299e:	e7f9      	b.n	8002994 <memset+0x4>

080029a0 <_close_r>:
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	2300      	movs	r3, #0
 80029a4:	4d05      	ldr	r5, [pc, #20]	@ (80029bc <_close_r+0x1c>)
 80029a6:	4604      	mov	r4, r0
 80029a8:	4608      	mov	r0, r1
 80029aa:	602b      	str	r3, [r5, #0]
 80029ac:	f7fe f8f1 	bl	8000b92 <_close>
 80029b0:	1c43      	adds	r3, r0, #1
 80029b2:	d102      	bne.n	80029ba <_close_r+0x1a>
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	b103      	cbz	r3, 80029ba <_close_r+0x1a>
 80029b8:	6023      	str	r3, [r4, #0]
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
 80029bc:	200002b0 	.word	0x200002b0

080029c0 <_lseek_r>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4604      	mov	r4, r0
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	2200      	movs	r2, #0
 80029ca:	4d05      	ldr	r5, [pc, #20]	@ (80029e0 <_lseek_r+0x20>)
 80029cc:	602a      	str	r2, [r5, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7fe f903 	bl	8000bda <_lseek>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d102      	bne.n	80029de <_lseek_r+0x1e>
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	b103      	cbz	r3, 80029de <_lseek_r+0x1e>
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	200002b0 	.word	0x200002b0

080029e4 <_read_r>:
 80029e4:	b538      	push	{r3, r4, r5, lr}
 80029e6:	4604      	mov	r4, r0
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	2200      	movs	r2, #0
 80029ee:	4d05      	ldr	r5, [pc, #20]	@ (8002a04 <_read_r+0x20>)
 80029f0:	602a      	str	r2, [r5, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f7fe f894 	bl	8000b20 <_read>
 80029f8:	1c43      	adds	r3, r0, #1
 80029fa:	d102      	bne.n	8002a02 <_read_r+0x1e>
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	b103      	cbz	r3, 8002a02 <_read_r+0x1e>
 8002a00:	6023      	str	r3, [r4, #0]
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
 8002a04:	200002b0 	.word	0x200002b0

08002a08 <_write_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	2200      	movs	r2, #0
 8002a12:	4d05      	ldr	r5, [pc, #20]	@ (8002a28 <_write_r+0x20>)
 8002a14:	602a      	str	r2, [r5, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f7fe f89f 	bl	8000b5a <_write>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d102      	bne.n	8002a26 <_write_r+0x1e>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b103      	cbz	r3, 8002a26 <_write_r+0x1e>
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	200002b0 	.word	0x200002b0

08002a2c <__errno>:
 8002a2c:	4b01      	ldr	r3, [pc, #4]	@ (8002a34 <__errno+0x8>)
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000018 	.word	0x20000018

08002a38 <__libc_init_array>:
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	2600      	movs	r6, #0
 8002a3c:	4d0c      	ldr	r5, [pc, #48]	@ (8002a70 <__libc_init_array+0x38>)
 8002a3e:	4c0d      	ldr	r4, [pc, #52]	@ (8002a74 <__libc_init_array+0x3c>)
 8002a40:	1b64      	subs	r4, r4, r5
 8002a42:	10a4      	asrs	r4, r4, #2
 8002a44:	42a6      	cmp	r6, r4
 8002a46:	d109      	bne.n	8002a5c <__libc_init_array+0x24>
 8002a48:	f000 fd2e 	bl	80034a8 <_init>
 8002a4c:	2600      	movs	r6, #0
 8002a4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002a78 <__libc_init_array+0x40>)
 8002a50:	4c0a      	ldr	r4, [pc, #40]	@ (8002a7c <__libc_init_array+0x44>)
 8002a52:	1b64      	subs	r4, r4, r5
 8002a54:	10a4      	asrs	r4, r4, #2
 8002a56:	42a6      	cmp	r6, r4
 8002a58:	d105      	bne.n	8002a66 <__libc_init_array+0x2e>
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
 8002a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a60:	4798      	blx	r3
 8002a62:	3601      	adds	r6, #1
 8002a64:	e7ee      	b.n	8002a44 <__libc_init_array+0xc>
 8002a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6a:	4798      	blx	r3
 8002a6c:	3601      	adds	r6, #1
 8002a6e:	e7f2      	b.n	8002a56 <__libc_init_array+0x1e>
 8002a70:	08003590 	.word	0x08003590
 8002a74:	08003590 	.word	0x08003590
 8002a78:	08003590 	.word	0x08003590
 8002a7c:	08003594 	.word	0x08003594

08002a80 <__retarget_lock_init_recursive>:
 8002a80:	4770      	bx	lr

08002a82 <__retarget_lock_acquire_recursive>:
 8002a82:	4770      	bx	lr

08002a84 <__retarget_lock_release_recursive>:
 8002a84:	4770      	bx	lr
	...

08002a88 <_free_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4605      	mov	r5, r0
 8002a8c:	2900      	cmp	r1, #0
 8002a8e:	d040      	beq.n	8002b12 <_free_r+0x8a>
 8002a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a94:	1f0c      	subs	r4, r1, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bfb8      	it	lt
 8002a9a:	18e4      	addlt	r4, r4, r3
 8002a9c:	f000 f8de 	bl	8002c5c <__malloc_lock>
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <_free_r+0x8c>)
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	b933      	cbnz	r3, 8002ab4 <_free_r+0x2c>
 8002aa6:	6063      	str	r3, [r4, #4]
 8002aa8:	6014      	str	r4, [r2, #0]
 8002aaa:	4628      	mov	r0, r5
 8002aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ab0:	f000 b8da 	b.w	8002c68 <__malloc_unlock>
 8002ab4:	42a3      	cmp	r3, r4
 8002ab6:	d908      	bls.n	8002aca <_free_r+0x42>
 8002ab8:	6820      	ldr	r0, [r4, #0]
 8002aba:	1821      	adds	r1, r4, r0
 8002abc:	428b      	cmp	r3, r1
 8002abe:	bf01      	itttt	eq
 8002ac0:	6819      	ldreq	r1, [r3, #0]
 8002ac2:	685b      	ldreq	r3, [r3, #4]
 8002ac4:	1809      	addeq	r1, r1, r0
 8002ac6:	6021      	streq	r1, [r4, #0]
 8002ac8:	e7ed      	b.n	8002aa6 <_free_r+0x1e>
 8002aca:	461a      	mov	r2, r3
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	b10b      	cbz	r3, 8002ad4 <_free_r+0x4c>
 8002ad0:	42a3      	cmp	r3, r4
 8002ad2:	d9fa      	bls.n	8002aca <_free_r+0x42>
 8002ad4:	6811      	ldr	r1, [r2, #0]
 8002ad6:	1850      	adds	r0, r2, r1
 8002ad8:	42a0      	cmp	r0, r4
 8002ada:	d10b      	bne.n	8002af4 <_free_r+0x6c>
 8002adc:	6820      	ldr	r0, [r4, #0]
 8002ade:	4401      	add	r1, r0
 8002ae0:	1850      	adds	r0, r2, r1
 8002ae2:	4283      	cmp	r3, r0
 8002ae4:	6011      	str	r1, [r2, #0]
 8002ae6:	d1e0      	bne.n	8002aaa <_free_r+0x22>
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4408      	add	r0, r1
 8002aee:	6010      	str	r0, [r2, #0]
 8002af0:	6053      	str	r3, [r2, #4]
 8002af2:	e7da      	b.n	8002aaa <_free_r+0x22>
 8002af4:	d902      	bls.n	8002afc <_free_r+0x74>
 8002af6:	230c      	movs	r3, #12
 8002af8:	602b      	str	r3, [r5, #0]
 8002afa:	e7d6      	b.n	8002aaa <_free_r+0x22>
 8002afc:	6820      	ldr	r0, [r4, #0]
 8002afe:	1821      	adds	r1, r4, r0
 8002b00:	428b      	cmp	r3, r1
 8002b02:	bf01      	itttt	eq
 8002b04:	6819      	ldreq	r1, [r3, #0]
 8002b06:	685b      	ldreq	r3, [r3, #4]
 8002b08:	1809      	addeq	r1, r1, r0
 8002b0a:	6021      	streq	r1, [r4, #0]
 8002b0c:	6063      	str	r3, [r4, #4]
 8002b0e:	6054      	str	r4, [r2, #4]
 8002b10:	e7cb      	b.n	8002aaa <_free_r+0x22>
 8002b12:	bd38      	pop	{r3, r4, r5, pc}
 8002b14:	200002bc 	.word	0x200002bc

08002b18 <sbrk_aligned>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8002b58 <sbrk_aligned+0x40>)
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	6831      	ldr	r1, [r6, #0]
 8002b20:	4605      	mov	r5, r0
 8002b22:	b911      	cbnz	r1, 8002b2a <sbrk_aligned+0x12>
 8002b24:	f000 fca2 	bl	800346c <_sbrk_r>
 8002b28:	6030      	str	r0, [r6, #0]
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f000 fc9d 	bl	800346c <_sbrk_r>
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	d103      	bne.n	8002b3e <sbrk_aligned+0x26>
 8002b36:	f04f 34ff 	mov.w	r4, #4294967295
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	1cc4      	adds	r4, r0, #3
 8002b40:	f024 0403 	bic.w	r4, r4, #3
 8002b44:	42a0      	cmp	r0, r4
 8002b46:	d0f8      	beq.n	8002b3a <sbrk_aligned+0x22>
 8002b48:	1a21      	subs	r1, r4, r0
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f000 fc8e 	bl	800346c <_sbrk_r>
 8002b50:	3001      	adds	r0, #1
 8002b52:	d1f2      	bne.n	8002b3a <sbrk_aligned+0x22>
 8002b54:	e7ef      	b.n	8002b36 <sbrk_aligned+0x1e>
 8002b56:	bf00      	nop
 8002b58:	200002b8 	.word	0x200002b8

08002b5c <_malloc_r>:
 8002b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b60:	1ccd      	adds	r5, r1, #3
 8002b62:	f025 0503 	bic.w	r5, r5, #3
 8002b66:	3508      	adds	r5, #8
 8002b68:	2d0c      	cmp	r5, #12
 8002b6a:	bf38      	it	cc
 8002b6c:	250c      	movcc	r5, #12
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	4606      	mov	r6, r0
 8002b72:	db01      	blt.n	8002b78 <_malloc_r+0x1c>
 8002b74:	42a9      	cmp	r1, r5
 8002b76:	d904      	bls.n	8002b82 <_malloc_r+0x26>
 8002b78:	230c      	movs	r3, #12
 8002b7a:	6033      	str	r3, [r6, #0]
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c58 <_malloc_r+0xfc>
 8002b86:	f000 f869 	bl	8002c5c <__malloc_lock>
 8002b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b8e:	461c      	mov	r4, r3
 8002b90:	bb44      	cbnz	r4, 8002be4 <_malloc_r+0x88>
 8002b92:	4629      	mov	r1, r5
 8002b94:	4630      	mov	r0, r6
 8002b96:	f7ff ffbf 	bl	8002b18 <sbrk_aligned>
 8002b9a:	1c43      	adds	r3, r0, #1
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	d158      	bne.n	8002c52 <_malloc_r+0xf6>
 8002ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8002ba4:	4627      	mov	r7, r4
 8002ba6:	2f00      	cmp	r7, #0
 8002ba8:	d143      	bne.n	8002c32 <_malloc_r+0xd6>
 8002baa:	2c00      	cmp	r4, #0
 8002bac:	d04b      	beq.n	8002c46 <_malloc_r+0xea>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	4639      	mov	r1, r7
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	eb04 0903 	add.w	r9, r4, r3
 8002bb8:	f000 fc58 	bl	800346c <_sbrk_r>
 8002bbc:	4581      	cmp	r9, r0
 8002bbe:	d142      	bne.n	8002c46 <_malloc_r+0xea>
 8002bc0:	6821      	ldr	r1, [r4, #0]
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	1a6d      	subs	r5, r5, r1
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f7ff ffa6 	bl	8002b18 <sbrk_aligned>
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d03a      	beq.n	8002c46 <_malloc_r+0xea>
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	442b      	add	r3, r5
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	bb62      	cbnz	r2, 8002c38 <_malloc_r+0xdc>
 8002bde:	f8c8 7000 	str.w	r7, [r8]
 8002be2:	e00f      	b.n	8002c04 <_malloc_r+0xa8>
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	1b52      	subs	r2, r2, r5
 8002be8:	d420      	bmi.n	8002c2c <_malloc_r+0xd0>
 8002bea:	2a0b      	cmp	r2, #11
 8002bec:	d917      	bls.n	8002c1e <_malloc_r+0xc2>
 8002bee:	1961      	adds	r1, r4, r5
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	6025      	str	r5, [r4, #0]
 8002bf4:	bf18      	it	ne
 8002bf6:	6059      	strne	r1, [r3, #4]
 8002bf8:	6863      	ldr	r3, [r4, #4]
 8002bfa:	bf08      	it	eq
 8002bfc:	f8c8 1000 	streq.w	r1, [r8]
 8002c00:	5162      	str	r2, [r4, r5]
 8002c02:	604b      	str	r3, [r1, #4]
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 f82f 	bl	8002c68 <__malloc_unlock>
 8002c0a:	f104 000b 	add.w	r0, r4, #11
 8002c0e:	1d23      	adds	r3, r4, #4
 8002c10:	f020 0007 	bic.w	r0, r0, #7
 8002c14:	1ac2      	subs	r2, r0, r3
 8002c16:	bf1c      	itt	ne
 8002c18:	1a1b      	subne	r3, r3, r0
 8002c1a:	50a3      	strne	r3, [r4, r2]
 8002c1c:	e7af      	b.n	8002b7e <_malloc_r+0x22>
 8002c1e:	6862      	ldr	r2, [r4, #4]
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	bf0c      	ite	eq
 8002c24:	f8c8 2000 	streq.w	r2, [r8]
 8002c28:	605a      	strne	r2, [r3, #4]
 8002c2a:	e7eb      	b.n	8002c04 <_malloc_r+0xa8>
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	6864      	ldr	r4, [r4, #4]
 8002c30:	e7ae      	b.n	8002b90 <_malloc_r+0x34>
 8002c32:	463c      	mov	r4, r7
 8002c34:	687f      	ldr	r7, [r7, #4]
 8002c36:	e7b6      	b.n	8002ba6 <_malloc_r+0x4a>
 8002c38:	461a      	mov	r2, r3
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	d1fb      	bne.n	8002c38 <_malloc_r+0xdc>
 8002c40:	2300      	movs	r3, #0
 8002c42:	6053      	str	r3, [r2, #4]
 8002c44:	e7de      	b.n	8002c04 <_malloc_r+0xa8>
 8002c46:	230c      	movs	r3, #12
 8002c48:	4630      	mov	r0, r6
 8002c4a:	6033      	str	r3, [r6, #0]
 8002c4c:	f000 f80c 	bl	8002c68 <__malloc_unlock>
 8002c50:	e794      	b.n	8002b7c <_malloc_r+0x20>
 8002c52:	6005      	str	r5, [r0, #0]
 8002c54:	e7d6      	b.n	8002c04 <_malloc_r+0xa8>
 8002c56:	bf00      	nop
 8002c58:	200002bc 	.word	0x200002bc

08002c5c <__malloc_lock>:
 8002c5c:	4801      	ldr	r0, [pc, #4]	@ (8002c64 <__malloc_lock+0x8>)
 8002c5e:	f7ff bf10 	b.w	8002a82 <__retarget_lock_acquire_recursive>
 8002c62:	bf00      	nop
 8002c64:	200002b4 	.word	0x200002b4

08002c68 <__malloc_unlock>:
 8002c68:	4801      	ldr	r0, [pc, #4]	@ (8002c70 <__malloc_unlock+0x8>)
 8002c6a:	f7ff bf0b 	b.w	8002a84 <__retarget_lock_release_recursive>
 8002c6e:	bf00      	nop
 8002c70:	200002b4 	.word	0x200002b4

08002c74 <__sfputc_r>:
 8002c74:	6893      	ldr	r3, [r2, #8]
 8002c76:	b410      	push	{r4}
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	6093      	str	r3, [r2, #8]
 8002c7e:	da07      	bge.n	8002c90 <__sfputc_r+0x1c>
 8002c80:	6994      	ldr	r4, [r2, #24]
 8002c82:	42a3      	cmp	r3, r4
 8002c84:	db01      	blt.n	8002c8a <__sfputc_r+0x16>
 8002c86:	290a      	cmp	r1, #10
 8002c88:	d102      	bne.n	8002c90 <__sfputc_r+0x1c>
 8002c8a:	bc10      	pop	{r4}
 8002c8c:	f7ff bdeb 	b.w	8002866 <__swbuf_r>
 8002c90:	6813      	ldr	r3, [r2, #0]
 8002c92:	1c58      	adds	r0, r3, #1
 8002c94:	6010      	str	r0, [r2, #0]
 8002c96:	7019      	strb	r1, [r3, #0]
 8002c98:	4608      	mov	r0, r1
 8002c9a:	bc10      	pop	{r4}
 8002c9c:	4770      	bx	lr

08002c9e <__sfputs_r>:
 8002c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca0:	4606      	mov	r6, r0
 8002ca2:	460f      	mov	r7, r1
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	18d5      	adds	r5, r2, r3
 8002ca8:	42ac      	cmp	r4, r5
 8002caa:	d101      	bne.n	8002cb0 <__sfputs_r+0x12>
 8002cac:	2000      	movs	r0, #0
 8002cae:	e007      	b.n	8002cc0 <__sfputs_r+0x22>
 8002cb0:	463a      	mov	r2, r7
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cb8:	f7ff ffdc 	bl	8002c74 <__sfputc_r>
 8002cbc:	1c43      	adds	r3, r0, #1
 8002cbe:	d1f3      	bne.n	8002ca8 <__sfputs_r+0xa>
 8002cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002cc4 <_vfiprintf_r>:
 8002cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc8:	460d      	mov	r5, r1
 8002cca:	4614      	mov	r4, r2
 8002ccc:	4698      	mov	r8, r3
 8002cce:	4606      	mov	r6, r0
 8002cd0:	b09d      	sub	sp, #116	@ 0x74
 8002cd2:	b118      	cbz	r0, 8002cdc <_vfiprintf_r+0x18>
 8002cd4:	6a03      	ldr	r3, [r0, #32]
 8002cd6:	b90b      	cbnz	r3, 8002cdc <_vfiprintf_r+0x18>
 8002cd8:	f7ff fcdc 	bl	8002694 <__sinit>
 8002cdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cde:	07d9      	lsls	r1, r3, #31
 8002ce0:	d405      	bmi.n	8002cee <_vfiprintf_r+0x2a>
 8002ce2:	89ab      	ldrh	r3, [r5, #12]
 8002ce4:	059a      	lsls	r2, r3, #22
 8002ce6:	d402      	bmi.n	8002cee <_vfiprintf_r+0x2a>
 8002ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cea:	f7ff feca 	bl	8002a82 <__retarget_lock_acquire_recursive>
 8002cee:	89ab      	ldrh	r3, [r5, #12]
 8002cf0:	071b      	lsls	r3, r3, #28
 8002cf2:	d501      	bpl.n	8002cf8 <_vfiprintf_r+0x34>
 8002cf4:	692b      	ldr	r3, [r5, #16]
 8002cf6:	b99b      	cbnz	r3, 8002d20 <_vfiprintf_r+0x5c>
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f7ff fdf2 	bl	80028e4 <__swsetup_r>
 8002d00:	b170      	cbz	r0, 8002d20 <_vfiprintf_r+0x5c>
 8002d02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d04:	07dc      	lsls	r4, r3, #31
 8002d06:	d504      	bpl.n	8002d12 <_vfiprintf_r+0x4e>
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	b01d      	add	sp, #116	@ 0x74
 8002d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d12:	89ab      	ldrh	r3, [r5, #12]
 8002d14:	0598      	lsls	r0, r3, #22
 8002d16:	d4f7      	bmi.n	8002d08 <_vfiprintf_r+0x44>
 8002d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d1a:	f7ff feb3 	bl	8002a84 <__retarget_lock_release_recursive>
 8002d1e:	e7f3      	b.n	8002d08 <_vfiprintf_r+0x44>
 8002d20:	2300      	movs	r3, #0
 8002d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d24:	2320      	movs	r3, #32
 8002d26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d2a:	2330      	movs	r3, #48	@ 0x30
 8002d2c:	f04f 0901 	mov.w	r9, #1
 8002d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002ee0 <_vfiprintf_r+0x21c>
 8002d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	469a      	mov	sl, r3
 8002d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d44:	b10a      	cbz	r2, 8002d4a <_vfiprintf_r+0x86>
 8002d46:	2a25      	cmp	r2, #37	@ 0x25
 8002d48:	d1f9      	bne.n	8002d3e <_vfiprintf_r+0x7a>
 8002d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8002d4e:	d00b      	beq.n	8002d68 <_vfiprintf_r+0xa4>
 8002d50:	465b      	mov	r3, fp
 8002d52:	4622      	mov	r2, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	4630      	mov	r0, r6
 8002d58:	f7ff ffa1 	bl	8002c9e <__sfputs_r>
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	f000 80a7 	beq.w	8002eb0 <_vfiprintf_r+0x1ec>
 8002d62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d64:	445a      	add	r2, fp
 8002d66:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d68:	f89a 3000 	ldrb.w	r3, [sl]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 809f 	beq.w	8002eb0 <_vfiprintf_r+0x1ec>
 8002d72:	2300      	movs	r3, #0
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d7c:	f10a 0a01 	add.w	sl, sl, #1
 8002d80:	9304      	str	r3, [sp, #16]
 8002d82:	9307      	str	r3, [sp, #28]
 8002d84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d88:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d8a:	4654      	mov	r4, sl
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d92:	4853      	ldr	r0, [pc, #332]	@ (8002ee0 <_vfiprintf_r+0x21c>)
 8002d94:	f000 fb7a 	bl	800348c <memchr>
 8002d98:	9a04      	ldr	r2, [sp, #16]
 8002d9a:	b9d8      	cbnz	r0, 8002dd4 <_vfiprintf_r+0x110>
 8002d9c:	06d1      	lsls	r1, r2, #27
 8002d9e:	bf44      	itt	mi
 8002da0:	2320      	movmi	r3, #32
 8002da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002da6:	0713      	lsls	r3, r2, #28
 8002da8:	bf44      	itt	mi
 8002daa:	232b      	movmi	r3, #43	@ 0x2b
 8002dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002db0:	f89a 3000 	ldrb.w	r3, [sl]
 8002db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002db6:	d015      	beq.n	8002de4 <_vfiprintf_r+0x120>
 8002db8:	4654      	mov	r4, sl
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f04f 0c0a 	mov.w	ip, #10
 8002dc0:	9a07      	ldr	r2, [sp, #28]
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dc8:	3b30      	subs	r3, #48	@ 0x30
 8002dca:	2b09      	cmp	r3, #9
 8002dcc:	d94b      	bls.n	8002e66 <_vfiprintf_r+0x1a2>
 8002dce:	b1b0      	cbz	r0, 8002dfe <_vfiprintf_r+0x13a>
 8002dd0:	9207      	str	r2, [sp, #28]
 8002dd2:	e014      	b.n	8002dfe <_vfiprintf_r+0x13a>
 8002dd4:	eba0 0308 	sub.w	r3, r0, r8
 8002dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	46a2      	mov	sl, r4
 8002de0:	9304      	str	r3, [sp, #16]
 8002de2:	e7d2      	b.n	8002d8a <_vfiprintf_r+0xc6>
 8002de4:	9b03      	ldr	r3, [sp, #12]
 8002de6:	1d19      	adds	r1, r3, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	9103      	str	r1, [sp, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bfbb      	ittet	lt
 8002df0:	425b      	neglt	r3, r3
 8002df2:	f042 0202 	orrlt.w	r2, r2, #2
 8002df6:	9307      	strge	r3, [sp, #28]
 8002df8:	9307      	strlt	r3, [sp, #28]
 8002dfa:	bfb8      	it	lt
 8002dfc:	9204      	strlt	r2, [sp, #16]
 8002dfe:	7823      	ldrb	r3, [r4, #0]
 8002e00:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e02:	d10a      	bne.n	8002e1a <_vfiprintf_r+0x156>
 8002e04:	7863      	ldrb	r3, [r4, #1]
 8002e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e08:	d132      	bne.n	8002e70 <_vfiprintf_r+0x1ac>
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	3402      	adds	r4, #2
 8002e0e:	1d1a      	adds	r2, r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	9203      	str	r2, [sp, #12]
 8002e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e18:	9305      	str	r3, [sp, #20]
 8002e1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002ee4 <_vfiprintf_r+0x220>
 8002e1e:	2203      	movs	r2, #3
 8002e20:	4650      	mov	r0, sl
 8002e22:	7821      	ldrb	r1, [r4, #0]
 8002e24:	f000 fb32 	bl	800348c <memchr>
 8002e28:	b138      	cbz	r0, 8002e3a <_vfiprintf_r+0x176>
 8002e2a:	2240      	movs	r2, #64	@ 0x40
 8002e2c:	9b04      	ldr	r3, [sp, #16]
 8002e2e:	eba0 000a 	sub.w	r0, r0, sl
 8002e32:	4082      	lsls	r2, r0
 8002e34:	4313      	orrs	r3, r2
 8002e36:	3401      	adds	r4, #1
 8002e38:	9304      	str	r3, [sp, #16]
 8002e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e3e:	2206      	movs	r2, #6
 8002e40:	4829      	ldr	r0, [pc, #164]	@ (8002ee8 <_vfiprintf_r+0x224>)
 8002e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e46:	f000 fb21 	bl	800348c <memchr>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d03f      	beq.n	8002ece <_vfiprintf_r+0x20a>
 8002e4e:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <_vfiprintf_r+0x228>)
 8002e50:	bb1b      	cbnz	r3, 8002e9a <_vfiprintf_r+0x1d6>
 8002e52:	9b03      	ldr	r3, [sp, #12]
 8002e54:	3307      	adds	r3, #7
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	9303      	str	r3, [sp, #12]
 8002e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e60:	443b      	add	r3, r7
 8002e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e64:	e76a      	b.n	8002d3c <_vfiprintf_r+0x78>
 8002e66:	460c      	mov	r4, r1
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e6e:	e7a8      	b.n	8002dc2 <_vfiprintf_r+0xfe>
 8002e70:	2300      	movs	r3, #0
 8002e72:	f04f 0c0a 	mov.w	ip, #10
 8002e76:	4619      	mov	r1, r3
 8002e78:	3401      	adds	r4, #1
 8002e7a:	9305      	str	r3, [sp, #20]
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e82:	3a30      	subs	r2, #48	@ 0x30
 8002e84:	2a09      	cmp	r2, #9
 8002e86:	d903      	bls.n	8002e90 <_vfiprintf_r+0x1cc>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0c6      	beq.n	8002e1a <_vfiprintf_r+0x156>
 8002e8c:	9105      	str	r1, [sp, #20]
 8002e8e:	e7c4      	b.n	8002e1a <_vfiprintf_r+0x156>
 8002e90:	4604      	mov	r4, r0
 8002e92:	2301      	movs	r3, #1
 8002e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e98:	e7f0      	b.n	8002e7c <_vfiprintf_r+0x1b8>
 8002e9a:	ab03      	add	r3, sp, #12
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <_vfiprintf_r+0x22c>)
 8002ea4:	a904      	add	r1, sp, #16
 8002ea6:	f3af 8000 	nop.w
 8002eaa:	4607      	mov	r7, r0
 8002eac:	1c78      	adds	r0, r7, #1
 8002eae:	d1d6      	bne.n	8002e5e <_vfiprintf_r+0x19a>
 8002eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002eb2:	07d9      	lsls	r1, r3, #31
 8002eb4:	d405      	bmi.n	8002ec2 <_vfiprintf_r+0x1fe>
 8002eb6:	89ab      	ldrh	r3, [r5, #12]
 8002eb8:	059a      	lsls	r2, r3, #22
 8002eba:	d402      	bmi.n	8002ec2 <_vfiprintf_r+0x1fe>
 8002ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ebe:	f7ff fde1 	bl	8002a84 <__retarget_lock_release_recursive>
 8002ec2:	89ab      	ldrh	r3, [r5, #12]
 8002ec4:	065b      	lsls	r3, r3, #25
 8002ec6:	f53f af1f 	bmi.w	8002d08 <_vfiprintf_r+0x44>
 8002eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ecc:	e71e      	b.n	8002d0c <_vfiprintf_r+0x48>
 8002ece:	ab03      	add	r3, sp, #12
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	462a      	mov	r2, r5
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <_vfiprintf_r+0x22c>)
 8002ed8:	a904      	add	r1, sp, #16
 8002eda:	f000 f87d 	bl	8002fd8 <_printf_i>
 8002ede:	e7e4      	b.n	8002eaa <_vfiprintf_r+0x1e6>
 8002ee0:	0800355a 	.word	0x0800355a
 8002ee4:	08003560 	.word	0x08003560
 8002ee8:	08003564 	.word	0x08003564
 8002eec:	00000000 	.word	0x00000000
 8002ef0:	08002c9f 	.word	0x08002c9f

08002ef4 <_printf_common>:
 8002ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef8:	4616      	mov	r6, r2
 8002efa:	4698      	mov	r8, r3
 8002efc:	688a      	ldr	r2, [r1, #8]
 8002efe:	690b      	ldr	r3, [r1, #16]
 8002f00:	4607      	mov	r7, r0
 8002f02:	4293      	cmp	r3, r2
 8002f04:	bfb8      	it	lt
 8002f06:	4613      	movlt	r3, r2
 8002f08:	6033      	str	r3, [r6, #0]
 8002f0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f0e:	460c      	mov	r4, r1
 8002f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f14:	b10a      	cbz	r2, 8002f1a <_printf_common+0x26>
 8002f16:	3301      	adds	r3, #1
 8002f18:	6033      	str	r3, [r6, #0]
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	0699      	lsls	r1, r3, #26
 8002f1e:	bf42      	ittt	mi
 8002f20:	6833      	ldrmi	r3, [r6, #0]
 8002f22:	3302      	addmi	r3, #2
 8002f24:	6033      	strmi	r3, [r6, #0]
 8002f26:	6825      	ldr	r5, [r4, #0]
 8002f28:	f015 0506 	ands.w	r5, r5, #6
 8002f2c:	d106      	bne.n	8002f3c <_printf_common+0x48>
 8002f2e:	f104 0a19 	add.w	sl, r4, #25
 8002f32:	68e3      	ldr	r3, [r4, #12]
 8002f34:	6832      	ldr	r2, [r6, #0]
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	42ab      	cmp	r3, r5
 8002f3a:	dc2b      	bgt.n	8002f94 <_printf_common+0xa0>
 8002f3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f40:	6822      	ldr	r2, [r4, #0]
 8002f42:	3b00      	subs	r3, #0
 8002f44:	bf18      	it	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	0692      	lsls	r2, r2, #26
 8002f4a:	d430      	bmi.n	8002fae <_printf_common+0xba>
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	4638      	mov	r0, r7
 8002f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f54:	47c8      	blx	r9
 8002f56:	3001      	adds	r0, #1
 8002f58:	d023      	beq.n	8002fa2 <_printf_common+0xae>
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	6922      	ldr	r2, [r4, #16]
 8002f5e:	f003 0306 	and.w	r3, r3, #6
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	bf14      	ite	ne
 8002f66:	2500      	movne	r5, #0
 8002f68:	6833      	ldreq	r3, [r6, #0]
 8002f6a:	f04f 0600 	mov.w	r6, #0
 8002f6e:	bf08      	it	eq
 8002f70:	68e5      	ldreq	r5, [r4, #12]
 8002f72:	f104 041a 	add.w	r4, r4, #26
 8002f76:	bf08      	it	eq
 8002f78:	1aed      	subeq	r5, r5, r3
 8002f7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f7e:	bf08      	it	eq
 8002f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bfc4      	itt	gt
 8002f88:	1a9b      	subgt	r3, r3, r2
 8002f8a:	18ed      	addgt	r5, r5, r3
 8002f8c:	42b5      	cmp	r5, r6
 8002f8e:	d11a      	bne.n	8002fc6 <_printf_common+0xd2>
 8002f90:	2000      	movs	r0, #0
 8002f92:	e008      	b.n	8002fa6 <_printf_common+0xb2>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4652      	mov	r2, sl
 8002f98:	4641      	mov	r1, r8
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	47c8      	blx	r9
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d103      	bne.n	8002faa <_printf_common+0xb6>
 8002fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002faa:	3501      	adds	r5, #1
 8002fac:	e7c1      	b.n	8002f32 <_printf_common+0x3e>
 8002fae:	2030      	movs	r0, #48	@ 0x30
 8002fb0:	18e1      	adds	r1, r4, r3
 8002fb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fbc:	4422      	add	r2, r4
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fc4:	e7c2      	b.n	8002f4c <_printf_common+0x58>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	4622      	mov	r2, r4
 8002fca:	4641      	mov	r1, r8
 8002fcc:	4638      	mov	r0, r7
 8002fce:	47c8      	blx	r9
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	d0e6      	beq.n	8002fa2 <_printf_common+0xae>
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7d9      	b.n	8002f8c <_printf_common+0x98>

08002fd8 <_printf_i>:
 8002fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fdc:	7e0f      	ldrb	r7, [r1, #24]
 8002fde:	4691      	mov	r9, r2
 8002fe0:	2f78      	cmp	r7, #120	@ 0x78
 8002fe2:	4680      	mov	r8, r0
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	469a      	mov	sl, r3
 8002fe8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fee:	d807      	bhi.n	8003000 <_printf_i+0x28>
 8002ff0:	2f62      	cmp	r7, #98	@ 0x62
 8002ff2:	d80a      	bhi.n	800300a <_printf_i+0x32>
 8002ff4:	2f00      	cmp	r7, #0
 8002ff6:	f000 80d1 	beq.w	800319c <_printf_i+0x1c4>
 8002ffa:	2f58      	cmp	r7, #88	@ 0x58
 8002ffc:	f000 80b8 	beq.w	8003170 <_printf_i+0x198>
 8003000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003008:	e03a      	b.n	8003080 <_printf_i+0xa8>
 800300a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800300e:	2b15      	cmp	r3, #21
 8003010:	d8f6      	bhi.n	8003000 <_printf_i+0x28>
 8003012:	a101      	add	r1, pc, #4	@ (adr r1, 8003018 <_printf_i+0x40>)
 8003014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003018:	08003071 	.word	0x08003071
 800301c:	08003085 	.word	0x08003085
 8003020:	08003001 	.word	0x08003001
 8003024:	08003001 	.word	0x08003001
 8003028:	08003001 	.word	0x08003001
 800302c:	08003001 	.word	0x08003001
 8003030:	08003085 	.word	0x08003085
 8003034:	08003001 	.word	0x08003001
 8003038:	08003001 	.word	0x08003001
 800303c:	08003001 	.word	0x08003001
 8003040:	08003001 	.word	0x08003001
 8003044:	08003183 	.word	0x08003183
 8003048:	080030af 	.word	0x080030af
 800304c:	0800313d 	.word	0x0800313d
 8003050:	08003001 	.word	0x08003001
 8003054:	08003001 	.word	0x08003001
 8003058:	080031a5 	.word	0x080031a5
 800305c:	08003001 	.word	0x08003001
 8003060:	080030af 	.word	0x080030af
 8003064:	08003001 	.word	0x08003001
 8003068:	08003001 	.word	0x08003001
 800306c:	08003145 	.word	0x08003145
 8003070:	6833      	ldr	r3, [r6, #0]
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6032      	str	r2, [r6, #0]
 8003078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800307c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003080:	2301      	movs	r3, #1
 8003082:	e09c      	b.n	80031be <_printf_i+0x1e6>
 8003084:	6833      	ldr	r3, [r6, #0]
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	1d19      	adds	r1, r3, #4
 800308a:	6031      	str	r1, [r6, #0]
 800308c:	0606      	lsls	r6, r0, #24
 800308e:	d501      	bpl.n	8003094 <_printf_i+0xbc>
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	e003      	b.n	800309c <_printf_i+0xc4>
 8003094:	0645      	lsls	r5, r0, #25
 8003096:	d5fb      	bpl.n	8003090 <_printf_i+0xb8>
 8003098:	f9b3 5000 	ldrsh.w	r5, [r3]
 800309c:	2d00      	cmp	r5, #0
 800309e:	da03      	bge.n	80030a8 <_printf_i+0xd0>
 80030a0:	232d      	movs	r3, #45	@ 0x2d
 80030a2:	426d      	negs	r5, r5
 80030a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030a8:	230a      	movs	r3, #10
 80030aa:	4858      	ldr	r0, [pc, #352]	@ (800320c <_printf_i+0x234>)
 80030ac:	e011      	b.n	80030d2 <_printf_i+0xfa>
 80030ae:	6821      	ldr	r1, [r4, #0]
 80030b0:	6833      	ldr	r3, [r6, #0]
 80030b2:	0608      	lsls	r0, r1, #24
 80030b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80030b8:	d402      	bmi.n	80030c0 <_printf_i+0xe8>
 80030ba:	0649      	lsls	r1, r1, #25
 80030bc:	bf48      	it	mi
 80030be:	b2ad      	uxthmi	r5, r5
 80030c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80030c2:	6033      	str	r3, [r6, #0]
 80030c4:	bf14      	ite	ne
 80030c6:	230a      	movne	r3, #10
 80030c8:	2308      	moveq	r3, #8
 80030ca:	4850      	ldr	r0, [pc, #320]	@ (800320c <_printf_i+0x234>)
 80030cc:	2100      	movs	r1, #0
 80030ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030d2:	6866      	ldr	r6, [r4, #4]
 80030d4:	2e00      	cmp	r6, #0
 80030d6:	60a6      	str	r6, [r4, #8]
 80030d8:	db05      	blt.n	80030e6 <_printf_i+0x10e>
 80030da:	6821      	ldr	r1, [r4, #0]
 80030dc:	432e      	orrs	r6, r5
 80030de:	f021 0104 	bic.w	r1, r1, #4
 80030e2:	6021      	str	r1, [r4, #0]
 80030e4:	d04b      	beq.n	800317e <_printf_i+0x1a6>
 80030e6:	4616      	mov	r6, r2
 80030e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80030ec:	fb03 5711 	mls	r7, r3, r1, r5
 80030f0:	5dc7      	ldrb	r7, [r0, r7]
 80030f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030f6:	462f      	mov	r7, r5
 80030f8:	42bb      	cmp	r3, r7
 80030fa:	460d      	mov	r5, r1
 80030fc:	d9f4      	bls.n	80030e8 <_printf_i+0x110>
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d10b      	bne.n	800311a <_printf_i+0x142>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07df      	lsls	r7, r3, #31
 8003106:	d508      	bpl.n	800311a <_printf_i+0x142>
 8003108:	6923      	ldr	r3, [r4, #16]
 800310a:	6861      	ldr	r1, [r4, #4]
 800310c:	4299      	cmp	r1, r3
 800310e:	bfde      	ittt	le
 8003110:	2330      	movle	r3, #48	@ 0x30
 8003112:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003116:	f106 36ff 	addle.w	r6, r6, #4294967295
 800311a:	1b92      	subs	r2, r2, r6
 800311c:	6122      	str	r2, [r4, #16]
 800311e:	464b      	mov	r3, r9
 8003120:	4621      	mov	r1, r4
 8003122:	4640      	mov	r0, r8
 8003124:	f8cd a000 	str.w	sl, [sp]
 8003128:	aa03      	add	r2, sp, #12
 800312a:	f7ff fee3 	bl	8002ef4 <_printf_common>
 800312e:	3001      	adds	r0, #1
 8003130:	d14a      	bne.n	80031c8 <_printf_i+0x1f0>
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	b004      	add	sp, #16
 8003138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	f043 0320 	orr.w	r3, r3, #32
 8003142:	6023      	str	r3, [r4, #0]
 8003144:	2778      	movs	r7, #120	@ 0x78
 8003146:	4832      	ldr	r0, [pc, #200]	@ (8003210 <_printf_i+0x238>)
 8003148:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	6831      	ldr	r1, [r6, #0]
 8003150:	061f      	lsls	r7, r3, #24
 8003152:	f851 5b04 	ldr.w	r5, [r1], #4
 8003156:	d402      	bmi.n	800315e <_printf_i+0x186>
 8003158:	065f      	lsls	r7, r3, #25
 800315a:	bf48      	it	mi
 800315c:	b2ad      	uxthmi	r5, r5
 800315e:	6031      	str	r1, [r6, #0]
 8003160:	07d9      	lsls	r1, r3, #31
 8003162:	bf44      	itt	mi
 8003164:	f043 0320 	orrmi.w	r3, r3, #32
 8003168:	6023      	strmi	r3, [r4, #0]
 800316a:	b11d      	cbz	r5, 8003174 <_printf_i+0x19c>
 800316c:	2310      	movs	r3, #16
 800316e:	e7ad      	b.n	80030cc <_printf_i+0xf4>
 8003170:	4826      	ldr	r0, [pc, #152]	@ (800320c <_printf_i+0x234>)
 8003172:	e7e9      	b.n	8003148 <_printf_i+0x170>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	f023 0320 	bic.w	r3, r3, #32
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	e7f6      	b.n	800316c <_printf_i+0x194>
 800317e:	4616      	mov	r6, r2
 8003180:	e7bd      	b.n	80030fe <_printf_i+0x126>
 8003182:	6833      	ldr	r3, [r6, #0]
 8003184:	6825      	ldr	r5, [r4, #0]
 8003186:	1d18      	adds	r0, r3, #4
 8003188:	6961      	ldr	r1, [r4, #20]
 800318a:	6030      	str	r0, [r6, #0]
 800318c:	062e      	lsls	r6, r5, #24
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	d501      	bpl.n	8003196 <_printf_i+0x1be>
 8003192:	6019      	str	r1, [r3, #0]
 8003194:	e002      	b.n	800319c <_printf_i+0x1c4>
 8003196:	0668      	lsls	r0, r5, #25
 8003198:	d5fb      	bpl.n	8003192 <_printf_i+0x1ba>
 800319a:	8019      	strh	r1, [r3, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	4616      	mov	r6, r2
 80031a0:	6123      	str	r3, [r4, #16]
 80031a2:	e7bc      	b.n	800311e <_printf_i+0x146>
 80031a4:	6833      	ldr	r3, [r6, #0]
 80031a6:	2100      	movs	r1, #0
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	6032      	str	r2, [r6, #0]
 80031ac:	681e      	ldr	r6, [r3, #0]
 80031ae:	6862      	ldr	r2, [r4, #4]
 80031b0:	4630      	mov	r0, r6
 80031b2:	f000 f96b 	bl	800348c <memchr>
 80031b6:	b108      	cbz	r0, 80031bc <_printf_i+0x1e4>
 80031b8:	1b80      	subs	r0, r0, r6
 80031ba:	6060      	str	r0, [r4, #4]
 80031bc:	6863      	ldr	r3, [r4, #4]
 80031be:	6123      	str	r3, [r4, #16]
 80031c0:	2300      	movs	r3, #0
 80031c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031c6:	e7aa      	b.n	800311e <_printf_i+0x146>
 80031c8:	4632      	mov	r2, r6
 80031ca:	4649      	mov	r1, r9
 80031cc:	4640      	mov	r0, r8
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	47d0      	blx	sl
 80031d2:	3001      	adds	r0, #1
 80031d4:	d0ad      	beq.n	8003132 <_printf_i+0x15a>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	079b      	lsls	r3, r3, #30
 80031da:	d413      	bmi.n	8003204 <_printf_i+0x22c>
 80031dc:	68e0      	ldr	r0, [r4, #12]
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	4298      	cmp	r0, r3
 80031e2:	bfb8      	it	lt
 80031e4:	4618      	movlt	r0, r3
 80031e6:	e7a6      	b.n	8003136 <_printf_i+0x15e>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4632      	mov	r2, r6
 80031ec:	4649      	mov	r1, r9
 80031ee:	4640      	mov	r0, r8
 80031f0:	47d0      	blx	sl
 80031f2:	3001      	adds	r0, #1
 80031f4:	d09d      	beq.n	8003132 <_printf_i+0x15a>
 80031f6:	3501      	adds	r5, #1
 80031f8:	68e3      	ldr	r3, [r4, #12]
 80031fa:	9903      	ldr	r1, [sp, #12]
 80031fc:	1a5b      	subs	r3, r3, r1
 80031fe:	42ab      	cmp	r3, r5
 8003200:	dcf2      	bgt.n	80031e8 <_printf_i+0x210>
 8003202:	e7eb      	b.n	80031dc <_printf_i+0x204>
 8003204:	2500      	movs	r5, #0
 8003206:	f104 0619 	add.w	r6, r4, #25
 800320a:	e7f5      	b.n	80031f8 <_printf_i+0x220>
 800320c:	0800356b 	.word	0x0800356b
 8003210:	0800357c 	.word	0x0800357c

08003214 <__sflush_r>:
 8003214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	0716      	lsls	r6, r2, #28
 800321c:	4605      	mov	r5, r0
 800321e:	460c      	mov	r4, r1
 8003220:	d454      	bmi.n	80032cc <__sflush_r+0xb8>
 8003222:	684b      	ldr	r3, [r1, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	dc02      	bgt.n	800322e <__sflush_r+0x1a>
 8003228:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	dd48      	ble.n	80032c0 <__sflush_r+0xac>
 800322e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003230:	2e00      	cmp	r6, #0
 8003232:	d045      	beq.n	80032c0 <__sflush_r+0xac>
 8003234:	2300      	movs	r3, #0
 8003236:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800323a:	682f      	ldr	r7, [r5, #0]
 800323c:	6a21      	ldr	r1, [r4, #32]
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	d030      	beq.n	80032a4 <__sflush_r+0x90>
 8003242:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	0759      	lsls	r1, r3, #29
 8003248:	d505      	bpl.n	8003256 <__sflush_r+0x42>
 800324a:	6863      	ldr	r3, [r4, #4]
 800324c:	1ad2      	subs	r2, r2, r3
 800324e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003250:	b10b      	cbz	r3, 8003256 <__sflush_r+0x42>
 8003252:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	2300      	movs	r3, #0
 8003258:	4628      	mov	r0, r5
 800325a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800325c:	6a21      	ldr	r1, [r4, #32]
 800325e:	47b0      	blx	r6
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	d106      	bne.n	8003274 <__sflush_r+0x60>
 8003266:	6829      	ldr	r1, [r5, #0]
 8003268:	291d      	cmp	r1, #29
 800326a:	d82b      	bhi.n	80032c4 <__sflush_r+0xb0>
 800326c:	4a28      	ldr	r2, [pc, #160]	@ (8003310 <__sflush_r+0xfc>)
 800326e:	40ca      	lsrs	r2, r1
 8003270:	07d6      	lsls	r6, r2, #31
 8003272:	d527      	bpl.n	80032c4 <__sflush_r+0xb0>
 8003274:	2200      	movs	r2, #0
 8003276:	6062      	str	r2, [r4, #4]
 8003278:	6922      	ldr	r2, [r4, #16]
 800327a:	04d9      	lsls	r1, r3, #19
 800327c:	6022      	str	r2, [r4, #0]
 800327e:	d504      	bpl.n	800328a <__sflush_r+0x76>
 8003280:	1c42      	adds	r2, r0, #1
 8003282:	d101      	bne.n	8003288 <__sflush_r+0x74>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	b903      	cbnz	r3, 800328a <__sflush_r+0x76>
 8003288:	6560      	str	r0, [r4, #84]	@ 0x54
 800328a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800328c:	602f      	str	r7, [r5, #0]
 800328e:	b1b9      	cbz	r1, 80032c0 <__sflush_r+0xac>
 8003290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003294:	4299      	cmp	r1, r3
 8003296:	d002      	beq.n	800329e <__sflush_r+0x8a>
 8003298:	4628      	mov	r0, r5
 800329a:	f7ff fbf5 	bl	8002a88 <_free_r>
 800329e:	2300      	movs	r3, #0
 80032a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80032a2:	e00d      	b.n	80032c0 <__sflush_r+0xac>
 80032a4:	2301      	movs	r3, #1
 80032a6:	4628      	mov	r0, r5
 80032a8:	47b0      	blx	r6
 80032aa:	4602      	mov	r2, r0
 80032ac:	1c50      	adds	r0, r2, #1
 80032ae:	d1c9      	bne.n	8003244 <__sflush_r+0x30>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0c6      	beq.n	8003244 <__sflush_r+0x30>
 80032b6:	2b1d      	cmp	r3, #29
 80032b8:	d001      	beq.n	80032be <__sflush_r+0xaa>
 80032ba:	2b16      	cmp	r3, #22
 80032bc:	d11d      	bne.n	80032fa <__sflush_r+0xe6>
 80032be:	602f      	str	r7, [r5, #0]
 80032c0:	2000      	movs	r0, #0
 80032c2:	e021      	b.n	8003308 <__sflush_r+0xf4>
 80032c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c8:	b21b      	sxth	r3, r3
 80032ca:	e01a      	b.n	8003302 <__sflush_r+0xee>
 80032cc:	690f      	ldr	r7, [r1, #16]
 80032ce:	2f00      	cmp	r7, #0
 80032d0:	d0f6      	beq.n	80032c0 <__sflush_r+0xac>
 80032d2:	0793      	lsls	r3, r2, #30
 80032d4:	bf18      	it	ne
 80032d6:	2300      	movne	r3, #0
 80032d8:	680e      	ldr	r6, [r1, #0]
 80032da:	bf08      	it	eq
 80032dc:	694b      	ldreq	r3, [r1, #20]
 80032de:	1bf6      	subs	r6, r6, r7
 80032e0:	600f      	str	r7, [r1, #0]
 80032e2:	608b      	str	r3, [r1, #8]
 80032e4:	2e00      	cmp	r6, #0
 80032e6:	ddeb      	ble.n	80032c0 <__sflush_r+0xac>
 80032e8:	4633      	mov	r3, r6
 80032ea:	463a      	mov	r2, r7
 80032ec:	4628      	mov	r0, r5
 80032ee:	6a21      	ldr	r1, [r4, #32]
 80032f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80032f4:	47e0      	blx	ip
 80032f6:	2800      	cmp	r0, #0
 80032f8:	dc07      	bgt.n	800330a <__sflush_r+0xf6>
 80032fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003302:	f04f 30ff 	mov.w	r0, #4294967295
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330a:	4407      	add	r7, r0
 800330c:	1a36      	subs	r6, r6, r0
 800330e:	e7e9      	b.n	80032e4 <__sflush_r+0xd0>
 8003310:	20400001 	.word	0x20400001

08003314 <_fflush_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	690b      	ldr	r3, [r1, #16]
 8003318:	4605      	mov	r5, r0
 800331a:	460c      	mov	r4, r1
 800331c:	b913      	cbnz	r3, 8003324 <_fflush_r+0x10>
 800331e:	2500      	movs	r5, #0
 8003320:	4628      	mov	r0, r5
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	b118      	cbz	r0, 800332e <_fflush_r+0x1a>
 8003326:	6a03      	ldr	r3, [r0, #32]
 8003328:	b90b      	cbnz	r3, 800332e <_fflush_r+0x1a>
 800332a:	f7ff f9b3 	bl	8002694 <__sinit>
 800332e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f3      	beq.n	800331e <_fflush_r+0xa>
 8003336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003338:	07d0      	lsls	r0, r2, #31
 800333a:	d404      	bmi.n	8003346 <_fflush_r+0x32>
 800333c:	0599      	lsls	r1, r3, #22
 800333e:	d402      	bmi.n	8003346 <_fflush_r+0x32>
 8003340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003342:	f7ff fb9e 	bl	8002a82 <__retarget_lock_acquire_recursive>
 8003346:	4628      	mov	r0, r5
 8003348:	4621      	mov	r1, r4
 800334a:	f7ff ff63 	bl	8003214 <__sflush_r>
 800334e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003350:	4605      	mov	r5, r0
 8003352:	07da      	lsls	r2, r3, #31
 8003354:	d4e4      	bmi.n	8003320 <_fflush_r+0xc>
 8003356:	89a3      	ldrh	r3, [r4, #12]
 8003358:	059b      	lsls	r3, r3, #22
 800335a:	d4e1      	bmi.n	8003320 <_fflush_r+0xc>
 800335c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335e:	f7ff fb91 	bl	8002a84 <__retarget_lock_release_recursive>
 8003362:	e7dd      	b.n	8003320 <_fflush_r+0xc>

08003364 <__swhatbuf_r>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	460c      	mov	r4, r1
 8003368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336c:	4615      	mov	r5, r2
 800336e:	2900      	cmp	r1, #0
 8003370:	461e      	mov	r6, r3
 8003372:	b096      	sub	sp, #88	@ 0x58
 8003374:	da0c      	bge.n	8003390 <__swhatbuf_r+0x2c>
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	2100      	movs	r1, #0
 800337a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800337e:	bf14      	ite	ne
 8003380:	2340      	movne	r3, #64	@ 0x40
 8003382:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003386:	2000      	movs	r0, #0
 8003388:	6031      	str	r1, [r6, #0]
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	b016      	add	sp, #88	@ 0x58
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	466a      	mov	r2, sp
 8003392:	f000 f849 	bl	8003428 <_fstat_r>
 8003396:	2800      	cmp	r0, #0
 8003398:	dbed      	blt.n	8003376 <__swhatbuf_r+0x12>
 800339a:	9901      	ldr	r1, [sp, #4]
 800339c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033a4:	4259      	negs	r1, r3
 80033a6:	4159      	adcs	r1, r3
 80033a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ac:	e7eb      	b.n	8003386 <__swhatbuf_r+0x22>

080033ae <__smakebuf_r>:
 80033ae:	898b      	ldrh	r3, [r1, #12]
 80033b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b2:	079d      	lsls	r5, r3, #30
 80033b4:	4606      	mov	r6, r0
 80033b6:	460c      	mov	r4, r1
 80033b8:	d507      	bpl.n	80033ca <__smakebuf_r+0x1c>
 80033ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	6123      	str	r3, [r4, #16]
 80033c2:	2301      	movs	r3, #1
 80033c4:	6163      	str	r3, [r4, #20]
 80033c6:	b003      	add	sp, #12
 80033c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ca:	466a      	mov	r2, sp
 80033cc:	ab01      	add	r3, sp, #4
 80033ce:	f7ff ffc9 	bl	8003364 <__swhatbuf_r>
 80033d2:	9f00      	ldr	r7, [sp, #0]
 80033d4:	4605      	mov	r5, r0
 80033d6:	4639      	mov	r1, r7
 80033d8:	4630      	mov	r0, r6
 80033da:	f7ff fbbf 	bl	8002b5c <_malloc_r>
 80033de:	b948      	cbnz	r0, 80033f4 <__smakebuf_r+0x46>
 80033e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033e4:	059a      	lsls	r2, r3, #22
 80033e6:	d4ee      	bmi.n	80033c6 <__smakebuf_r+0x18>
 80033e8:	f023 0303 	bic.w	r3, r3, #3
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	81a3      	strh	r3, [r4, #12]
 80033f2:	e7e2      	b.n	80033ba <__smakebuf_r+0xc>
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033fe:	81a3      	strh	r3, [r4, #12]
 8003400:	9b01      	ldr	r3, [sp, #4]
 8003402:	6020      	str	r0, [r4, #0]
 8003404:	b15b      	cbz	r3, 800341e <__smakebuf_r+0x70>
 8003406:	4630      	mov	r0, r6
 8003408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800340c:	f000 f81e 	bl	800344c <_isatty_r>
 8003410:	b128      	cbz	r0, 800341e <__smakebuf_r+0x70>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f023 0303 	bic.w	r3, r3, #3
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	81a3      	strh	r3, [r4, #12]
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	431d      	orrs	r5, r3
 8003422:	81a5      	strh	r5, [r4, #12]
 8003424:	e7cf      	b.n	80033c6 <__smakebuf_r+0x18>
	...

08003428 <_fstat_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	2300      	movs	r3, #0
 800342c:	4d06      	ldr	r5, [pc, #24]	@ (8003448 <_fstat_r+0x20>)
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	602b      	str	r3, [r5, #0]
 8003436:	f7fd fbb7 	bl	8000ba8 <_fstat>
 800343a:	1c43      	adds	r3, r0, #1
 800343c:	d102      	bne.n	8003444 <_fstat_r+0x1c>
 800343e:	682b      	ldr	r3, [r5, #0]
 8003440:	b103      	cbz	r3, 8003444 <_fstat_r+0x1c>
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	bd38      	pop	{r3, r4, r5, pc}
 8003446:	bf00      	nop
 8003448:	200002b0 	.word	0x200002b0

0800344c <_isatty_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	2300      	movs	r3, #0
 8003450:	4d05      	ldr	r5, [pc, #20]	@ (8003468 <_isatty_r+0x1c>)
 8003452:	4604      	mov	r4, r0
 8003454:	4608      	mov	r0, r1
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	f7fd fbb5 	bl	8000bc6 <_isatty>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d102      	bne.n	8003466 <_isatty_r+0x1a>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b103      	cbz	r3, 8003466 <_isatty_r+0x1a>
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	200002b0 	.word	0x200002b0

0800346c <_sbrk_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	2300      	movs	r3, #0
 8003470:	4d05      	ldr	r5, [pc, #20]	@ (8003488 <_sbrk_r+0x1c>)
 8003472:	4604      	mov	r4, r0
 8003474:	4608      	mov	r0, r1
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	f7fd fbbc 	bl	8000bf4 <_sbrk>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d102      	bne.n	8003486 <_sbrk_r+0x1a>
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	b103      	cbz	r3, 8003486 <_sbrk_r+0x1a>
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	200002b0 	.word	0x200002b0

0800348c <memchr>:
 800348c:	4603      	mov	r3, r0
 800348e:	b510      	push	{r4, lr}
 8003490:	b2c9      	uxtb	r1, r1
 8003492:	4402      	add	r2, r0
 8003494:	4293      	cmp	r3, r2
 8003496:	4618      	mov	r0, r3
 8003498:	d101      	bne.n	800349e <memchr+0x12>
 800349a:	2000      	movs	r0, #0
 800349c:	e003      	b.n	80034a6 <memchr+0x1a>
 800349e:	7804      	ldrb	r4, [r0, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	428c      	cmp	r4, r1
 80034a4:	d1f6      	bne.n	8003494 <memchr+0x8>
 80034a6:	bd10      	pop	{r4, pc}

080034a8 <_init>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr

080034b4 <_fini>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr
