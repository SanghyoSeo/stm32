
ServoMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003960  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003a6c  08003a6c  00004a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bec  08003bec  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003bec  08003bec  0000506c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003bec  08003bec  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00004bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003bf4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000006c  08003c60  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003c60  00005270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5f6  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad0  00000000  00000000  0001068b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00012160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000985  00000000  00000000  00012d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018594  00000000  00000000  00013715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfc3  00000000  00000000  0002bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c139  00000000  00000000  00038c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000c4de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c88a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a54 	.word	0x08003a54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003a54 	.word	0x08003a54

0800014c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 fa75 	bl	8002652 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 fa6e 	bl	8002652 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08003a6c 	.word	0x08003a6c
 8000184:	200000d0 	.word	0x200000d0

08000188 <pwm_to_angle>:
/**
 * @brief  PWM 값을 각도로 변환하는 함수
 * @param  pwm_value: PWM 듀티 사이클 값 (25~125)
 * @retval 각도 값 (0~1800, 실제 각도 x 10)
 */
uint16_t pwm_to_angle(uint8_t pwm_value) {
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
	// PWM 25~125 범위를 0~180도로 변환
	// 소수점 계산을 위해 10배로 확대 (0~1800)
	// 공식: angle = (pwm_value - 25) * 1800 / (125 - 25)
	return ((uint16_t) (pwm_value - MIN) * 1800) / (MAX - MIN);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	b29b      	uxth	r3, r3
 8000196:	461a      	mov	r2, r3
 8000198:	00d2      	lsls	r2, r2, #3
 800019a:	4413      	add	r3, r2
 800019c:	005b      	lsls	r3, r3, #1
 800019e:	b29b      	uxth	r3, r3
 80001a0:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 80001a4:	b29b      	uxth	r3, r3
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <display_servo_status>:
 * @brief  서보모터 상태를 화면에 출력하는 함수
 * @param  pan: Pan 서보 PWM 값
 * @param  tilt: Tilt 서보 PWM 값
 * @retval None
 */
void display_servo_status(uint8_t pan, uint8_t tilt) {
 80001b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001b2:	b089      	sub	sp, #36	@ 0x24
 80001b4:	af04      	add	r7, sp, #16
 80001b6:	4603      	mov	r3, r0
 80001b8:	460a      	mov	r2, r1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	4613      	mov	r3, r2
 80001be:	71bb      	strb	r3, [r7, #6]
	uint16_t pan_angle = pwm_to_angle(pan);
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffe0 	bl	8000188 <pwm_to_angle>
 80001c8:	4603      	mov	r3, r0
 80001ca:	81fb      	strh	r3, [r7, #14]
	uint16_t tilt_angle = pwm_to_angle(tilt);
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	4618      	mov	r0, r3
 80001d0:	f7ff ffda 	bl	8000188 <pwm_to_angle>
 80001d4:	4603      	mov	r3, r0
 80001d6:	81bb      	strh	r3, [r7, #12]

	printf("Pan: %3d (%3d.%d°) | Tilt: %3d (%3d.%d°)\r\n", pan, pan_angle / 10,
 80001d8:	79fc      	ldrb	r4, [r7, #7]
 80001da:	89fb      	ldrh	r3, [r7, #14]
 80001dc:	4a18      	ldr	r2, [pc, #96]	@ (8000240 <display_servo_status+0x90>)
 80001de:	fba2 2303 	umull	r2, r3, r2, r3
 80001e2:	08db      	lsrs	r3, r3, #3
 80001e4:	b29b      	uxth	r3, r3
 80001e6:	461e      	mov	r6, r3
 80001e8:	89fa      	ldrh	r2, [r7, #14]
 80001ea:	4b15      	ldr	r3, [pc, #84]	@ (8000240 <display_servo_status+0x90>)
 80001ec:	fba3 1302 	umull	r1, r3, r3, r2
 80001f0:	08d9      	lsrs	r1, r3, #3
 80001f2:	460b      	mov	r3, r1
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	440b      	add	r3, r1
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	1ad3      	subs	r3, r2, r3
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	469c      	mov	ip, r3
 8000200:	79b8      	ldrb	r0, [r7, #6]
 8000202:	89bb      	ldrh	r3, [r7, #12]
 8000204:	4a0e      	ldr	r2, [pc, #56]	@ (8000240 <display_servo_status+0x90>)
 8000206:	fba2 2303 	umull	r2, r3, r2, r3
 800020a:	08db      	lsrs	r3, r3, #3
 800020c:	b29b      	uxth	r3, r3
 800020e:	461d      	mov	r5, r3
 8000210:	89ba      	ldrh	r2, [r7, #12]
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <display_servo_status+0x90>)
 8000214:	fba3 1302 	umull	r1, r3, r3, r2
 8000218:	08d9      	lsrs	r1, r3, #3
 800021a:	460b      	mov	r3, r1
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	440b      	add	r3, r1
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	1ad3      	subs	r3, r2, r3
 8000224:	b29b      	uxth	r3, r3
 8000226:	9302      	str	r3, [sp, #8]
 8000228:	9501      	str	r5, [sp, #4]
 800022a:	9000      	str	r0, [sp, #0]
 800022c:	4663      	mov	r3, ip
 800022e:	4632      	mov	r2, r6
 8000230:	4621      	mov	r1, r4
 8000232:	4804      	ldr	r0, [pc, #16]	@ (8000244 <display_servo_status+0x94>)
 8000234:	f002 fd3a 	bl	8002cac <iprintf>
			pan_angle % 10, tilt, tilt_angle / 10, tilt_angle % 10);
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000240:	cccccccd 	.word	0xcccccccd
 8000244:	08003a70 	.word	0x08003a70

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fc1c 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f8d6 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f9e2 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000258:	f000 f9b6 	bl	80005c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800025c:	f000 f912 	bl	8000484 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	// PWM 시작
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000260:	2100      	movs	r1, #0
 8000262:	4858      	ldr	r0, [pc, #352]	@ (80003c4 <main+0x17c>)
 8000264:	f001 fc1a 	bl	8001a9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000268:	2100      	movs	r1, #0
 800026a:	4856      	ldr	r0, [pc, #344]	@ (80003c4 <main+0x17c>)
 800026c:	f001 fc16 	bl	8001a9c <HAL_TIM_PWM_Start>

	// 초기 위치 설정
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_pan);
 8000270:	4b55      	ldr	r3, [pc, #340]	@ (80003c8 <main+0x180>)
 8000272:	781a      	ldrb	r2, [r3, #0]
 8000274:	4b53      	ldr	r3, [pc, #332]	@ (80003c4 <main+0x17c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_tilt);
 800027a:	4b54      	ldr	r3, [pc, #336]	@ (80003cc <main+0x184>)
 800027c:	781a      	ldrb	r2, [r3, #0]
 800027e:	4b51      	ldr	r3, [pc, #324]	@ (80003c4 <main+0x17c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	635a      	str	r2, [r3, #52]	@ 0x34

	printf("\r\n=== SG90 Servo Control System ===\r\n");
 8000284:	4852      	ldr	r0, [pc, #328]	@ (80003d0 <main+0x188>)
 8000286:	f002 fd79 	bl	8002d7c <puts>
	printf("Commands: w(up), s(down), a(left), d(right), i(center)\r\n");
 800028a:	4852      	ldr	r0, [pc, #328]	@ (80003d4 <main+0x18c>)
 800028c:	f002 fd76 	bl	8002d7c <puts>
	printf("Initial Position:\r\n");
 8000290:	4851      	ldr	r0, [pc, #324]	@ (80003d8 <main+0x190>)
 8000292:	f002 fd73 	bl	8002d7c <puts>
	display_servo_status(pos_pan, pos_tilt);
 8000296:	4b4c      	ldr	r3, [pc, #304]	@ (80003c8 <main+0x180>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	4a4c      	ldr	r2, [pc, #304]	@ (80003cc <main+0x184>)
 800029c:	7812      	ldrb	r2, [r2, #0]
 800029e:	4611      	mov	r1, r2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff85 	bl	80001b0 <display_servo_status>
	printf("Ready!\r\n\r\n");
 80002a6:	484d      	ldr	r0, [pc, #308]	@ (80003dc <main+0x194>)
 80002a8:	f002 fd68 	bl	8002d7c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (HAL_UART_Receive(&huart2, &ch, sizeof(ch), 10) == HAL_OK) {
 80002ac:	230a      	movs	r3, #10
 80002ae:	2201      	movs	r2, #1
 80002b0:	494b      	ldr	r1, [pc, #300]	@ (80003e0 <main+0x198>)
 80002b2:	484c      	ldr	r0, [pc, #304]	@ (80003e4 <main+0x19c>)
 80002b4:	f002 fa58 	bl	8002768 <HAL_UART_Receive>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1f6      	bne.n	80002ac <main+0x64>
			// 명령 처리
			if (ch == 's')  // Down
 80002be:	4b48      	ldr	r3, [pc, #288]	@ (80003e0 <main+0x198>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b73      	cmp	r3, #115	@ 0x73
 80002c4:	d111      	bne.n	80002ea <main+0xa2>
					{
				printf("Command: Down\r\n");
 80002c6:	4848      	ldr	r0, [pc, #288]	@ (80003e8 <main+0x1a0>)
 80002c8:	f002 fd58 	bl	8002d7c <puts>
				if (pos_tilt + STEP <= MAX)
 80002cc:	4b3f      	ldr	r3, [pc, #252]	@ (80003cc <main+0x184>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b78      	cmp	r3, #120	@ 0x78
 80002d2:	d806      	bhi.n	80002e2 <main+0x9a>
					pos_tilt = pos_tilt + STEP;
 80002d4:	4b3d      	ldr	r3, [pc, #244]	@ (80003cc <main+0x184>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	3305      	adds	r3, #5
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b3b      	ldr	r3, [pc, #236]	@ (80003cc <main+0x184>)
 80002de:	701a      	strb	r2, [r3, #0]
 80002e0:	e05a      	b.n	8000398 <main+0x150>
				else
					pos_tilt = MAX;
 80002e2:	4b3a      	ldr	r3, [pc, #232]	@ (80003cc <main+0x184>)
 80002e4:	227d      	movs	r2, #125	@ 0x7d
 80002e6:	701a      	strb	r2, [r3, #0]
 80002e8:	e056      	b.n	8000398 <main+0x150>
			} else if (ch == 'w')  // Up
 80002ea:	4b3d      	ldr	r3, [pc, #244]	@ (80003e0 <main+0x198>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b77      	cmp	r3, #119	@ 0x77
 80002f0:	d111      	bne.n	8000316 <main+0xce>
					{
				printf("Command: Up\r\n");
 80002f2:	483e      	ldr	r0, [pc, #248]	@ (80003ec <main+0x1a4>)
 80002f4:	f002 fd42 	bl	8002d7c <puts>
				if (pos_tilt - STEP >= MIN)
 80002f8:	4b34      	ldr	r3, [pc, #208]	@ (80003cc <main+0x184>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b1d      	cmp	r3, #29
 80002fe:	d906      	bls.n	800030e <main+0xc6>
					pos_tilt = pos_tilt - STEP;
 8000300:	4b32      	ldr	r3, [pc, #200]	@ (80003cc <main+0x184>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	3b05      	subs	r3, #5
 8000306:	b2da      	uxtb	r2, r3
 8000308:	4b30      	ldr	r3, [pc, #192]	@ (80003cc <main+0x184>)
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	e044      	b.n	8000398 <main+0x150>
				else
					pos_tilt = MIN;
 800030e:	4b2f      	ldr	r3, [pc, #188]	@ (80003cc <main+0x184>)
 8000310:	2219      	movs	r2, #25
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	e040      	b.n	8000398 <main+0x150>
			} else if (ch == 'a')  // Left
 8000316:	4b32      	ldr	r3, [pc, #200]	@ (80003e0 <main+0x198>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b61      	cmp	r3, #97	@ 0x61
 800031c:	d111      	bne.n	8000342 <main+0xfa>
					{
				printf("Command: Left\r\n");
 800031e:	4834      	ldr	r0, [pc, #208]	@ (80003f0 <main+0x1a8>)
 8000320:	f002 fd2c 	bl	8002d7c <puts>
				if (pos_pan + STEP <= MAX)
 8000324:	4b28      	ldr	r3, [pc, #160]	@ (80003c8 <main+0x180>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b78      	cmp	r3, #120	@ 0x78
 800032a:	d806      	bhi.n	800033a <main+0xf2>
					pos_pan = pos_pan + STEP;
 800032c:	4b26      	ldr	r3, [pc, #152]	@ (80003c8 <main+0x180>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	3305      	adds	r3, #5
 8000332:	b2da      	uxtb	r2, r3
 8000334:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <main+0x180>)
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	e02e      	b.n	8000398 <main+0x150>
				else
					pos_pan = MAX;
 800033a:	4b23      	ldr	r3, [pc, #140]	@ (80003c8 <main+0x180>)
 800033c:	227d      	movs	r2, #125	@ 0x7d
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	e02a      	b.n	8000398 <main+0x150>
			} else if (ch == 'd')  // Right
 8000342:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <main+0x198>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b64      	cmp	r3, #100	@ 0x64
 8000348:	d111      	bne.n	800036e <main+0x126>
					{
				printf("Command: Right\r\n");
 800034a:	482a      	ldr	r0, [pc, #168]	@ (80003f4 <main+0x1ac>)
 800034c:	f002 fd16 	bl	8002d7c <puts>
				if (pos_pan - STEP >= MIN)
 8000350:	4b1d      	ldr	r3, [pc, #116]	@ (80003c8 <main+0x180>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b1d      	cmp	r3, #29
 8000356:	d906      	bls.n	8000366 <main+0x11e>
					pos_pan = pos_pan - STEP;
 8000358:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <main+0x180>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	3b05      	subs	r3, #5
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b19      	ldr	r3, [pc, #100]	@ (80003c8 <main+0x180>)
 8000362:	701a      	strb	r2, [r3, #0]
 8000364:	e018      	b.n	8000398 <main+0x150>
				else
					pos_pan = MIN;
 8000366:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <main+0x180>)
 8000368:	2219      	movs	r2, #25
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e014      	b.n	8000398 <main+0x150>
			} else if (ch == 'i')  // Center
 800036e:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <main+0x198>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b69      	cmp	r3, #105	@ 0x69
 8000374:	d109      	bne.n	800038a <main+0x142>
					{
				printf("Command: Center\r\n");
 8000376:	4820      	ldr	r0, [pc, #128]	@ (80003f8 <main+0x1b0>)
 8000378:	f002 fd00 	bl	8002d7c <puts>
				pos_pan = CENTER;
 800037c:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <main+0x180>)
 800037e:	224b      	movs	r2, #75	@ 0x4b
 8000380:	701a      	strb	r2, [r3, #0]
				pos_tilt = CENTER;
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <main+0x184>)
 8000384:	224b      	movs	r2, #75	@ 0x4b
 8000386:	701a      	strb	r2, [r3, #0]
 8000388:	e006      	b.n	8000398 <main+0x150>
			} else {
				printf("Invalid command: %c\r\n", ch);
 800038a:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <main+0x198>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	4619      	mov	r1, r3
 8000390:	481a      	ldr	r0, [pc, #104]	@ (80003fc <main+0x1b4>)
 8000392:	f002 fc8b 	bl	8002cac <iprintf>
				continue;  // 잘못된 명령이면 PWM 업데이트 하지 않음
 8000396:	e014      	b.n	80003c2 <main+0x17a>
			}

			// PWM 듀티 사이클 업데이트
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_pan);
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <main+0x180>)
 800039a:	781a      	ldrb	r2, [r3, #0]
 800039c:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <main+0x17c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_tilt);
 80003a2:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <main+0x184>)
 80003a4:	781a      	ldrb	r2, [r3, #0]
 80003a6:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <main+0x17c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	635a      	str	r2, [r3, #52]	@ 0x34

			// 상태 출력 (pwm_to_angle 함수 실제 사용됨)
			display_servo_status(pos_pan, pos_tilt);
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <main+0x180>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4a06      	ldr	r2, [pc, #24]	@ (80003cc <main+0x184>)
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	4611      	mov	r1, r2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff fefa 	bl	80001b0 <display_servo_status>

			HAL_Delay(50); // 서보 응답 시간
 80003bc:	2032      	movs	r0, #50	@ 0x32
 80003be:	f000 fbc5 	bl	8000b4c <HAL_Delay>
		if (HAL_UART_Receive(&huart2, &ch, sizeof(ch), 10) == HAL_OK) {
 80003c2:	e773      	b.n	80002ac <main+0x64>
 80003c4:	20000088 	.word	0x20000088
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000001 	.word	0x20000001
 80003d0:	08003aa0 	.word	0x08003aa0
 80003d4:	08003ac8 	.word	0x08003ac8
 80003d8:	08003b00 	.word	0x08003b00
 80003dc:	08003b14 	.word	0x08003b14
 80003e0:	20000118 	.word	0x20000118
 80003e4:	200000d0 	.word	0x200000d0
 80003e8:	08003b20 	.word	0x08003b20
 80003ec:	08003b30 	.word	0x08003b30
 80003f0:	08003b40 	.word	0x08003b40
 80003f4:	08003b50 	.word	0x08003b50
 80003f8:	08003b60 	.word	0x08003b60
 80003fc:	08003b74 	.word	0x08003b74

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b090      	sub	sp, #64	@ 0x40
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0318 	add.w	r3, r7, #24
 800040a:	2228      	movs	r2, #40	@ 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f002 fd94 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042a:	2310      	movs	r3, #16
 800042c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000432:	2300      	movs	r3, #0
 8000434:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000436:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800043a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fe73 	bl	800112c <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800044c:	f000 f954 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2302      	movs	r3, #2
 8000456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 f8e0 	bl	8001630 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000476:	f000 f93f 	bl	80006f8 <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3740      	adds	r7, #64	@ 0x40
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b096      	sub	sp, #88	@ 0x58
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2220      	movs	r2, #32
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 fd3d 	bl	8002f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c2:	4b3f      	ldr	r3, [pc, #252]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004c4:	4a3f      	ldr	r2, [pc, #252]	@ (80005c4 <MX_TIM1_Init+0x140>)
 80004c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1280-1;
 80004c8:	4b3d      	ldr	r3, [pc, #244]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004ca:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 80004ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b3b      	ldr	r3, [pc, #236]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80004d6:	4b3a      	ldr	r3, [pc, #232]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b38      	ldr	r3, [pc, #224]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e4:	4b36      	ldr	r3, [pc, #216]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b35      	ldr	r3, [pc, #212]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004f0:	4833      	ldr	r0, [pc, #204]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004f2:	f001 fa2b 	bl	800194c <HAL_TIM_Base_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004fc:	f000 f8fc 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000504:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000506:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800050a:	4619      	mov	r1, r3
 800050c:	482c      	ldr	r0, [pc, #176]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 800050e:	f001 fc29 	bl	8001d64 <HAL_TIM_ConfigClockSource>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000518:	f000 f8ee 	bl	80006f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800051c:	4828      	ldr	r0, [pc, #160]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 800051e:	f001 fa64 	bl	80019ea <HAL_TIM_PWM_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000528:	f000 f8e6 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000534:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000538:	4619      	mov	r1, r3
 800053a:	4821      	ldr	r0, [pc, #132]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 800053c:	f001 ff8a 	bl	8002454 <HAL_TIMEx_MasterConfigSynchronization>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000546:	f000 f8d7 	bl	80006f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054a:	2360      	movs	r3, #96	@ 0x60
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 800;
 800054e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000552:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000554:	2300      	movs	r3, #0
 8000556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000558:	2300      	movs	r3, #0
 800055a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	4813      	ldr	r0, [pc, #76]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 8000572:	f001 fb35 	bl	8001be0 <HAL_TIM_PWM_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800057c:	f000 f8bc 	bl	80006f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000598:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80005a4:	f001 ffb4 	bl	8002510 <HAL_TIMEx_ConfigBreakDeadTime>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80005ae:	f000 f8a3 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005b2:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80005b4:	f000 f8f6 	bl	80007a4 <HAL_TIM_MspPostInit>

}
 80005b8:	bf00      	nop
 80005ba:	3758      	adds	r7, #88	@ 0x58
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000088 	.word	0x20000088
 80005c4:	40012c00 	.word	0x40012c00

080005c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <MX_USART2_UART_Init+0x50>)
 80005d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_USART2_UART_Init+0x4c>)
 8000600:	f001 ffd7 	bl	80025b2 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800060a:	f000 f875 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000d0 	.word	0x200000d0
 8000618:	40004400 	.word	0x40004400

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000630:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a2c      	ldr	r2, [pc, #176]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0310 	and.w	r3, r3, #16
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a26      	ldr	r2, [pc, #152]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0320 	and.w	r3, r3, #32
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a1a      	ldr	r2, [pc, #104]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2120      	movs	r1, #32
 8000694:	4815      	ldr	r0, [pc, #84]	@ (80006ec <MX_GPIO_Init+0xd0>)
 8000696:	f000 fd0f 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_GPIO_Init+0xd4>)
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4811      	ldr	r0, [pc, #68]	@ (80006f4 <MX_GPIO_Init+0xd8>)
 80006b0:	f000 fb7e 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b4:	2320      	movs	r3, #32
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4808      	ldr	r0, [pc, #32]	@ (80006ec <MX_GPIO_Init+0xd0>)
 80006cc:	f000 fb70 	bl	8000db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	2028      	movs	r0, #40	@ 0x28
 80006d6:	f000 fb34 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006da:	2028      	movs	r0, #40	@ 0x28
 80006dc:	f000 fb4d 	bl	8000d7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010800 	.word	0x40010800
 80006f0:	10110000 	.word	0x10110000
 80006f4:	40011000 	.word	0x40011000

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <Error_Handler+0x8>

08000704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <HAL_MspInit+0x5c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <HAL_MspInit+0x5c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <HAL_MspInit+0x60>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_MspInit+0x60>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a09      	ldr	r2, [pc, #36]	@ (800079c <HAL_TIM_Base_MspInit+0x34>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10b      	bne.n	8000792 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_TIM_Base_MspInit+0x38>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <HAL_TIM_Base_MspInit+0x38>)
 8000780:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_TIM_Base_MspInit+0x38>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40012c00 	.word	0x40012c00
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HAL_TIM_MspPostInit+0x5c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d118      	bne.n	80007f6 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_TIM_MspPostInit+0x60>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <HAL_TIM_MspPostInit+0x60>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_TIM_MspPostInit+0x60>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <HAL_TIM_MspPostInit+0x64>)
 80007f2:	f000 fadd 	bl	8000db0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40012c00 	.word	0x40012c00
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800

0800080c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a15      	ldr	r2, [pc, #84]	@ (800087c <HAL_UART_MspInit+0x70>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d123      	bne.n	8000874 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <HAL_UART_MspInit+0x74>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <HAL_UART_MspInit+0x74>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000836:	61d3      	str	r3, [r2, #28]
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <HAL_UART_MspInit+0x74>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <HAL_UART_MspInit+0x74>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <HAL_UART_MspInit+0x74>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <HAL_UART_MspInit+0x74>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085c:	230c      	movs	r3, #12
 800085e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2302      	movs	r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <HAL_UART_MspInit+0x78>)
 8000870:	f000 fa9e 	bl	8000db0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40004400 	.word	0x40004400
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <NMI_Handler+0x4>

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <MemManage_Handler+0x4>

080008a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f91c 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008e8:	f000 fbfe 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e00a      	b.n	8000918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000902:	f3af 8000 	nop.w
 8000906:	4601      	mov	r1, r0
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	60ba      	str	r2, [r7, #8]
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf0      	blt.n	8000902 <_read+0x12>
  }

  return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e009      	b.n	8000950 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fc01 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf1      	blt.n	800093c <_write+0x12>
  }
  return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_close>:

int _close(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000988:	605a      	str	r2, [r3, #4]
  return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <_isatty>:

int _isatty(int file)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b085      	sub	sp, #20
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
	...

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f002 faf0 	bl	8002fd8 <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <_sbrk+0x64>)
 8000a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20005000 	.word	0x20005000
 8000a24:	00000400 	.word	0x00000400
 8000a28:	2000011c 	.word	0x2000011c
 8000a2c:	20000270 	.word	0x20000270

08000a30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff fff8 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a42:	490c      	ldr	r1, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a44:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a09      	ldr	r2, [pc, #36]	@ (8000a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a58:	4c09      	ldr	r4, [pc, #36]	@ (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 fabd 	bl	8002fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff fbed 	bl	8000248 <main>
  bx lr
 8000a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a78:	08003bf4 	.word	0x08003bf4
  ldr r2, =_sbss
 8000a7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a80:	20000270 	.word	0x20000270

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_Init+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	@ (8000ab0 <HAL_Init+0x28>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f947 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe2e 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f95f 	bl	8000d96 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f927 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	@ (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a03      	ldr	r2, [pc, #12]	@ (8000b34 <HAL_IncTick+0x20>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	2000000c 	.word	0x2000000c
 8000b34:	20000120 	.word	0x20000120

08000b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	@ (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000120 	.word	0x20000120

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff fff0 	bl	8000b38 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffe0 	bl	8000b38 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000000c 	.word	0x2000000c

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4906      	ldr	r1, [pc, #24]	@ (8000c2c <__NVIC_EnableIRQ+0x34>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	@ (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	@ 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff90 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff2d 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff42 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff90 	bl	8000c84 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5f 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff35 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b08b      	sub	sp, #44	@ 0x2c
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e169      	b.n	8001098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 8158 	bne.w	8001092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4a9a      	ldr	r2, [pc, #616]	@ (8001050 <HAL_GPIO_Init+0x2a0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d05e      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000dec:	4a98      	ldr	r2, [pc, #608]	@ (8001050 <HAL_GPIO_Init+0x2a0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d875      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000df2:	4a98      	ldr	r2, [pc, #608]	@ (8001054 <HAL_GPIO_Init+0x2a4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d058      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000df8:	4a96      	ldr	r2, [pc, #600]	@ (8001054 <HAL_GPIO_Init+0x2a4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d86f      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000dfe:	4a96      	ldr	r2, [pc, #600]	@ (8001058 <HAL_GPIO_Init+0x2a8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d052      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000e04:	4a94      	ldr	r2, [pc, #592]	@ (8001058 <HAL_GPIO_Init+0x2a8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d869      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e0a:	4a94      	ldr	r2, [pc, #592]	@ (800105c <HAL_GPIO_Init+0x2ac>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d04c      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000e10:	4a92      	ldr	r2, [pc, #584]	@ (800105c <HAL_GPIO_Init+0x2ac>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d863      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e16:	4a92      	ldr	r2, [pc, #584]	@ (8001060 <HAL_GPIO_Init+0x2b0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d046      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000e1c:	4a90      	ldr	r2, [pc, #576]	@ (8001060 <HAL_GPIO_Init+0x2b0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d85d      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d82a      	bhi.n	8000e7c <HAL_GPIO_Init+0xcc>
 8000e26:	2b12      	cmp	r3, #18
 8000e28:	d859      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e30 <HAL_GPIO_Init+0x80>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000eab 	.word	0x08000eab
 8000e34:	08000e85 	.word	0x08000e85
 8000e38:	08000e97 	.word	0x08000e97
 8000e3c:	08000ed9 	.word	0x08000ed9
 8000e40:	08000edf 	.word	0x08000edf
 8000e44:	08000edf 	.word	0x08000edf
 8000e48:	08000edf 	.word	0x08000edf
 8000e4c:	08000edf 	.word	0x08000edf
 8000e50:	08000edf 	.word	0x08000edf
 8000e54:	08000edf 	.word	0x08000edf
 8000e58:	08000edf 	.word	0x08000edf
 8000e5c:	08000edf 	.word	0x08000edf
 8000e60:	08000edf 	.word	0x08000edf
 8000e64:	08000edf 	.word	0x08000edf
 8000e68:	08000edf 	.word	0x08000edf
 8000e6c:	08000edf 	.word	0x08000edf
 8000e70:	08000edf 	.word	0x08000edf
 8000e74:	08000e8d 	.word	0x08000e8d
 8000e78:	08000ea1 	.word	0x08000ea1
 8000e7c:	4a79      	ldr	r2, [pc, #484]	@ (8001064 <HAL_GPIO_Init+0x2b4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e82:	e02c      	b.n	8000ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	623b      	str	r3, [r7, #32]
          break;
 8000e8a:	e029      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	3304      	adds	r3, #4
 8000e92:	623b      	str	r3, [r7, #32]
          break;
 8000e94:	e024      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e01f      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	330c      	adds	r3, #12
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e01a      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e013      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d105      	bne.n	8000ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	611a      	str	r2, [r3, #16]
          break;
 8000eca:	e009      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	615a      	str	r2, [r3, #20]
          break;
 8000ed6:	e003      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          break;
 8000ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	2bff      	cmp	r3, #255	@ 0xff
 8000ee4:	d801      	bhi.n	8000eea <HAL_GPIO_Init+0x13a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	e001      	b.n	8000eee <HAL_GPIO_Init+0x13e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3304      	adds	r3, #4
 8000eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2bff      	cmp	r3, #255	@ 0xff
 8000ef4:	d802      	bhi.n	8000efc <HAL_GPIO_Init+0x14c>
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0x152>
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	3b08      	subs	r3, #8
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	210f      	movs	r1, #15
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	6a39      	ldr	r1, [r7, #32]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 80b1 	beq.w	8001092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f30:	4b4d      	ldr	r3, [pc, #308]	@ (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a4c      	ldr	r2, [pc, #304]	@ (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f48:	4a48      	ldr	r2, [pc, #288]	@ (800106c <HAL_GPIO_Init+0x2bc>)
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a40      	ldr	r2, [pc, #256]	@ (8001070 <HAL_GPIO_Init+0x2c0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d013      	beq.n	8000f9c <HAL_GPIO_Init+0x1ec>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a3f      	ldr	r2, [pc, #252]	@ (8001074 <HAL_GPIO_Init+0x2c4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1e8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1e4>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3d      	ldr	r2, [pc, #244]	@ (800107c <HAL_GPIO_Init+0x2cc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1e0>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f90:	2304      	movs	r3, #4
 8000f92:	e004      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fae:	492f      	ldr	r1, [pc, #188]	@ (800106c <HAL_GPIO_Init+0x2bc>)
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	492c      	ldr	r1, [pc, #176]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4928      	ldr	r1, [pc, #160]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff0:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	4922      	ldr	r1, [pc, #136]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60cb      	str	r3, [r1, #12]
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ffe:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	43db      	mvns	r3, r3
 8001006:	491e      	ldr	r1, [pc, #120]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001008:	4013      	ands	r3, r2
 800100a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4918      	ldr	r1, [pc, #96]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	4914      	ldr	r1, [pc, #80]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001030:	4013      	ands	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d021      	beq.n	8001084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	490e      	ldr	r1, [pc, #56]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e021      	b.n	8001092 <HAL_GPIO_Init+0x2e2>
 800104e:	bf00      	nop
 8001050:	10320000 	.word	0x10320000
 8001054:	10310000 	.word	0x10310000
 8001058:	10220000 	.word	0x10220000
 800105c:	10210000 	.word	0x10210000
 8001060:	10120000 	.word	0x10120000
 8001064:	10110000 	.word	0x10110000
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	40010800 	.word	0x40010800
 8001074:	40010c00 	.word	0x40010c00
 8001078:	40011000 	.word	0x40011000
 800107c:	40011400 	.word	0x40011400
 8001080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	43db      	mvns	r3, r3
 800108c:	4909      	ldr	r1, [pc, #36]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 800108e:	4013      	ands	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	3301      	adds	r3, #1
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f47f ae8e 	bne.w	8000dc4 <HAL_GPIO_Init+0x14>
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	372c      	adds	r7, #44	@ 0x2c
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	611a      	str	r2, [r3, #16]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f806 	bl	8001118 <HAL_GPIO_EXTI_Callback>
  }
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e272      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8087 	beq.w	800125a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800114c:	4b92      	ldr	r3, [pc, #584]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00c      	beq.n	8001172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001158:	4b8f      	ldr	r3, [pc, #572]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d112      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
 8001164:	4b8c      	ldr	r3, [pc, #560]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001170:	d10b      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	4b89      	ldr	r3, [pc, #548]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d06c      	beq.n	8001258 <HAL_RCC_OscConfig+0x12c>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d168      	bne.n	8001258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e24c      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x76>
 8001194:	4b80      	ldr	r3, [pc, #512]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a7f      	ldr	r2, [pc, #508]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e02e      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b78      	ldr	r3, [pc, #480]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a77      	ldr	r2, [pc, #476]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0xbc>
 80011ce:	4b72      	ldr	r3, [pc, #456]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a71      	ldr	r2, [pc, #452]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6f      	ldr	r3, [pc, #444]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b68      	ldr	r3, [pc, #416]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a67      	ldr	r2, [pc, #412]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fc96 	bl	8000b38 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fc92 	bl	8000b38 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	@ 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e200      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xe4>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fc82 	bl	8000b38 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fc7e 	bl	8000b38 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	@ 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1ec      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x10c>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	4b4c      	ldr	r3, [pc, #304]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001272:	4b49      	ldr	r3, [pc, #292]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
 800127e:	4b46      	ldr	r3, [pc, #280]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b43      	ldr	r3, [pc, #268]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c0      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4939      	ldr	r1, [pc, #228]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b36      	ldr	r3, [pc, #216]	@ (800139c <HAL_RCC_OscConfig+0x270>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fc37 	bl	8000b38 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc33 	bl	8000b38 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4927      	ldr	r1, [pc, #156]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b26      	ldr	r3, [pc, #152]	@ (800139c <HAL_RCC_OscConfig+0x270>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc16 	bl	8000b38 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fc12 	bl	8000b38 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e180      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d019      	beq.n	8001376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fbf6 	bl	8000b38 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fbf2 	bl	8000b38 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e160      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 face 	bl	8001910 <RCC_Delay>
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fbdc 	bl	8000b38 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	e00f      	b.n	80013a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fbd8 	bl	8000b38 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e146      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	42420000 	.word	0x42420000
 80013a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b92      	ldr	r3, [pc, #584]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e9      	bne.n	8001384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a6 	beq.w	800150a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b8b      	ldr	r3, [pc, #556]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b88      	ldr	r3, [pc, #544]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a87      	ldr	r2, [pc, #540]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b85      	ldr	r3, [pc, #532]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b7f      	ldr	r3, [pc, #508]	@ (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7e      	ldr	r2, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb99 	bl	8000b38 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fb95 	bl	8000b38 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	@ 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e103      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	4b75      	ldr	r3, [pc, #468]	@ (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001430:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a6e      	ldr	r2, [pc, #440]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x334>
 8001446:	4b6a      	ldr	r3, [pc, #424]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a69      	ldr	r2, [pc, #420]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	4b67      	ldr	r3, [pc, #412]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a66      	ldr	r2, [pc, #408]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x356>
 8001468:	4b61      	ldr	r3, [pc, #388]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a60      	ldr	r2, [pc, #384]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b5e      	ldr	r3, [pc, #376]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a5d      	ldr	r2, [pc, #372]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001482:	4b5b      	ldr	r3, [pc, #364]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a5a      	ldr	r2, [pc, #360]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b58      	ldr	r3, [pc, #352]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a57      	ldr	r2, [pc, #348]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb49 	bl	8000b38 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fb45 	bl	8000b38 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0b1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b4b      	ldr	r3, [pc, #300]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x37e>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb33 	bl	8000b38 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fb2f 	bl	8000b38 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e09b      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b40      	ldr	r3, [pc, #256]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a3b      	ldr	r2, [pc, #236]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8087 	beq.w	8001622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d061      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d146      	bne.n	80015b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb03 	bl	8000b38 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff faff 	bl	8000b38 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e06d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001548:	4b29      	ldr	r3, [pc, #164]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800155c:	d108      	bne.n	8001570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4921      	ldr	r1, [pc, #132]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a19      	ldr	r1, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	430b      	orrs	r3, r1
 8001582:	491b      	ldr	r1, [pc, #108]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fad3 	bl	8000b38 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff facf 	bl	8000b38 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
 80015b4:	e035      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fabc 	bl	8000b38 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fab8 	bl	8000b38 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e026      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x498>
 80015e2:	e01e      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e019      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_RCC_OscConfig+0x500>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d0      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b6a      	ldr	r3, [pc, #424]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d910      	bls.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b67      	ldr	r3, [pc, #412]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4965      	ldr	r1, [pc, #404]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a58      	ldr	r2, [pc, #352]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d115      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b41      	ldr	r3, [pc, #260]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e073      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3d      	ldr	r3, [pc, #244]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06b      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4936      	ldr	r1, [pc, #216]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff fa0a 	bl	8000b38 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff fa06 	bl	8000b38 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e053      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d210      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4922      	ldr	r1, [pc, #136]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_RCC_ClockConfig+0x1cc>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_ClockConfig+0x1d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f968 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	08003b8c 	.word	0x08003b8c
 80017fc:	20000004 	.word	0x20000004
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181e:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x94>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x30>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x36>
 8001832:	e027      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_RCC_GetSysClockFreq+0x98>)
 8001836:	613b      	str	r3, [r7, #16]
      break;
 8001838:	e027      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d010      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x94>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0c5b      	lsrs	r3, r3, #17
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_RCC_GetSysClockFreq+0x98>)
 8001866:	fb03 f202 	mul.w	r2, r3, r2
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e004      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	613b      	str	r3, [r7, #16]
      break;
 8001882:	e002      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_RCC_GetSysClockFreq+0x98>)
 8001886:	613b      	str	r3, [r7, #16]
      break;
 8001888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188a:	693b      	ldr	r3, [r7, #16]
}
 800188c:	4618      	mov	r0, r3
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	007a1200 	.word	0x007a1200
 80018a0:	08003ba4 	.word	0x08003ba4
 80018a4:	08003bb4 	.word	0x08003bb4
 80018a8:	003d0900 	.word	0x003d0900

080018ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b02      	ldr	r3, [pc, #8]	@ (80018bc <HAL_RCC_GetHCLKFreq+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c4:	f7ff fff2 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	4903      	ldr	r1, [pc, #12]	@ (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08003b9c 	.word	0x08003b9c

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ec:	f7ff ffde 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	0adb      	lsrs	r3, r3, #11
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	@ (800190c <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	08003b9c 	.word	0x08003b9c

08001910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <RCC_Delay+0x34>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <RCC_Delay+0x38>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0a5b      	lsrs	r3, r3, #9
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800192c:	bf00      	nop
  }
  while (Delay --);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1e5a      	subs	r2, r3, #1
 8001932:	60fa      	str	r2, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f9      	bne.n	800192c <RCC_Delay+0x1c>
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000004 	.word	0x20000004
 8001948:	10624dd3 	.word	0x10624dd3

0800194c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e041      	b.n	80019e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fef8 	bl	8000768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3304      	adds	r3, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f000 fab2 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e041      	b.n	8001a80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d106      	bne.n	8001a16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f839 	bl	8001a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f000 fa63 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_TIM_PWM_Start+0x24>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	e022      	b.n	8001b06 <HAL_TIM_PWM_Start+0x6a>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d109      	bne.n	8001ada <HAL_TIM_PWM_Start+0x3e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	e015      	b.n	8001b06 <HAL_TIM_PWM_Start+0x6a>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d109      	bne.n	8001af4 <HAL_TIM_PWM_Start+0x58>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e008      	b.n	8001b06 <HAL_TIM_PWM_Start+0x6a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	bf14      	ite	ne
 8001b00:	2301      	movne	r3, #1
 8001b02:	2300      	moveq	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e05e      	b.n	8001bcc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d104      	bne.n	8001b1e <HAL_TIM_PWM_Start+0x82>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b1c:	e013      	b.n	8001b46 <HAL_TIM_PWM_Start+0xaa>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d104      	bne.n	8001b2e <HAL_TIM_PWM_Start+0x92>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b2c:	e00b      	b.n	8001b46 <HAL_TIM_PWM_Start+0xaa>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d104      	bne.n	8001b3e <HAL_TIM_PWM_Start+0xa2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b3c:	e003      	b.n	8001b46 <HAL_TIM_PWM_Start+0xaa>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fc5c 	bl	800240c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd4 <HAL_TIM_PWM_Start+0x138>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d107      	bne.n	8001b6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a18      	ldr	r2, [pc, #96]	@ (8001bd4 <HAL_TIM_PWM_Start+0x138>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00e      	beq.n	8001b96 <HAL_TIM_PWM_Start+0xfa>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b80:	d009      	beq.n	8001b96 <HAL_TIM_PWM_Start+0xfa>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <HAL_TIM_PWM_Start+0x13c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d004      	beq.n	8001b96 <HAL_TIM_PWM_Start+0xfa>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <HAL_TIM_PWM_Start+0x140>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d111      	bne.n	8001bba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d010      	beq.n	8001bca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb8:	e007      	b.n	8001bca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	40000800 	.word	0x40000800

08001be0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e0ae      	b.n	8001d5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	f200 809f 	bhi.w	8001d4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c49 	.word	0x08001c49
 8001c18:	08001d4d 	.word	0x08001d4d
 8001c1c:	08001d4d 	.word	0x08001d4d
 8001c20:	08001d4d 	.word	0x08001d4d
 8001c24:	08001c89 	.word	0x08001c89
 8001c28:	08001d4d 	.word	0x08001d4d
 8001c2c:	08001d4d 	.word	0x08001d4d
 8001c30:	08001d4d 	.word	0x08001d4d
 8001c34:	08001ccb 	.word	0x08001ccb
 8001c38:	08001d4d 	.word	0x08001d4d
 8001c3c:	08001d4d 	.word	0x08001d4d
 8001c40:	08001d4d 	.word	0x08001d4d
 8001c44:	08001d0b 	.word	0x08001d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f9be 	bl	8001fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0208 	orr.w	r2, r2, #8
 8001c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0204 	bic.w	r2, r2, #4
 8001c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6999      	ldr	r1, [r3, #24]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	619a      	str	r2, [r3, #24]
      break;
 8001c86:	e064      	b.n	8001d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fa04 	bl	800209c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6999      	ldr	r1, [r3, #24]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	021a      	lsls	r2, r3, #8
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	619a      	str	r2, [r3, #24]
      break;
 8001cc8:	e043      	b.n	8001d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fa4d 	bl	8002170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69da      	ldr	r2, [r3, #28]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0208 	orr.w	r2, r2, #8
 8001ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0204 	bic.w	r2, r2, #4
 8001cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69d9      	ldr	r1, [r3, #28]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61da      	str	r2, [r3, #28]
      break;
 8001d08:	e023      	b.n	8001d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fa97 	bl	8002244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69d9      	ldr	r1, [r3, #28]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	021a      	lsls	r2, r3, #8
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	61da      	str	r2, [r3, #28]
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_TIM_ConfigClockSource+0x1c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0b4      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x186>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db8:	d03e      	beq.n	8001e38 <HAL_TIM_ConfigClockSource+0xd4>
 8001dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dbe:	f200 8087 	bhi.w	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dc6:	f000 8086 	beq.w	8001ed6 <HAL_TIM_ConfigClockSource+0x172>
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dce:	d87f      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd0:	2b70      	cmp	r3, #112	@ 0x70
 8001dd2:	d01a      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0xa6>
 8001dd4:	2b70      	cmp	r3, #112	@ 0x70
 8001dd6:	d87b      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd8:	2b60      	cmp	r3, #96	@ 0x60
 8001dda:	d050      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x11a>
 8001ddc:	2b60      	cmp	r3, #96	@ 0x60
 8001dde:	d877      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001de0:	2b50      	cmp	r3, #80	@ 0x50
 8001de2:	d03c      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0xfa>
 8001de4:	2b50      	cmp	r3, #80	@ 0x50
 8001de6:	d873      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001de8:	2b40      	cmp	r3, #64	@ 0x40
 8001dea:	d058      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x13a>
 8001dec:	2b40      	cmp	r3, #64	@ 0x40
 8001dee:	d86f      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001df0:	2b30      	cmp	r3, #48	@ 0x30
 8001df2:	d064      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15a>
 8001df4:	2b30      	cmp	r3, #48	@ 0x30
 8001df6:	d86b      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d060      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15a>
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d867      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d05c      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15a>
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d05a      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15a>
 8001e08:	e062      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e1a:	f000 fad8 	bl	80023ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	609a      	str	r2, [r3, #8]
      break;
 8001e36:	e04f      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e48:	f000 fac1 	bl	80023ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e5a:	609a      	str	r2, [r3, #8]
      break;
 8001e5c:	e03c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f000 fa38 	bl	80022e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2150      	movs	r1, #80	@ 0x50
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fa8f 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e02c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 fa56 	bl	800233c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2160      	movs	r1, #96	@ 0x60
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fa7f 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e01c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f000 fa18 	bl	80022e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2140      	movs	r1, #64	@ 0x40
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fa6f 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e00c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f000 fa66 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8001ece:	e003      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed4:	e000      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc4 <TIM_Base_SetConfig+0xd0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00b      	beq.n	8001f24 <TIM_Base_SetConfig+0x30>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f12:	d007      	beq.n	8001f24 <TIM_Base_SetConfig+0x30>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a2c      	ldr	r2, [pc, #176]	@ (8001fc8 <TIM_Base_SetConfig+0xd4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x30>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001fcc <TIM_Base_SetConfig+0xd8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a22      	ldr	r2, [pc, #136]	@ (8001fc4 <TIM_Base_SetConfig+0xd0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <TIM_Base_SetConfig+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0x62>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc8 <TIM_Base_SetConfig+0xd4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0x62>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1e      	ldr	r2, [pc, #120]	@ (8001fcc <TIM_Base_SetConfig+0xd8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d108      	bne.n	8001f68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <TIM_Base_SetConfig+0xd0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d103      	bne.n	8001f9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f023 0201 	bic.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	611a      	str	r2, [r3, #16]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800

08001fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f023 0201 	bic.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f023 0302 	bic.w	r3, r3, #2
 8002018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <TIM_OC1_SetConfig+0xc8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d10c      	bne.n	8002046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f023 0308 	bic.w	r3, r3, #8
 8002032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <TIM_OC1_SetConfig+0xc8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d111      	bne.n	8002072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800205c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	621a      	str	r2, [r3, #32]
}
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40012c00 	.word	0x40012c00

0800209c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f023 0210 	bic.w	r2, r3, #16
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0320 	bic.w	r3, r3, #32
 80020e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <TIM_OC2_SetConfig+0xd0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10d      	bne.n	8002118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a14      	ldr	r2, [pc, #80]	@ (800216c <TIM_OC2_SetConfig+0xd0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d113      	bne.n	8002148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800212e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	621a      	str	r2, [r3, #32]
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40012c00 	.word	0x40012c00

08002170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <TIM_OC3_SetConfig+0xd0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10d      	bne.n	80021ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a14      	ldr	r2, [pc, #80]	@ (8002240 <TIM_OC3_SetConfig+0xd0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d113      	bne.n	800221a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	621a      	str	r2, [r3, #32]
}
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40012c00 	.word	0x40012c00

08002244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800227a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800228e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	031b      	lsls	r3, r3, #12
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0f      	ldr	r2, [pc, #60]	@ (80022dc <TIM_OC4_SetConfig+0x98>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d109      	bne.n	80022b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	621a      	str	r2, [r3, #32]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40012c00 	.word	0x40012c00

080022e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f023 0201 	bic.w	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800230a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f023 030a 	bic.w	r3, r3, #10
 800231c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f023 0210 	bic.w	r2, r3, #16
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	031b      	lsls	r3, r3, #12
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002378:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	621a      	str	r2, [r3, #32]
}
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f043 0307 	orr.w	r3, r3, #7
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b087      	sub	sp, #28
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	021a      	lsls	r2, r3, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	609a      	str	r2, [r3, #8]
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2201      	movs	r2, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a1a      	ldr	r2, [r3, #32]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	43db      	mvns	r3, r3
 800242e:	401a      	ands	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	621a      	str	r2, [r3, #32]
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002468:	2302      	movs	r3, #2
 800246a:	e046      	b.n	80024fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a16      	ldr	r2, [pc, #88]	@ (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b8:	d009      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a10      	ldr	r2, [pc, #64]	@ (800250c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10c      	bne.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800

08002510 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002528:	2302      	movs	r3, #2
 800252a:	e03d      	b.n	80025a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e042      	b.n	800264a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe f917 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2224      	movs	r2, #36	@ 0x24
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa08 	bl	8002a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800260a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800261a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800262a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b08a      	sub	sp, #40	@ 0x28
 8002656:	af02      	add	r7, sp, #8
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	d175      	bne.n	800275e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_UART_Transmit+0x2c>
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06e      	b.n	8002760 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2221      	movs	r2, #33	@ 0x21
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002690:	f7fe fa52 	bl	8000b38 <HAL_GetTick>
 8002694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	88fa      	ldrh	r2, [r7, #6]
 800269a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026aa:	d108      	bne.n	80026be <HAL_UART_Transmit+0x6c>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e003      	b.n	80026c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026c6:	e02e      	b.n	8002726 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2200      	movs	r2, #0
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f8df 	bl	8002896 <UART_WaitOnFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e03a      	b.n	8002760 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3302      	adds	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e007      	b.n	8002718 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1cb      	bne.n	80026c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2200      	movs	r2, #0
 8002738:	2140      	movs	r1, #64	@ 0x40
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8ab 	bl	8002896 <UART_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e006      	b.n	8002760 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b20      	cmp	r3, #32
 8002786:	f040 8081 	bne.w	800288c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_UART_Receive+0x2e>
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e079      	b.n	800288e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2222      	movs	r2, #34	@ 0x22
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ae:	f7fe f9c3 	bl	8000b38 <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c8:	d108      	bne.n	80027dc <HAL_UART_Receive+0x74>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e003      	b.n	80027e4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027e4:	e047      	b.n	8002876 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2120      	movs	r1, #32
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f850 	bl	8002896 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e042      	b.n	800288e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281a:	b29a      	uxth	r2, r3
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	3302      	adds	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e01f      	b.n	8002868 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002830:	d007      	beq.n	8002842 <HAL_UART_Receive+0xda>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_UART_Receive+0xe8>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e008      	b.n	8002862 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800285c:	b2da      	uxtb	r2, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1b2      	bne.n	80027e6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a6:	e03b      	b.n	8002920 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d037      	beq.n	8002920 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b0:	f7fe f942 	bl	8000b38 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	6a3a      	ldr	r2, [r7, #32]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e03a      	b.n	8002940 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d023      	beq.n	8002920 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b80      	cmp	r3, #128	@ 0x80
 80028dc:	d020      	beq.n	8002920 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b40      	cmp	r3, #64	@ 0x40
 80028e2:	d01d      	beq.n	8002920 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d116      	bne.n	8002920 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f81d 	bl	8002948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2208      	movs	r2, #8
 8002912:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e00f      	b.n	8002940 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	429a      	cmp	r2, r3
 800293c:	d0b4      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b095      	sub	sp, #84	@ 0x54
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002962:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002970:	643a      	str	r2, [r7, #64]	@ 0x40
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002978:	e841 2300 	strex	r3, r2, [r1]
 800297c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e5      	bne.n	8002950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3314      	adds	r3, #20
 800298a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	e853 3f00 	ldrex	r3, [r3]
 8002992:	61fb      	str	r3, [r7, #28]
   return(result);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ac:	e841 2300 	strex	r3, r2, [r1]
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e5      	bne.n	8002984 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d119      	bne.n	80029f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	e853 3f00 	ldrex	r3, [r3]
 80029ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f023 0310 	bic.w	r3, r3, #16
 80029d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029e0:	61ba      	str	r2, [r7, #24]
 80029e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e4:	6979      	ldr	r1, [r7, #20]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	e841 2300 	strex	r3, r2, [r1]
 80029ec:	613b      	str	r3, [r7, #16]
   return(result);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e5      	bne.n	80029c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a02:	bf00      	nop
 8002a04:	3754      	adds	r7, #84	@ 0x54
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a46:	f023 030c 	bic.w	r3, r3, #12
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b20 <UART_SetConfig+0x114>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a74:	f7fe ff38 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	e002      	b.n	8002a82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f7fe ff20 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8002a80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	009a      	lsls	r2, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	4a22      	ldr	r2, [pc, #136]	@ (8002b24 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	0119      	lsls	r1, r3, #4
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <UART_SetConfig+0x118>)
 8002aba:	fba3 0302 	umull	r0, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2064      	movs	r0, #100	@ 0x64
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	@ 0x32
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <UART_SetConfig+0x118>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad8:	4419      	add	r1, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <UART_SetConfig+0x118>)
 8002af2:	fba3 0302 	umull	r0, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2064      	movs	r0, #100	@ 0x64
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	3332      	adds	r3, #50	@ 0x32
 8002b04:	4a07      	ldr	r2, [pc, #28]	@ (8002b24 <UART_SetConfig+0x118>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	440a      	add	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40013800 	.word	0x40013800
 8002b24:	51eb851f 	.word	0x51eb851f

08002b28 <std>:
 8002b28:	2300      	movs	r3, #0
 8002b2a:	b510      	push	{r4, lr}
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b36:	6083      	str	r3, [r0, #8]
 8002b38:	8181      	strh	r1, [r0, #12]
 8002b3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b3c:	81c2      	strh	r2, [r0, #14]
 8002b3e:	6183      	str	r3, [r0, #24]
 8002b40:	4619      	mov	r1, r3
 8002b42:	2208      	movs	r2, #8
 8002b44:	305c      	adds	r0, #92	@ 0x5c
 8002b46:	f000 f9f9 	bl	8002f3c <memset>
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <std+0x58>)
 8002b4c:	6224      	str	r4, [r4, #32]
 8002b4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <std+0x5c>)
 8002b52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <std+0x60>)
 8002b56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <std+0x64>)
 8002b5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <std+0x68>)
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d006      	beq.n	8002b70 <std+0x48>
 8002b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b66:	4294      	cmp	r4, r2
 8002b68:	d002      	beq.n	8002b70 <std+0x48>
 8002b6a:	33d0      	adds	r3, #208	@ 0xd0
 8002b6c:	429c      	cmp	r4, r3
 8002b6e:	d105      	bne.n	8002b7c <std+0x54>
 8002b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b78:	f000 ba58 	b.w	800302c <__retarget_lock_init_recursive>
 8002b7c:	bd10      	pop	{r4, pc}
 8002b7e:	bf00      	nop
 8002b80:	08002d8d 	.word	0x08002d8d
 8002b84:	08002daf 	.word	0x08002daf
 8002b88:	08002de7 	.word	0x08002de7
 8002b8c:	08002e0b 	.word	0x08002e0b
 8002b90:	20000124 	.word	0x20000124

08002b94 <stdio_exit_handler>:
 8002b94:	4a02      	ldr	r2, [pc, #8]	@ (8002ba0 <stdio_exit_handler+0xc>)
 8002b96:	4903      	ldr	r1, [pc, #12]	@ (8002ba4 <stdio_exit_handler+0x10>)
 8002b98:	4803      	ldr	r0, [pc, #12]	@ (8002ba8 <stdio_exit_handler+0x14>)
 8002b9a:	f000 b869 	b.w	8002c70 <_fwalk_sglue>
 8002b9e:	bf00      	nop
 8002ba0:	20000010 	.word	0x20000010
 8002ba4:	080038c1 	.word	0x080038c1
 8002ba8:	20000020 	.word	0x20000020

08002bac <cleanup_stdio>:
 8002bac:	6841      	ldr	r1, [r0, #4]
 8002bae:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <cleanup_stdio+0x34>)
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	4299      	cmp	r1, r3
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	d001      	beq.n	8002bbc <cleanup_stdio+0x10>
 8002bb8:	f000 fe82 	bl	80038c0 <_fflush_r>
 8002bbc:	68a1      	ldr	r1, [r4, #8]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <cleanup_stdio+0x38>)
 8002bc0:	4299      	cmp	r1, r3
 8002bc2:	d002      	beq.n	8002bca <cleanup_stdio+0x1e>
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f000 fe7b 	bl	80038c0 <_fflush_r>
 8002bca:	68e1      	ldr	r1, [r4, #12]
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <cleanup_stdio+0x3c>)
 8002bce:	4299      	cmp	r1, r3
 8002bd0:	d004      	beq.n	8002bdc <cleanup_stdio+0x30>
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd8:	f000 be72 	b.w	80038c0 <_fflush_r>
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	bf00      	nop
 8002be0:	20000124 	.word	0x20000124
 8002be4:	2000018c 	.word	0x2000018c
 8002be8:	200001f4 	.word	0x200001f4

08002bec <global_stdio_init.part.0>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <global_stdio_init.part.0+0x30>)
 8002bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8002c20 <global_stdio_init.part.0+0x34>)
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002c24 <global_stdio_init.part.0+0x38>)
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f7ff ff94 	bl	8002b28 <std>
 8002c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c04:	2201      	movs	r2, #1
 8002c06:	2109      	movs	r1, #9
 8002c08:	f7ff ff8e 	bl	8002b28 <std>
 8002c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c10:	2202      	movs	r2, #2
 8002c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c16:	2112      	movs	r1, #18
 8002c18:	f7ff bf86 	b.w	8002b28 <std>
 8002c1c:	2000025c 	.word	0x2000025c
 8002c20:	20000124 	.word	0x20000124
 8002c24:	08002b95 	.word	0x08002b95

08002c28 <__sfp_lock_acquire>:
 8002c28:	4801      	ldr	r0, [pc, #4]	@ (8002c30 <__sfp_lock_acquire+0x8>)
 8002c2a:	f000 ba00 	b.w	800302e <__retarget_lock_acquire_recursive>
 8002c2e:	bf00      	nop
 8002c30:	20000265 	.word	0x20000265

08002c34 <__sfp_lock_release>:
 8002c34:	4801      	ldr	r0, [pc, #4]	@ (8002c3c <__sfp_lock_release+0x8>)
 8002c36:	f000 b9fb 	b.w	8003030 <__retarget_lock_release_recursive>
 8002c3a:	bf00      	nop
 8002c3c:	20000265 	.word	0x20000265

08002c40 <__sinit>:
 8002c40:	b510      	push	{r4, lr}
 8002c42:	4604      	mov	r4, r0
 8002c44:	f7ff fff0 	bl	8002c28 <__sfp_lock_acquire>
 8002c48:	6a23      	ldr	r3, [r4, #32]
 8002c4a:	b11b      	cbz	r3, 8002c54 <__sinit+0x14>
 8002c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c50:	f7ff bff0 	b.w	8002c34 <__sfp_lock_release>
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <__sinit+0x28>)
 8002c56:	6223      	str	r3, [r4, #32]
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <__sinit+0x2c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f5      	bne.n	8002c4c <__sinit+0xc>
 8002c60:	f7ff ffc4 	bl	8002bec <global_stdio_init.part.0>
 8002c64:	e7f2      	b.n	8002c4c <__sinit+0xc>
 8002c66:	bf00      	nop
 8002c68:	08002bad 	.word	0x08002bad
 8002c6c:	2000025c 	.word	0x2000025c

08002c70 <_fwalk_sglue>:
 8002c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c74:	4607      	mov	r7, r0
 8002c76:	4688      	mov	r8, r1
 8002c78:	4614      	mov	r4, r2
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c80:	f1b9 0901 	subs.w	r9, r9, #1
 8002c84:	d505      	bpl.n	8002c92 <_fwalk_sglue+0x22>
 8002c86:	6824      	ldr	r4, [r4, #0]
 8002c88:	2c00      	cmp	r4, #0
 8002c8a:	d1f7      	bne.n	8002c7c <_fwalk_sglue+0xc>
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c92:	89ab      	ldrh	r3, [r5, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d907      	bls.n	8002ca8 <_fwalk_sglue+0x38>
 8002c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	d003      	beq.n	8002ca8 <_fwalk_sglue+0x38>
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	47c0      	blx	r8
 8002ca6:	4306      	orrs	r6, r0
 8002ca8:	3568      	adds	r5, #104	@ 0x68
 8002caa:	e7e9      	b.n	8002c80 <_fwalk_sglue+0x10>

08002cac <iprintf>:
 8002cac:	b40f      	push	{r0, r1, r2, r3}
 8002cae:	b507      	push	{r0, r1, r2, lr}
 8002cb0:	4906      	ldr	r1, [pc, #24]	@ (8002ccc <iprintf+0x20>)
 8002cb2:	ab04      	add	r3, sp, #16
 8002cb4:	6808      	ldr	r0, [r1, #0]
 8002cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cba:	6881      	ldr	r1, [r0, #8]
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	f000 fad7 	bl	8003270 <_vfiprintf_r>
 8002cc2:	b003      	add	sp, #12
 8002cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cc8:	b004      	add	sp, #16
 8002cca:	4770      	bx	lr
 8002ccc:	2000001c 	.word	0x2000001c

08002cd0 <_puts_r>:
 8002cd0:	6a03      	ldr	r3, [r0, #32]
 8002cd2:	b570      	push	{r4, r5, r6, lr}
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	460e      	mov	r6, r1
 8002cd8:	6884      	ldr	r4, [r0, #8]
 8002cda:	b90b      	cbnz	r3, 8002ce0 <_puts_r+0x10>
 8002cdc:	f7ff ffb0 	bl	8002c40 <__sinit>
 8002ce0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ce2:	07db      	lsls	r3, r3, #31
 8002ce4:	d405      	bmi.n	8002cf2 <_puts_r+0x22>
 8002ce6:	89a3      	ldrh	r3, [r4, #12]
 8002ce8:	0598      	lsls	r0, r3, #22
 8002cea:	d402      	bmi.n	8002cf2 <_puts_r+0x22>
 8002cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cee:	f000 f99e 	bl	800302e <__retarget_lock_acquire_recursive>
 8002cf2:	89a3      	ldrh	r3, [r4, #12]
 8002cf4:	0719      	lsls	r1, r3, #28
 8002cf6:	d502      	bpl.n	8002cfe <_puts_r+0x2e>
 8002cf8:	6923      	ldr	r3, [r4, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d135      	bne.n	8002d6a <_puts_r+0x9a>
 8002cfe:	4621      	mov	r1, r4
 8002d00:	4628      	mov	r0, r5
 8002d02:	f000 f8c5 	bl	8002e90 <__swsetup_r>
 8002d06:	b380      	cbz	r0, 8002d6a <_puts_r+0x9a>
 8002d08:	f04f 35ff 	mov.w	r5, #4294967295
 8002d0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d0e:	07da      	lsls	r2, r3, #31
 8002d10:	d405      	bmi.n	8002d1e <_puts_r+0x4e>
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	059b      	lsls	r3, r3, #22
 8002d16:	d402      	bmi.n	8002d1e <_puts_r+0x4e>
 8002d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d1a:	f000 f989 	bl	8003030 <__retarget_lock_release_recursive>
 8002d1e:	4628      	mov	r0, r5
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da04      	bge.n	8002d30 <_puts_r+0x60>
 8002d26:	69a2      	ldr	r2, [r4, #24]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dc17      	bgt.n	8002d5c <_puts_r+0x8c>
 8002d2c:	290a      	cmp	r1, #10
 8002d2e:	d015      	beq.n	8002d5c <_puts_r+0x8c>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	6022      	str	r2, [r4, #0]
 8002d36:	7019      	strb	r1, [r3, #0]
 8002d38:	68a3      	ldr	r3, [r4, #8]
 8002d3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	60a3      	str	r3, [r4, #8]
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d1ed      	bne.n	8002d22 <_puts_r+0x52>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da11      	bge.n	8002d6e <_puts_r+0x9e>
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	210a      	movs	r1, #10
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f000 f85f 	bl	8002e12 <__swbuf_r>
 8002d54:	3001      	adds	r0, #1
 8002d56:	d0d7      	beq.n	8002d08 <_puts_r+0x38>
 8002d58:	250a      	movs	r5, #10
 8002d5a:	e7d7      	b.n	8002d0c <_puts_r+0x3c>
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f000 f857 	bl	8002e12 <__swbuf_r>
 8002d64:	3001      	adds	r0, #1
 8002d66:	d1e7      	bne.n	8002d38 <_puts_r+0x68>
 8002d68:	e7ce      	b.n	8002d08 <_puts_r+0x38>
 8002d6a:	3e01      	subs	r6, #1
 8002d6c:	e7e4      	b.n	8002d38 <_puts_r+0x68>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	6022      	str	r2, [r4, #0]
 8002d74:	220a      	movs	r2, #10
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e7ee      	b.n	8002d58 <_puts_r+0x88>
	...

08002d7c <puts>:
 8002d7c:	4b02      	ldr	r3, [pc, #8]	@ (8002d88 <puts+0xc>)
 8002d7e:	4601      	mov	r1, r0
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	f7ff bfa5 	b.w	8002cd0 <_puts_r>
 8002d86:	bf00      	nop
 8002d88:	2000001c 	.word	0x2000001c

08002d8c <__sread>:
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	460c      	mov	r4, r1
 8002d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d94:	f000 f8fc 	bl	8002f90 <_read_r>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	bfab      	itete	ge
 8002d9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8002da0:	181b      	addge	r3, r3, r0
 8002da2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002da6:	bfac      	ite	ge
 8002da8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002daa:	81a3      	strhlt	r3, [r4, #12]
 8002dac:	bd10      	pop	{r4, pc}

08002dae <__swrite>:
 8002dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db2:	461f      	mov	r7, r3
 8002db4:	898b      	ldrh	r3, [r1, #12]
 8002db6:	4605      	mov	r5, r0
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	460c      	mov	r4, r1
 8002dbc:	4616      	mov	r6, r2
 8002dbe:	d505      	bpl.n	8002dcc <__swrite+0x1e>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc8:	f000 f8d0 	bl	8002f6c <_lseek_r>
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	4632      	mov	r2, r6
 8002dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dd4:	81a3      	strh	r3, [r4, #12]
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	463b      	mov	r3, r7
 8002dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002de2:	f000 b8e7 	b.w	8002fb4 <_write_r>

08002de6 <__sseek>:
 8002de6:	b510      	push	{r4, lr}
 8002de8:	460c      	mov	r4, r1
 8002dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dee:	f000 f8bd 	bl	8002f6c <_lseek_r>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	89a3      	ldrh	r3, [r4, #12]
 8002df6:	bf15      	itete	ne
 8002df8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002dfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002dfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e02:	81a3      	strheq	r3, [r4, #12]
 8002e04:	bf18      	it	ne
 8002e06:	81a3      	strhne	r3, [r4, #12]
 8002e08:	bd10      	pop	{r4, pc}

08002e0a <__sclose>:
 8002e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e0e:	f000 b89d 	b.w	8002f4c <_close_r>

08002e12 <__swbuf_r>:
 8002e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e14:	460e      	mov	r6, r1
 8002e16:	4614      	mov	r4, r2
 8002e18:	4605      	mov	r5, r0
 8002e1a:	b118      	cbz	r0, 8002e24 <__swbuf_r+0x12>
 8002e1c:	6a03      	ldr	r3, [r0, #32]
 8002e1e:	b90b      	cbnz	r3, 8002e24 <__swbuf_r+0x12>
 8002e20:	f7ff ff0e 	bl	8002c40 <__sinit>
 8002e24:	69a3      	ldr	r3, [r4, #24]
 8002e26:	60a3      	str	r3, [r4, #8]
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	071a      	lsls	r2, r3, #28
 8002e2c:	d501      	bpl.n	8002e32 <__swbuf_r+0x20>
 8002e2e:	6923      	ldr	r3, [r4, #16]
 8002e30:	b943      	cbnz	r3, 8002e44 <__swbuf_r+0x32>
 8002e32:	4621      	mov	r1, r4
 8002e34:	4628      	mov	r0, r5
 8002e36:	f000 f82b 	bl	8002e90 <__swsetup_r>
 8002e3a:	b118      	cbz	r0, 8002e44 <__swbuf_r+0x32>
 8002e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8002e40:	4638      	mov	r0, r7
 8002e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	6922      	ldr	r2, [r4, #16]
 8002e48:	b2f6      	uxtb	r6, r6
 8002e4a:	1a98      	subs	r0, r3, r2
 8002e4c:	6963      	ldr	r3, [r4, #20]
 8002e4e:	4637      	mov	r7, r6
 8002e50:	4283      	cmp	r3, r0
 8002e52:	dc05      	bgt.n	8002e60 <__swbuf_r+0x4e>
 8002e54:	4621      	mov	r1, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 fd32 	bl	80038c0 <_fflush_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d1ed      	bne.n	8002e3c <__swbuf_r+0x2a>
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	6022      	str	r2, [r4, #0]
 8002e6c:	701e      	strb	r6, [r3, #0]
 8002e6e:	6962      	ldr	r2, [r4, #20]
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d004      	beq.n	8002e80 <__swbuf_r+0x6e>
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	07db      	lsls	r3, r3, #31
 8002e7a:	d5e1      	bpl.n	8002e40 <__swbuf_r+0x2e>
 8002e7c:	2e0a      	cmp	r6, #10
 8002e7e:	d1df      	bne.n	8002e40 <__swbuf_r+0x2e>
 8002e80:	4621      	mov	r1, r4
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 fd1c 	bl	80038c0 <_fflush_r>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d0d9      	beq.n	8002e40 <__swbuf_r+0x2e>
 8002e8c:	e7d6      	b.n	8002e3c <__swbuf_r+0x2a>
	...

08002e90 <__swsetup_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4b29      	ldr	r3, [pc, #164]	@ (8002f38 <__swsetup_r+0xa8>)
 8002e94:	4605      	mov	r5, r0
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	460c      	mov	r4, r1
 8002e9a:	b118      	cbz	r0, 8002ea4 <__swsetup_r+0x14>
 8002e9c:	6a03      	ldr	r3, [r0, #32]
 8002e9e:	b90b      	cbnz	r3, 8002ea4 <__swsetup_r+0x14>
 8002ea0:	f7ff fece 	bl	8002c40 <__sinit>
 8002ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ea8:	0719      	lsls	r1, r3, #28
 8002eaa:	d422      	bmi.n	8002ef2 <__swsetup_r+0x62>
 8002eac:	06da      	lsls	r2, r3, #27
 8002eae:	d407      	bmi.n	8002ec0 <__swsetup_r+0x30>
 8002eb0:	2209      	movs	r2, #9
 8002eb2:	602a      	str	r2, [r5, #0]
 8002eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	e033      	b.n	8002f28 <__swsetup_r+0x98>
 8002ec0:	0758      	lsls	r0, r3, #29
 8002ec2:	d512      	bpl.n	8002eea <__swsetup_r+0x5a>
 8002ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ec6:	b141      	cbz	r1, 8002eda <__swsetup_r+0x4a>
 8002ec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ecc:	4299      	cmp	r1, r3
 8002ece:	d002      	beq.n	8002ed6 <__swsetup_r+0x46>
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f000 f8af 	bl	8003034 <_free_r>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ee0:	81a3      	strh	r3, [r4, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6063      	str	r3, [r4, #4]
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	6923      	ldr	r3, [r4, #16]
 8002ef4:	b94b      	cbnz	r3, 8002f0a <__swsetup_r+0x7a>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f00:	d003      	beq.n	8002f0a <__swsetup_r+0x7a>
 8002f02:	4621      	mov	r1, r4
 8002f04:	4628      	mov	r0, r5
 8002f06:	f000 fd28 	bl	800395a <__smakebuf_r>
 8002f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f0e:	f013 0201 	ands.w	r2, r3, #1
 8002f12:	d00a      	beq.n	8002f2a <__swsetup_r+0x9a>
 8002f14:	2200      	movs	r2, #0
 8002f16:	60a2      	str	r2, [r4, #8]
 8002f18:	6962      	ldr	r2, [r4, #20]
 8002f1a:	4252      	negs	r2, r2
 8002f1c:	61a2      	str	r2, [r4, #24]
 8002f1e:	6922      	ldr	r2, [r4, #16]
 8002f20:	b942      	cbnz	r2, 8002f34 <__swsetup_r+0xa4>
 8002f22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f26:	d1c5      	bne.n	8002eb4 <__swsetup_r+0x24>
 8002f28:	bd38      	pop	{r3, r4, r5, pc}
 8002f2a:	0799      	lsls	r1, r3, #30
 8002f2c:	bf58      	it	pl
 8002f2e:	6962      	ldrpl	r2, [r4, #20]
 8002f30:	60a2      	str	r2, [r4, #8]
 8002f32:	e7f4      	b.n	8002f1e <__swsetup_r+0x8e>
 8002f34:	2000      	movs	r0, #0
 8002f36:	e7f7      	b.n	8002f28 <__swsetup_r+0x98>
 8002f38:	2000001c 	.word	0x2000001c

08002f3c <memset>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4402      	add	r2, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <_close_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4d05      	ldr	r5, [pc, #20]	@ (8002f68 <_close_r+0x1c>)
 8002f52:	4604      	mov	r4, r0
 8002f54:	4608      	mov	r0, r1
 8002f56:	602b      	str	r3, [r5, #0]
 8002f58:	f7fd fd03 	bl	8000962 <_close>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d102      	bne.n	8002f66 <_close_r+0x1a>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	b103      	cbz	r3, 8002f66 <_close_r+0x1a>
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	20000260 	.word	0x20000260

08002f6c <_lseek_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	2200      	movs	r2, #0
 8002f76:	4d05      	ldr	r5, [pc, #20]	@ (8002f8c <_lseek_r+0x20>)
 8002f78:	602a      	str	r2, [r5, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f7fd fd15 	bl	80009aa <_lseek>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d102      	bne.n	8002f8a <_lseek_r+0x1e>
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	b103      	cbz	r3, 8002f8a <_lseek_r+0x1e>
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
 8002f8c:	20000260 	.word	0x20000260

08002f90 <_read_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	4604      	mov	r4, r0
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4d05      	ldr	r5, [pc, #20]	@ (8002fb0 <_read_r+0x20>)
 8002f9c:	602a      	str	r2, [r5, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f7fd fca6 	bl	80008f0 <_read>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d102      	bne.n	8002fae <_read_r+0x1e>
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	b103      	cbz	r3, 8002fae <_read_r+0x1e>
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	20000260 	.word	0x20000260

08002fb4 <_write_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4d05      	ldr	r5, [pc, #20]	@ (8002fd4 <_write_r+0x20>)
 8002fc0:	602a      	str	r2, [r5, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f7fd fcb1 	bl	800092a <_write>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d102      	bne.n	8002fd2 <_write_r+0x1e>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b103      	cbz	r3, 8002fd2 <_write_r+0x1e>
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	20000260 	.word	0x20000260

08002fd8 <__errno>:
 8002fd8:	4b01      	ldr	r3, [pc, #4]	@ (8002fe0 <__errno+0x8>)
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	2000001c 	.word	0x2000001c

08002fe4 <__libc_init_array>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	4d0c      	ldr	r5, [pc, #48]	@ (800301c <__libc_init_array+0x38>)
 8002fea:	4c0d      	ldr	r4, [pc, #52]	@ (8003020 <__libc_init_array+0x3c>)
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	42a6      	cmp	r6, r4
 8002ff2:	d109      	bne.n	8003008 <__libc_init_array+0x24>
 8002ff4:	f000 fd2e 	bl	8003a54 <_init>
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	4d0a      	ldr	r5, [pc, #40]	@ (8003024 <__libc_init_array+0x40>)
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8003028 <__libc_init_array+0x44>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	42a6      	cmp	r6, r4
 8003004:	d105      	bne.n	8003012 <__libc_init_array+0x2e>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	f855 3b04 	ldr.w	r3, [r5], #4
 800300c:	4798      	blx	r3
 800300e:	3601      	adds	r6, #1
 8003010:	e7ee      	b.n	8002ff0 <__libc_init_array+0xc>
 8003012:	f855 3b04 	ldr.w	r3, [r5], #4
 8003016:	4798      	blx	r3
 8003018:	3601      	adds	r6, #1
 800301a:	e7f2      	b.n	8003002 <__libc_init_array+0x1e>
 800301c:	08003bec 	.word	0x08003bec
 8003020:	08003bec 	.word	0x08003bec
 8003024:	08003bec 	.word	0x08003bec
 8003028:	08003bf0 	.word	0x08003bf0

0800302c <__retarget_lock_init_recursive>:
 800302c:	4770      	bx	lr

0800302e <__retarget_lock_acquire_recursive>:
 800302e:	4770      	bx	lr

08003030 <__retarget_lock_release_recursive>:
 8003030:	4770      	bx	lr
	...

08003034 <_free_r>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	4605      	mov	r5, r0
 8003038:	2900      	cmp	r1, #0
 800303a:	d040      	beq.n	80030be <_free_r+0x8a>
 800303c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003040:	1f0c      	subs	r4, r1, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	bfb8      	it	lt
 8003046:	18e4      	addlt	r4, r4, r3
 8003048:	f000 f8de 	bl	8003208 <__malloc_lock>
 800304c:	4a1c      	ldr	r2, [pc, #112]	@ (80030c0 <_free_r+0x8c>)
 800304e:	6813      	ldr	r3, [r2, #0]
 8003050:	b933      	cbnz	r3, 8003060 <_free_r+0x2c>
 8003052:	6063      	str	r3, [r4, #4]
 8003054:	6014      	str	r4, [r2, #0]
 8003056:	4628      	mov	r0, r5
 8003058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800305c:	f000 b8da 	b.w	8003214 <__malloc_unlock>
 8003060:	42a3      	cmp	r3, r4
 8003062:	d908      	bls.n	8003076 <_free_r+0x42>
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	1821      	adds	r1, r4, r0
 8003068:	428b      	cmp	r3, r1
 800306a:	bf01      	itttt	eq
 800306c:	6819      	ldreq	r1, [r3, #0]
 800306e:	685b      	ldreq	r3, [r3, #4]
 8003070:	1809      	addeq	r1, r1, r0
 8003072:	6021      	streq	r1, [r4, #0]
 8003074:	e7ed      	b.n	8003052 <_free_r+0x1e>
 8003076:	461a      	mov	r2, r3
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	b10b      	cbz	r3, 8003080 <_free_r+0x4c>
 800307c:	42a3      	cmp	r3, r4
 800307e:	d9fa      	bls.n	8003076 <_free_r+0x42>
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	1850      	adds	r0, r2, r1
 8003084:	42a0      	cmp	r0, r4
 8003086:	d10b      	bne.n	80030a0 <_free_r+0x6c>
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	4401      	add	r1, r0
 800308c:	1850      	adds	r0, r2, r1
 800308e:	4283      	cmp	r3, r0
 8003090:	6011      	str	r1, [r2, #0]
 8003092:	d1e0      	bne.n	8003056 <_free_r+0x22>
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4408      	add	r0, r1
 800309a:	6010      	str	r0, [r2, #0]
 800309c:	6053      	str	r3, [r2, #4]
 800309e:	e7da      	b.n	8003056 <_free_r+0x22>
 80030a0:	d902      	bls.n	80030a8 <_free_r+0x74>
 80030a2:	230c      	movs	r3, #12
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	e7d6      	b.n	8003056 <_free_r+0x22>
 80030a8:	6820      	ldr	r0, [r4, #0]
 80030aa:	1821      	adds	r1, r4, r0
 80030ac:	428b      	cmp	r3, r1
 80030ae:	bf01      	itttt	eq
 80030b0:	6819      	ldreq	r1, [r3, #0]
 80030b2:	685b      	ldreq	r3, [r3, #4]
 80030b4:	1809      	addeq	r1, r1, r0
 80030b6:	6021      	streq	r1, [r4, #0]
 80030b8:	6063      	str	r3, [r4, #4]
 80030ba:	6054      	str	r4, [r2, #4]
 80030bc:	e7cb      	b.n	8003056 <_free_r+0x22>
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	2000026c 	.word	0x2000026c

080030c4 <sbrk_aligned>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003104 <sbrk_aligned+0x40>)
 80030c8:	460c      	mov	r4, r1
 80030ca:	6831      	ldr	r1, [r6, #0]
 80030cc:	4605      	mov	r5, r0
 80030ce:	b911      	cbnz	r1, 80030d6 <sbrk_aligned+0x12>
 80030d0:	f000 fca2 	bl	8003a18 <_sbrk_r>
 80030d4:	6030      	str	r0, [r6, #0]
 80030d6:	4621      	mov	r1, r4
 80030d8:	4628      	mov	r0, r5
 80030da:	f000 fc9d 	bl	8003a18 <_sbrk_r>
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	d103      	bne.n	80030ea <sbrk_aligned+0x26>
 80030e2:	f04f 34ff 	mov.w	r4, #4294967295
 80030e6:	4620      	mov	r0, r4
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	1cc4      	adds	r4, r0, #3
 80030ec:	f024 0403 	bic.w	r4, r4, #3
 80030f0:	42a0      	cmp	r0, r4
 80030f2:	d0f8      	beq.n	80030e6 <sbrk_aligned+0x22>
 80030f4:	1a21      	subs	r1, r4, r0
 80030f6:	4628      	mov	r0, r5
 80030f8:	f000 fc8e 	bl	8003a18 <_sbrk_r>
 80030fc:	3001      	adds	r0, #1
 80030fe:	d1f2      	bne.n	80030e6 <sbrk_aligned+0x22>
 8003100:	e7ef      	b.n	80030e2 <sbrk_aligned+0x1e>
 8003102:	bf00      	nop
 8003104:	20000268 	.word	0x20000268

08003108 <_malloc_r>:
 8003108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800310c:	1ccd      	adds	r5, r1, #3
 800310e:	f025 0503 	bic.w	r5, r5, #3
 8003112:	3508      	adds	r5, #8
 8003114:	2d0c      	cmp	r5, #12
 8003116:	bf38      	it	cc
 8003118:	250c      	movcc	r5, #12
 800311a:	2d00      	cmp	r5, #0
 800311c:	4606      	mov	r6, r0
 800311e:	db01      	blt.n	8003124 <_malloc_r+0x1c>
 8003120:	42a9      	cmp	r1, r5
 8003122:	d904      	bls.n	800312e <_malloc_r+0x26>
 8003124:	230c      	movs	r3, #12
 8003126:	6033      	str	r3, [r6, #0]
 8003128:	2000      	movs	r0, #0
 800312a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800312e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003204 <_malloc_r+0xfc>
 8003132:	f000 f869 	bl	8003208 <__malloc_lock>
 8003136:	f8d8 3000 	ldr.w	r3, [r8]
 800313a:	461c      	mov	r4, r3
 800313c:	bb44      	cbnz	r4, 8003190 <_malloc_r+0x88>
 800313e:	4629      	mov	r1, r5
 8003140:	4630      	mov	r0, r6
 8003142:	f7ff ffbf 	bl	80030c4 <sbrk_aligned>
 8003146:	1c43      	adds	r3, r0, #1
 8003148:	4604      	mov	r4, r0
 800314a:	d158      	bne.n	80031fe <_malloc_r+0xf6>
 800314c:	f8d8 4000 	ldr.w	r4, [r8]
 8003150:	4627      	mov	r7, r4
 8003152:	2f00      	cmp	r7, #0
 8003154:	d143      	bne.n	80031de <_malloc_r+0xd6>
 8003156:	2c00      	cmp	r4, #0
 8003158:	d04b      	beq.n	80031f2 <_malloc_r+0xea>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	4639      	mov	r1, r7
 800315e:	4630      	mov	r0, r6
 8003160:	eb04 0903 	add.w	r9, r4, r3
 8003164:	f000 fc58 	bl	8003a18 <_sbrk_r>
 8003168:	4581      	cmp	r9, r0
 800316a:	d142      	bne.n	80031f2 <_malloc_r+0xea>
 800316c:	6821      	ldr	r1, [r4, #0]
 800316e:	4630      	mov	r0, r6
 8003170:	1a6d      	subs	r5, r5, r1
 8003172:	4629      	mov	r1, r5
 8003174:	f7ff ffa6 	bl	80030c4 <sbrk_aligned>
 8003178:	3001      	adds	r0, #1
 800317a:	d03a      	beq.n	80031f2 <_malloc_r+0xea>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	442b      	add	r3, r5
 8003180:	6023      	str	r3, [r4, #0]
 8003182:	f8d8 3000 	ldr.w	r3, [r8]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	bb62      	cbnz	r2, 80031e4 <_malloc_r+0xdc>
 800318a:	f8c8 7000 	str.w	r7, [r8]
 800318e:	e00f      	b.n	80031b0 <_malloc_r+0xa8>
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	1b52      	subs	r2, r2, r5
 8003194:	d420      	bmi.n	80031d8 <_malloc_r+0xd0>
 8003196:	2a0b      	cmp	r2, #11
 8003198:	d917      	bls.n	80031ca <_malloc_r+0xc2>
 800319a:	1961      	adds	r1, r4, r5
 800319c:	42a3      	cmp	r3, r4
 800319e:	6025      	str	r5, [r4, #0]
 80031a0:	bf18      	it	ne
 80031a2:	6059      	strne	r1, [r3, #4]
 80031a4:	6863      	ldr	r3, [r4, #4]
 80031a6:	bf08      	it	eq
 80031a8:	f8c8 1000 	streq.w	r1, [r8]
 80031ac:	5162      	str	r2, [r4, r5]
 80031ae:	604b      	str	r3, [r1, #4]
 80031b0:	4630      	mov	r0, r6
 80031b2:	f000 f82f 	bl	8003214 <__malloc_unlock>
 80031b6:	f104 000b 	add.w	r0, r4, #11
 80031ba:	1d23      	adds	r3, r4, #4
 80031bc:	f020 0007 	bic.w	r0, r0, #7
 80031c0:	1ac2      	subs	r2, r0, r3
 80031c2:	bf1c      	itt	ne
 80031c4:	1a1b      	subne	r3, r3, r0
 80031c6:	50a3      	strne	r3, [r4, r2]
 80031c8:	e7af      	b.n	800312a <_malloc_r+0x22>
 80031ca:	6862      	ldr	r2, [r4, #4]
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	bf0c      	ite	eq
 80031d0:	f8c8 2000 	streq.w	r2, [r8]
 80031d4:	605a      	strne	r2, [r3, #4]
 80031d6:	e7eb      	b.n	80031b0 <_malloc_r+0xa8>
 80031d8:	4623      	mov	r3, r4
 80031da:	6864      	ldr	r4, [r4, #4]
 80031dc:	e7ae      	b.n	800313c <_malloc_r+0x34>
 80031de:	463c      	mov	r4, r7
 80031e0:	687f      	ldr	r7, [r7, #4]
 80031e2:	e7b6      	b.n	8003152 <_malloc_r+0x4a>
 80031e4:	461a      	mov	r2, r3
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	d1fb      	bne.n	80031e4 <_malloc_r+0xdc>
 80031ec:	2300      	movs	r3, #0
 80031ee:	6053      	str	r3, [r2, #4]
 80031f0:	e7de      	b.n	80031b0 <_malloc_r+0xa8>
 80031f2:	230c      	movs	r3, #12
 80031f4:	4630      	mov	r0, r6
 80031f6:	6033      	str	r3, [r6, #0]
 80031f8:	f000 f80c 	bl	8003214 <__malloc_unlock>
 80031fc:	e794      	b.n	8003128 <_malloc_r+0x20>
 80031fe:	6005      	str	r5, [r0, #0]
 8003200:	e7d6      	b.n	80031b0 <_malloc_r+0xa8>
 8003202:	bf00      	nop
 8003204:	2000026c 	.word	0x2000026c

08003208 <__malloc_lock>:
 8003208:	4801      	ldr	r0, [pc, #4]	@ (8003210 <__malloc_lock+0x8>)
 800320a:	f7ff bf10 	b.w	800302e <__retarget_lock_acquire_recursive>
 800320e:	bf00      	nop
 8003210:	20000264 	.word	0x20000264

08003214 <__malloc_unlock>:
 8003214:	4801      	ldr	r0, [pc, #4]	@ (800321c <__malloc_unlock+0x8>)
 8003216:	f7ff bf0b 	b.w	8003030 <__retarget_lock_release_recursive>
 800321a:	bf00      	nop
 800321c:	20000264 	.word	0x20000264

08003220 <__sfputc_r>:
 8003220:	6893      	ldr	r3, [r2, #8]
 8003222:	b410      	push	{r4}
 8003224:	3b01      	subs	r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	6093      	str	r3, [r2, #8]
 800322a:	da07      	bge.n	800323c <__sfputc_r+0x1c>
 800322c:	6994      	ldr	r4, [r2, #24]
 800322e:	42a3      	cmp	r3, r4
 8003230:	db01      	blt.n	8003236 <__sfputc_r+0x16>
 8003232:	290a      	cmp	r1, #10
 8003234:	d102      	bne.n	800323c <__sfputc_r+0x1c>
 8003236:	bc10      	pop	{r4}
 8003238:	f7ff bdeb 	b.w	8002e12 <__swbuf_r>
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	1c58      	adds	r0, r3, #1
 8003240:	6010      	str	r0, [r2, #0]
 8003242:	7019      	strb	r1, [r3, #0]
 8003244:	4608      	mov	r0, r1
 8003246:	bc10      	pop	{r4}
 8003248:	4770      	bx	lr

0800324a <__sfputs_r>:
 800324a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324c:	4606      	mov	r6, r0
 800324e:	460f      	mov	r7, r1
 8003250:	4614      	mov	r4, r2
 8003252:	18d5      	adds	r5, r2, r3
 8003254:	42ac      	cmp	r4, r5
 8003256:	d101      	bne.n	800325c <__sfputs_r+0x12>
 8003258:	2000      	movs	r0, #0
 800325a:	e007      	b.n	800326c <__sfputs_r+0x22>
 800325c:	463a      	mov	r2, r7
 800325e:	4630      	mov	r0, r6
 8003260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003264:	f7ff ffdc 	bl	8003220 <__sfputc_r>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	d1f3      	bne.n	8003254 <__sfputs_r+0xa>
 800326c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003270 <_vfiprintf_r>:
 8003270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003274:	460d      	mov	r5, r1
 8003276:	4614      	mov	r4, r2
 8003278:	4698      	mov	r8, r3
 800327a:	4606      	mov	r6, r0
 800327c:	b09d      	sub	sp, #116	@ 0x74
 800327e:	b118      	cbz	r0, 8003288 <_vfiprintf_r+0x18>
 8003280:	6a03      	ldr	r3, [r0, #32]
 8003282:	b90b      	cbnz	r3, 8003288 <_vfiprintf_r+0x18>
 8003284:	f7ff fcdc 	bl	8002c40 <__sinit>
 8003288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800328a:	07d9      	lsls	r1, r3, #31
 800328c:	d405      	bmi.n	800329a <_vfiprintf_r+0x2a>
 800328e:	89ab      	ldrh	r3, [r5, #12]
 8003290:	059a      	lsls	r2, r3, #22
 8003292:	d402      	bmi.n	800329a <_vfiprintf_r+0x2a>
 8003294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003296:	f7ff feca 	bl	800302e <__retarget_lock_acquire_recursive>
 800329a:	89ab      	ldrh	r3, [r5, #12]
 800329c:	071b      	lsls	r3, r3, #28
 800329e:	d501      	bpl.n	80032a4 <_vfiprintf_r+0x34>
 80032a0:	692b      	ldr	r3, [r5, #16]
 80032a2:	b99b      	cbnz	r3, 80032cc <_vfiprintf_r+0x5c>
 80032a4:	4629      	mov	r1, r5
 80032a6:	4630      	mov	r0, r6
 80032a8:	f7ff fdf2 	bl	8002e90 <__swsetup_r>
 80032ac:	b170      	cbz	r0, 80032cc <_vfiprintf_r+0x5c>
 80032ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032b0:	07dc      	lsls	r4, r3, #31
 80032b2:	d504      	bpl.n	80032be <_vfiprintf_r+0x4e>
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	b01d      	add	sp, #116	@ 0x74
 80032ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032be:	89ab      	ldrh	r3, [r5, #12]
 80032c0:	0598      	lsls	r0, r3, #22
 80032c2:	d4f7      	bmi.n	80032b4 <_vfiprintf_r+0x44>
 80032c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032c6:	f7ff feb3 	bl	8003030 <__retarget_lock_release_recursive>
 80032ca:	e7f3      	b.n	80032b4 <_vfiprintf_r+0x44>
 80032cc:	2300      	movs	r3, #0
 80032ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80032d0:	2320      	movs	r3, #32
 80032d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032d6:	2330      	movs	r3, #48	@ 0x30
 80032d8:	f04f 0901 	mov.w	r9, #1
 80032dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80032e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800348c <_vfiprintf_r+0x21c>
 80032e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032e8:	4623      	mov	r3, r4
 80032ea:	469a      	mov	sl, r3
 80032ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032f0:	b10a      	cbz	r2, 80032f6 <_vfiprintf_r+0x86>
 80032f2:	2a25      	cmp	r2, #37	@ 0x25
 80032f4:	d1f9      	bne.n	80032ea <_vfiprintf_r+0x7a>
 80032f6:	ebba 0b04 	subs.w	fp, sl, r4
 80032fa:	d00b      	beq.n	8003314 <_vfiprintf_r+0xa4>
 80032fc:	465b      	mov	r3, fp
 80032fe:	4622      	mov	r2, r4
 8003300:	4629      	mov	r1, r5
 8003302:	4630      	mov	r0, r6
 8003304:	f7ff ffa1 	bl	800324a <__sfputs_r>
 8003308:	3001      	adds	r0, #1
 800330a:	f000 80a7 	beq.w	800345c <_vfiprintf_r+0x1ec>
 800330e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003310:	445a      	add	r2, fp
 8003312:	9209      	str	r2, [sp, #36]	@ 0x24
 8003314:	f89a 3000 	ldrb.w	r3, [sl]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 809f 	beq.w	800345c <_vfiprintf_r+0x1ec>
 800331e:	2300      	movs	r3, #0
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003328:	f10a 0a01 	add.w	sl, sl, #1
 800332c:	9304      	str	r3, [sp, #16]
 800332e:	9307      	str	r3, [sp, #28]
 8003330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003334:	931a      	str	r3, [sp, #104]	@ 0x68
 8003336:	4654      	mov	r4, sl
 8003338:	2205      	movs	r2, #5
 800333a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333e:	4853      	ldr	r0, [pc, #332]	@ (800348c <_vfiprintf_r+0x21c>)
 8003340:	f000 fb7a 	bl	8003a38 <memchr>
 8003344:	9a04      	ldr	r2, [sp, #16]
 8003346:	b9d8      	cbnz	r0, 8003380 <_vfiprintf_r+0x110>
 8003348:	06d1      	lsls	r1, r2, #27
 800334a:	bf44      	itt	mi
 800334c:	2320      	movmi	r3, #32
 800334e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003352:	0713      	lsls	r3, r2, #28
 8003354:	bf44      	itt	mi
 8003356:	232b      	movmi	r3, #43	@ 0x2b
 8003358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800335c:	f89a 3000 	ldrb.w	r3, [sl]
 8003360:	2b2a      	cmp	r3, #42	@ 0x2a
 8003362:	d015      	beq.n	8003390 <_vfiprintf_r+0x120>
 8003364:	4654      	mov	r4, sl
 8003366:	2000      	movs	r0, #0
 8003368:	f04f 0c0a 	mov.w	ip, #10
 800336c:	9a07      	ldr	r2, [sp, #28]
 800336e:	4621      	mov	r1, r4
 8003370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003374:	3b30      	subs	r3, #48	@ 0x30
 8003376:	2b09      	cmp	r3, #9
 8003378:	d94b      	bls.n	8003412 <_vfiprintf_r+0x1a2>
 800337a:	b1b0      	cbz	r0, 80033aa <_vfiprintf_r+0x13a>
 800337c:	9207      	str	r2, [sp, #28]
 800337e:	e014      	b.n	80033aa <_vfiprintf_r+0x13a>
 8003380:	eba0 0308 	sub.w	r3, r0, r8
 8003384:	fa09 f303 	lsl.w	r3, r9, r3
 8003388:	4313      	orrs	r3, r2
 800338a:	46a2      	mov	sl, r4
 800338c:	9304      	str	r3, [sp, #16]
 800338e:	e7d2      	b.n	8003336 <_vfiprintf_r+0xc6>
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	1d19      	adds	r1, r3, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	9103      	str	r1, [sp, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	bfbb      	ittet	lt
 800339c:	425b      	neglt	r3, r3
 800339e:	f042 0202 	orrlt.w	r2, r2, #2
 80033a2:	9307      	strge	r3, [sp, #28]
 80033a4:	9307      	strlt	r3, [sp, #28]
 80033a6:	bfb8      	it	lt
 80033a8:	9204      	strlt	r2, [sp, #16]
 80033aa:	7823      	ldrb	r3, [r4, #0]
 80033ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80033ae:	d10a      	bne.n	80033c6 <_vfiprintf_r+0x156>
 80033b0:	7863      	ldrb	r3, [r4, #1]
 80033b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80033b4:	d132      	bne.n	800341c <_vfiprintf_r+0x1ac>
 80033b6:	9b03      	ldr	r3, [sp, #12]
 80033b8:	3402      	adds	r4, #2
 80033ba:	1d1a      	adds	r2, r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	9203      	str	r2, [sp, #12]
 80033c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033c4:	9305      	str	r3, [sp, #20]
 80033c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003490 <_vfiprintf_r+0x220>
 80033ca:	2203      	movs	r2, #3
 80033cc:	4650      	mov	r0, sl
 80033ce:	7821      	ldrb	r1, [r4, #0]
 80033d0:	f000 fb32 	bl	8003a38 <memchr>
 80033d4:	b138      	cbz	r0, 80033e6 <_vfiprintf_r+0x176>
 80033d6:	2240      	movs	r2, #64	@ 0x40
 80033d8:	9b04      	ldr	r3, [sp, #16]
 80033da:	eba0 000a 	sub.w	r0, r0, sl
 80033de:	4082      	lsls	r2, r0
 80033e0:	4313      	orrs	r3, r2
 80033e2:	3401      	adds	r4, #1
 80033e4:	9304      	str	r3, [sp, #16]
 80033e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ea:	2206      	movs	r2, #6
 80033ec:	4829      	ldr	r0, [pc, #164]	@ (8003494 <_vfiprintf_r+0x224>)
 80033ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033f2:	f000 fb21 	bl	8003a38 <memchr>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d03f      	beq.n	800347a <_vfiprintf_r+0x20a>
 80033fa:	4b27      	ldr	r3, [pc, #156]	@ (8003498 <_vfiprintf_r+0x228>)
 80033fc:	bb1b      	cbnz	r3, 8003446 <_vfiprintf_r+0x1d6>
 80033fe:	9b03      	ldr	r3, [sp, #12]
 8003400:	3307      	adds	r3, #7
 8003402:	f023 0307 	bic.w	r3, r3, #7
 8003406:	3308      	adds	r3, #8
 8003408:	9303      	str	r3, [sp, #12]
 800340a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800340c:	443b      	add	r3, r7
 800340e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003410:	e76a      	b.n	80032e8 <_vfiprintf_r+0x78>
 8003412:	460c      	mov	r4, r1
 8003414:	2001      	movs	r0, #1
 8003416:	fb0c 3202 	mla	r2, ip, r2, r3
 800341a:	e7a8      	b.n	800336e <_vfiprintf_r+0xfe>
 800341c:	2300      	movs	r3, #0
 800341e:	f04f 0c0a 	mov.w	ip, #10
 8003422:	4619      	mov	r1, r3
 8003424:	3401      	adds	r4, #1
 8003426:	9305      	str	r3, [sp, #20]
 8003428:	4620      	mov	r0, r4
 800342a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800342e:	3a30      	subs	r2, #48	@ 0x30
 8003430:	2a09      	cmp	r2, #9
 8003432:	d903      	bls.n	800343c <_vfiprintf_r+0x1cc>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0c6      	beq.n	80033c6 <_vfiprintf_r+0x156>
 8003438:	9105      	str	r1, [sp, #20]
 800343a:	e7c4      	b.n	80033c6 <_vfiprintf_r+0x156>
 800343c:	4604      	mov	r4, r0
 800343e:	2301      	movs	r3, #1
 8003440:	fb0c 2101 	mla	r1, ip, r1, r2
 8003444:	e7f0      	b.n	8003428 <_vfiprintf_r+0x1b8>
 8003446:	ab03      	add	r3, sp, #12
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	462a      	mov	r2, r5
 800344c:	4630      	mov	r0, r6
 800344e:	4b13      	ldr	r3, [pc, #76]	@ (800349c <_vfiprintf_r+0x22c>)
 8003450:	a904      	add	r1, sp, #16
 8003452:	f3af 8000 	nop.w
 8003456:	4607      	mov	r7, r0
 8003458:	1c78      	adds	r0, r7, #1
 800345a:	d1d6      	bne.n	800340a <_vfiprintf_r+0x19a>
 800345c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800345e:	07d9      	lsls	r1, r3, #31
 8003460:	d405      	bmi.n	800346e <_vfiprintf_r+0x1fe>
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	059a      	lsls	r2, r3, #22
 8003466:	d402      	bmi.n	800346e <_vfiprintf_r+0x1fe>
 8003468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800346a:	f7ff fde1 	bl	8003030 <__retarget_lock_release_recursive>
 800346e:	89ab      	ldrh	r3, [r5, #12]
 8003470:	065b      	lsls	r3, r3, #25
 8003472:	f53f af1f 	bmi.w	80032b4 <_vfiprintf_r+0x44>
 8003476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003478:	e71e      	b.n	80032b8 <_vfiprintf_r+0x48>
 800347a:	ab03      	add	r3, sp, #12
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	462a      	mov	r2, r5
 8003480:	4630      	mov	r0, r6
 8003482:	4b06      	ldr	r3, [pc, #24]	@ (800349c <_vfiprintf_r+0x22c>)
 8003484:	a904      	add	r1, sp, #16
 8003486:	f000 f87d 	bl	8003584 <_printf_i>
 800348a:	e7e4      	b.n	8003456 <_vfiprintf_r+0x1e6>
 800348c:	08003bb6 	.word	0x08003bb6
 8003490:	08003bbc 	.word	0x08003bbc
 8003494:	08003bc0 	.word	0x08003bc0
 8003498:	00000000 	.word	0x00000000
 800349c:	0800324b 	.word	0x0800324b

080034a0 <_printf_common>:
 80034a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	4616      	mov	r6, r2
 80034a6:	4698      	mov	r8, r3
 80034a8:	688a      	ldr	r2, [r1, #8]
 80034aa:	690b      	ldr	r3, [r1, #16]
 80034ac:	4607      	mov	r7, r0
 80034ae:	4293      	cmp	r3, r2
 80034b0:	bfb8      	it	lt
 80034b2:	4613      	movlt	r3, r2
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034ba:	460c      	mov	r4, r1
 80034bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034c0:	b10a      	cbz	r2, 80034c6 <_printf_common+0x26>
 80034c2:	3301      	adds	r3, #1
 80034c4:	6033      	str	r3, [r6, #0]
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	0699      	lsls	r1, r3, #26
 80034ca:	bf42      	ittt	mi
 80034cc:	6833      	ldrmi	r3, [r6, #0]
 80034ce:	3302      	addmi	r3, #2
 80034d0:	6033      	strmi	r3, [r6, #0]
 80034d2:	6825      	ldr	r5, [r4, #0]
 80034d4:	f015 0506 	ands.w	r5, r5, #6
 80034d8:	d106      	bne.n	80034e8 <_printf_common+0x48>
 80034da:	f104 0a19 	add.w	sl, r4, #25
 80034de:	68e3      	ldr	r3, [r4, #12]
 80034e0:	6832      	ldr	r2, [r6, #0]
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	42ab      	cmp	r3, r5
 80034e6:	dc2b      	bgt.n	8003540 <_printf_common+0xa0>
 80034e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	3b00      	subs	r3, #0
 80034f0:	bf18      	it	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	0692      	lsls	r2, r2, #26
 80034f6:	d430      	bmi.n	800355a <_printf_common+0xba>
 80034f8:	4641      	mov	r1, r8
 80034fa:	4638      	mov	r0, r7
 80034fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003500:	47c8      	blx	r9
 8003502:	3001      	adds	r0, #1
 8003504:	d023      	beq.n	800354e <_printf_common+0xae>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	6922      	ldr	r2, [r4, #16]
 800350a:	f003 0306 	and.w	r3, r3, #6
 800350e:	2b04      	cmp	r3, #4
 8003510:	bf14      	ite	ne
 8003512:	2500      	movne	r5, #0
 8003514:	6833      	ldreq	r3, [r6, #0]
 8003516:	f04f 0600 	mov.w	r6, #0
 800351a:	bf08      	it	eq
 800351c:	68e5      	ldreq	r5, [r4, #12]
 800351e:	f104 041a 	add.w	r4, r4, #26
 8003522:	bf08      	it	eq
 8003524:	1aed      	subeq	r5, r5, r3
 8003526:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800352a:	bf08      	it	eq
 800352c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003530:	4293      	cmp	r3, r2
 8003532:	bfc4      	itt	gt
 8003534:	1a9b      	subgt	r3, r3, r2
 8003536:	18ed      	addgt	r5, r5, r3
 8003538:	42b5      	cmp	r5, r6
 800353a:	d11a      	bne.n	8003572 <_printf_common+0xd2>
 800353c:	2000      	movs	r0, #0
 800353e:	e008      	b.n	8003552 <_printf_common+0xb2>
 8003540:	2301      	movs	r3, #1
 8003542:	4652      	mov	r2, sl
 8003544:	4641      	mov	r1, r8
 8003546:	4638      	mov	r0, r7
 8003548:	47c8      	blx	r9
 800354a:	3001      	adds	r0, #1
 800354c:	d103      	bne.n	8003556 <_printf_common+0xb6>
 800354e:	f04f 30ff 	mov.w	r0, #4294967295
 8003552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003556:	3501      	adds	r5, #1
 8003558:	e7c1      	b.n	80034de <_printf_common+0x3e>
 800355a:	2030      	movs	r0, #48	@ 0x30
 800355c:	18e1      	adds	r1, r4, r3
 800355e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003568:	4422      	add	r2, r4
 800356a:	3302      	adds	r3, #2
 800356c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003570:	e7c2      	b.n	80034f8 <_printf_common+0x58>
 8003572:	2301      	movs	r3, #1
 8003574:	4622      	mov	r2, r4
 8003576:	4641      	mov	r1, r8
 8003578:	4638      	mov	r0, r7
 800357a:	47c8      	blx	r9
 800357c:	3001      	adds	r0, #1
 800357e:	d0e6      	beq.n	800354e <_printf_common+0xae>
 8003580:	3601      	adds	r6, #1
 8003582:	e7d9      	b.n	8003538 <_printf_common+0x98>

08003584 <_printf_i>:
 8003584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	7e0f      	ldrb	r7, [r1, #24]
 800358a:	4691      	mov	r9, r2
 800358c:	2f78      	cmp	r7, #120	@ 0x78
 800358e:	4680      	mov	r8, r0
 8003590:	460c      	mov	r4, r1
 8003592:	469a      	mov	sl, r3
 8003594:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003596:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800359a:	d807      	bhi.n	80035ac <_printf_i+0x28>
 800359c:	2f62      	cmp	r7, #98	@ 0x62
 800359e:	d80a      	bhi.n	80035b6 <_printf_i+0x32>
 80035a0:	2f00      	cmp	r7, #0
 80035a2:	f000 80d1 	beq.w	8003748 <_printf_i+0x1c4>
 80035a6:	2f58      	cmp	r7, #88	@ 0x58
 80035a8:	f000 80b8 	beq.w	800371c <_printf_i+0x198>
 80035ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035b4:	e03a      	b.n	800362c <_printf_i+0xa8>
 80035b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035ba:	2b15      	cmp	r3, #21
 80035bc:	d8f6      	bhi.n	80035ac <_printf_i+0x28>
 80035be:	a101      	add	r1, pc, #4	@ (adr r1, 80035c4 <_printf_i+0x40>)
 80035c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035c4:	0800361d 	.word	0x0800361d
 80035c8:	08003631 	.word	0x08003631
 80035cc:	080035ad 	.word	0x080035ad
 80035d0:	080035ad 	.word	0x080035ad
 80035d4:	080035ad 	.word	0x080035ad
 80035d8:	080035ad 	.word	0x080035ad
 80035dc:	08003631 	.word	0x08003631
 80035e0:	080035ad 	.word	0x080035ad
 80035e4:	080035ad 	.word	0x080035ad
 80035e8:	080035ad 	.word	0x080035ad
 80035ec:	080035ad 	.word	0x080035ad
 80035f0:	0800372f 	.word	0x0800372f
 80035f4:	0800365b 	.word	0x0800365b
 80035f8:	080036e9 	.word	0x080036e9
 80035fc:	080035ad 	.word	0x080035ad
 8003600:	080035ad 	.word	0x080035ad
 8003604:	08003751 	.word	0x08003751
 8003608:	080035ad 	.word	0x080035ad
 800360c:	0800365b 	.word	0x0800365b
 8003610:	080035ad 	.word	0x080035ad
 8003614:	080035ad 	.word	0x080035ad
 8003618:	080036f1 	.word	0x080036f1
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	1d1a      	adds	r2, r3, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6032      	str	r2, [r6, #0]
 8003624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003628:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800362c:	2301      	movs	r3, #1
 800362e:	e09c      	b.n	800376a <_printf_i+0x1e6>
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	1d19      	adds	r1, r3, #4
 8003636:	6031      	str	r1, [r6, #0]
 8003638:	0606      	lsls	r6, r0, #24
 800363a:	d501      	bpl.n	8003640 <_printf_i+0xbc>
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	e003      	b.n	8003648 <_printf_i+0xc4>
 8003640:	0645      	lsls	r5, r0, #25
 8003642:	d5fb      	bpl.n	800363c <_printf_i+0xb8>
 8003644:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003648:	2d00      	cmp	r5, #0
 800364a:	da03      	bge.n	8003654 <_printf_i+0xd0>
 800364c:	232d      	movs	r3, #45	@ 0x2d
 800364e:	426d      	negs	r5, r5
 8003650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003654:	230a      	movs	r3, #10
 8003656:	4858      	ldr	r0, [pc, #352]	@ (80037b8 <_printf_i+0x234>)
 8003658:	e011      	b.n	800367e <_printf_i+0xfa>
 800365a:	6821      	ldr	r1, [r4, #0]
 800365c:	6833      	ldr	r3, [r6, #0]
 800365e:	0608      	lsls	r0, r1, #24
 8003660:	f853 5b04 	ldr.w	r5, [r3], #4
 8003664:	d402      	bmi.n	800366c <_printf_i+0xe8>
 8003666:	0649      	lsls	r1, r1, #25
 8003668:	bf48      	it	mi
 800366a:	b2ad      	uxthmi	r5, r5
 800366c:	2f6f      	cmp	r7, #111	@ 0x6f
 800366e:	6033      	str	r3, [r6, #0]
 8003670:	bf14      	ite	ne
 8003672:	230a      	movne	r3, #10
 8003674:	2308      	moveq	r3, #8
 8003676:	4850      	ldr	r0, [pc, #320]	@ (80037b8 <_printf_i+0x234>)
 8003678:	2100      	movs	r1, #0
 800367a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800367e:	6866      	ldr	r6, [r4, #4]
 8003680:	2e00      	cmp	r6, #0
 8003682:	60a6      	str	r6, [r4, #8]
 8003684:	db05      	blt.n	8003692 <_printf_i+0x10e>
 8003686:	6821      	ldr	r1, [r4, #0]
 8003688:	432e      	orrs	r6, r5
 800368a:	f021 0104 	bic.w	r1, r1, #4
 800368e:	6021      	str	r1, [r4, #0]
 8003690:	d04b      	beq.n	800372a <_printf_i+0x1a6>
 8003692:	4616      	mov	r6, r2
 8003694:	fbb5 f1f3 	udiv	r1, r5, r3
 8003698:	fb03 5711 	mls	r7, r3, r1, r5
 800369c:	5dc7      	ldrb	r7, [r0, r7]
 800369e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036a2:	462f      	mov	r7, r5
 80036a4:	42bb      	cmp	r3, r7
 80036a6:	460d      	mov	r5, r1
 80036a8:	d9f4      	bls.n	8003694 <_printf_i+0x110>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d10b      	bne.n	80036c6 <_printf_i+0x142>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	07df      	lsls	r7, r3, #31
 80036b2:	d508      	bpl.n	80036c6 <_printf_i+0x142>
 80036b4:	6923      	ldr	r3, [r4, #16]
 80036b6:	6861      	ldr	r1, [r4, #4]
 80036b8:	4299      	cmp	r1, r3
 80036ba:	bfde      	ittt	le
 80036bc:	2330      	movle	r3, #48	@ 0x30
 80036be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036c6:	1b92      	subs	r2, r2, r6
 80036c8:	6122      	str	r2, [r4, #16]
 80036ca:	464b      	mov	r3, r9
 80036cc:	4621      	mov	r1, r4
 80036ce:	4640      	mov	r0, r8
 80036d0:	f8cd a000 	str.w	sl, [sp]
 80036d4:	aa03      	add	r2, sp, #12
 80036d6:	f7ff fee3 	bl	80034a0 <_printf_common>
 80036da:	3001      	adds	r0, #1
 80036dc:	d14a      	bne.n	8003774 <_printf_i+0x1f0>
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	b004      	add	sp, #16
 80036e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	f043 0320 	orr.w	r3, r3, #32
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	2778      	movs	r7, #120	@ 0x78
 80036f2:	4832      	ldr	r0, [pc, #200]	@ (80037bc <_printf_i+0x238>)
 80036f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	6831      	ldr	r1, [r6, #0]
 80036fc:	061f      	lsls	r7, r3, #24
 80036fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8003702:	d402      	bmi.n	800370a <_printf_i+0x186>
 8003704:	065f      	lsls	r7, r3, #25
 8003706:	bf48      	it	mi
 8003708:	b2ad      	uxthmi	r5, r5
 800370a:	6031      	str	r1, [r6, #0]
 800370c:	07d9      	lsls	r1, r3, #31
 800370e:	bf44      	itt	mi
 8003710:	f043 0320 	orrmi.w	r3, r3, #32
 8003714:	6023      	strmi	r3, [r4, #0]
 8003716:	b11d      	cbz	r5, 8003720 <_printf_i+0x19c>
 8003718:	2310      	movs	r3, #16
 800371a:	e7ad      	b.n	8003678 <_printf_i+0xf4>
 800371c:	4826      	ldr	r0, [pc, #152]	@ (80037b8 <_printf_i+0x234>)
 800371e:	e7e9      	b.n	80036f4 <_printf_i+0x170>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	f023 0320 	bic.w	r3, r3, #32
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	e7f6      	b.n	8003718 <_printf_i+0x194>
 800372a:	4616      	mov	r6, r2
 800372c:	e7bd      	b.n	80036aa <_printf_i+0x126>
 800372e:	6833      	ldr	r3, [r6, #0]
 8003730:	6825      	ldr	r5, [r4, #0]
 8003732:	1d18      	adds	r0, r3, #4
 8003734:	6961      	ldr	r1, [r4, #20]
 8003736:	6030      	str	r0, [r6, #0]
 8003738:	062e      	lsls	r6, r5, #24
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	d501      	bpl.n	8003742 <_printf_i+0x1be>
 800373e:	6019      	str	r1, [r3, #0]
 8003740:	e002      	b.n	8003748 <_printf_i+0x1c4>
 8003742:	0668      	lsls	r0, r5, #25
 8003744:	d5fb      	bpl.n	800373e <_printf_i+0x1ba>
 8003746:	8019      	strh	r1, [r3, #0]
 8003748:	2300      	movs	r3, #0
 800374a:	4616      	mov	r6, r2
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	e7bc      	b.n	80036ca <_printf_i+0x146>
 8003750:	6833      	ldr	r3, [r6, #0]
 8003752:	2100      	movs	r1, #0
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	6032      	str	r2, [r6, #0]
 8003758:	681e      	ldr	r6, [r3, #0]
 800375a:	6862      	ldr	r2, [r4, #4]
 800375c:	4630      	mov	r0, r6
 800375e:	f000 f96b 	bl	8003a38 <memchr>
 8003762:	b108      	cbz	r0, 8003768 <_printf_i+0x1e4>
 8003764:	1b80      	subs	r0, r0, r6
 8003766:	6060      	str	r0, [r4, #4]
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	6123      	str	r3, [r4, #16]
 800376c:	2300      	movs	r3, #0
 800376e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003772:	e7aa      	b.n	80036ca <_printf_i+0x146>
 8003774:	4632      	mov	r2, r6
 8003776:	4649      	mov	r1, r9
 8003778:	4640      	mov	r0, r8
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	47d0      	blx	sl
 800377e:	3001      	adds	r0, #1
 8003780:	d0ad      	beq.n	80036de <_printf_i+0x15a>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	079b      	lsls	r3, r3, #30
 8003786:	d413      	bmi.n	80037b0 <_printf_i+0x22c>
 8003788:	68e0      	ldr	r0, [r4, #12]
 800378a:	9b03      	ldr	r3, [sp, #12]
 800378c:	4298      	cmp	r0, r3
 800378e:	bfb8      	it	lt
 8003790:	4618      	movlt	r0, r3
 8003792:	e7a6      	b.n	80036e2 <_printf_i+0x15e>
 8003794:	2301      	movs	r3, #1
 8003796:	4632      	mov	r2, r6
 8003798:	4649      	mov	r1, r9
 800379a:	4640      	mov	r0, r8
 800379c:	47d0      	blx	sl
 800379e:	3001      	adds	r0, #1
 80037a0:	d09d      	beq.n	80036de <_printf_i+0x15a>
 80037a2:	3501      	adds	r5, #1
 80037a4:	68e3      	ldr	r3, [r4, #12]
 80037a6:	9903      	ldr	r1, [sp, #12]
 80037a8:	1a5b      	subs	r3, r3, r1
 80037aa:	42ab      	cmp	r3, r5
 80037ac:	dcf2      	bgt.n	8003794 <_printf_i+0x210>
 80037ae:	e7eb      	b.n	8003788 <_printf_i+0x204>
 80037b0:	2500      	movs	r5, #0
 80037b2:	f104 0619 	add.w	r6, r4, #25
 80037b6:	e7f5      	b.n	80037a4 <_printf_i+0x220>
 80037b8:	08003bc7 	.word	0x08003bc7
 80037bc:	08003bd8 	.word	0x08003bd8

080037c0 <__sflush_r>:
 80037c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	0716      	lsls	r6, r2, #28
 80037c8:	4605      	mov	r5, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	d454      	bmi.n	8003878 <__sflush_r+0xb8>
 80037ce:	684b      	ldr	r3, [r1, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	dc02      	bgt.n	80037da <__sflush_r+0x1a>
 80037d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	dd48      	ble.n	800386c <__sflush_r+0xac>
 80037da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037dc:	2e00      	cmp	r6, #0
 80037de:	d045      	beq.n	800386c <__sflush_r+0xac>
 80037e0:	2300      	movs	r3, #0
 80037e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037e6:	682f      	ldr	r7, [r5, #0]
 80037e8:	6a21      	ldr	r1, [r4, #32]
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	d030      	beq.n	8003850 <__sflush_r+0x90>
 80037ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	0759      	lsls	r1, r3, #29
 80037f4:	d505      	bpl.n	8003802 <__sflush_r+0x42>
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	1ad2      	subs	r2, r2, r3
 80037fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037fc:	b10b      	cbz	r3, 8003802 <__sflush_r+0x42>
 80037fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003800:	1ad2      	subs	r2, r2, r3
 8003802:	2300      	movs	r3, #0
 8003804:	4628      	mov	r0, r5
 8003806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003808:	6a21      	ldr	r1, [r4, #32]
 800380a:	47b0      	blx	r6
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	89a3      	ldrh	r3, [r4, #12]
 8003810:	d106      	bne.n	8003820 <__sflush_r+0x60>
 8003812:	6829      	ldr	r1, [r5, #0]
 8003814:	291d      	cmp	r1, #29
 8003816:	d82b      	bhi.n	8003870 <__sflush_r+0xb0>
 8003818:	4a28      	ldr	r2, [pc, #160]	@ (80038bc <__sflush_r+0xfc>)
 800381a:	40ca      	lsrs	r2, r1
 800381c:	07d6      	lsls	r6, r2, #31
 800381e:	d527      	bpl.n	8003870 <__sflush_r+0xb0>
 8003820:	2200      	movs	r2, #0
 8003822:	6062      	str	r2, [r4, #4]
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	04d9      	lsls	r1, r3, #19
 8003828:	6022      	str	r2, [r4, #0]
 800382a:	d504      	bpl.n	8003836 <__sflush_r+0x76>
 800382c:	1c42      	adds	r2, r0, #1
 800382e:	d101      	bne.n	8003834 <__sflush_r+0x74>
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	b903      	cbnz	r3, 8003836 <__sflush_r+0x76>
 8003834:	6560      	str	r0, [r4, #84]	@ 0x54
 8003836:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003838:	602f      	str	r7, [r5, #0]
 800383a:	b1b9      	cbz	r1, 800386c <__sflush_r+0xac>
 800383c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003840:	4299      	cmp	r1, r3
 8003842:	d002      	beq.n	800384a <__sflush_r+0x8a>
 8003844:	4628      	mov	r0, r5
 8003846:	f7ff fbf5 	bl	8003034 <_free_r>
 800384a:	2300      	movs	r3, #0
 800384c:	6363      	str	r3, [r4, #52]	@ 0x34
 800384e:	e00d      	b.n	800386c <__sflush_r+0xac>
 8003850:	2301      	movs	r3, #1
 8003852:	4628      	mov	r0, r5
 8003854:	47b0      	blx	r6
 8003856:	4602      	mov	r2, r0
 8003858:	1c50      	adds	r0, r2, #1
 800385a:	d1c9      	bne.n	80037f0 <__sflush_r+0x30>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0c6      	beq.n	80037f0 <__sflush_r+0x30>
 8003862:	2b1d      	cmp	r3, #29
 8003864:	d001      	beq.n	800386a <__sflush_r+0xaa>
 8003866:	2b16      	cmp	r3, #22
 8003868:	d11d      	bne.n	80038a6 <__sflush_r+0xe6>
 800386a:	602f      	str	r7, [r5, #0]
 800386c:	2000      	movs	r0, #0
 800386e:	e021      	b.n	80038b4 <__sflush_r+0xf4>
 8003870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003874:	b21b      	sxth	r3, r3
 8003876:	e01a      	b.n	80038ae <__sflush_r+0xee>
 8003878:	690f      	ldr	r7, [r1, #16]
 800387a:	2f00      	cmp	r7, #0
 800387c:	d0f6      	beq.n	800386c <__sflush_r+0xac>
 800387e:	0793      	lsls	r3, r2, #30
 8003880:	bf18      	it	ne
 8003882:	2300      	movne	r3, #0
 8003884:	680e      	ldr	r6, [r1, #0]
 8003886:	bf08      	it	eq
 8003888:	694b      	ldreq	r3, [r1, #20]
 800388a:	1bf6      	subs	r6, r6, r7
 800388c:	600f      	str	r7, [r1, #0]
 800388e:	608b      	str	r3, [r1, #8]
 8003890:	2e00      	cmp	r6, #0
 8003892:	ddeb      	ble.n	800386c <__sflush_r+0xac>
 8003894:	4633      	mov	r3, r6
 8003896:	463a      	mov	r2, r7
 8003898:	4628      	mov	r0, r5
 800389a:	6a21      	ldr	r1, [r4, #32]
 800389c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80038a0:	47e0      	blx	ip
 80038a2:	2800      	cmp	r0, #0
 80038a4:	dc07      	bgt.n	80038b6 <__sflush_r+0xf6>
 80038a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ae:	f04f 30ff 	mov.w	r0, #4294967295
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b6:	4407      	add	r7, r0
 80038b8:	1a36      	subs	r6, r6, r0
 80038ba:	e7e9      	b.n	8003890 <__sflush_r+0xd0>
 80038bc:	20400001 	.word	0x20400001

080038c0 <_fflush_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	690b      	ldr	r3, [r1, #16]
 80038c4:	4605      	mov	r5, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	b913      	cbnz	r3, 80038d0 <_fflush_r+0x10>
 80038ca:	2500      	movs	r5, #0
 80038cc:	4628      	mov	r0, r5
 80038ce:	bd38      	pop	{r3, r4, r5, pc}
 80038d0:	b118      	cbz	r0, 80038da <_fflush_r+0x1a>
 80038d2:	6a03      	ldr	r3, [r0, #32]
 80038d4:	b90b      	cbnz	r3, 80038da <_fflush_r+0x1a>
 80038d6:	f7ff f9b3 	bl	8002c40 <__sinit>
 80038da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f3      	beq.n	80038ca <_fflush_r+0xa>
 80038e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038e4:	07d0      	lsls	r0, r2, #31
 80038e6:	d404      	bmi.n	80038f2 <_fflush_r+0x32>
 80038e8:	0599      	lsls	r1, r3, #22
 80038ea:	d402      	bmi.n	80038f2 <_fflush_r+0x32>
 80038ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ee:	f7ff fb9e 	bl	800302e <__retarget_lock_acquire_recursive>
 80038f2:	4628      	mov	r0, r5
 80038f4:	4621      	mov	r1, r4
 80038f6:	f7ff ff63 	bl	80037c0 <__sflush_r>
 80038fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038fc:	4605      	mov	r5, r0
 80038fe:	07da      	lsls	r2, r3, #31
 8003900:	d4e4      	bmi.n	80038cc <_fflush_r+0xc>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	059b      	lsls	r3, r3, #22
 8003906:	d4e1      	bmi.n	80038cc <_fflush_r+0xc>
 8003908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800390a:	f7ff fb91 	bl	8003030 <__retarget_lock_release_recursive>
 800390e:	e7dd      	b.n	80038cc <_fflush_r+0xc>

08003910 <__swhatbuf_r>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	460c      	mov	r4, r1
 8003914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003918:	4615      	mov	r5, r2
 800391a:	2900      	cmp	r1, #0
 800391c:	461e      	mov	r6, r3
 800391e:	b096      	sub	sp, #88	@ 0x58
 8003920:	da0c      	bge.n	800393c <__swhatbuf_r+0x2c>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	2100      	movs	r1, #0
 8003926:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800392a:	bf14      	ite	ne
 800392c:	2340      	movne	r3, #64	@ 0x40
 800392e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003932:	2000      	movs	r0, #0
 8003934:	6031      	str	r1, [r6, #0]
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	b016      	add	sp, #88	@ 0x58
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	466a      	mov	r2, sp
 800393e:	f000 f849 	bl	80039d4 <_fstat_r>
 8003942:	2800      	cmp	r0, #0
 8003944:	dbed      	blt.n	8003922 <__swhatbuf_r+0x12>
 8003946:	9901      	ldr	r1, [sp, #4]
 8003948:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800394c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003950:	4259      	negs	r1, r3
 8003952:	4159      	adcs	r1, r3
 8003954:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003958:	e7eb      	b.n	8003932 <__swhatbuf_r+0x22>

0800395a <__smakebuf_r>:
 800395a:	898b      	ldrh	r3, [r1, #12]
 800395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800395e:	079d      	lsls	r5, r3, #30
 8003960:	4606      	mov	r6, r0
 8003962:	460c      	mov	r4, r1
 8003964:	d507      	bpl.n	8003976 <__smakebuf_r+0x1c>
 8003966:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	6123      	str	r3, [r4, #16]
 800396e:	2301      	movs	r3, #1
 8003970:	6163      	str	r3, [r4, #20]
 8003972:	b003      	add	sp, #12
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003976:	466a      	mov	r2, sp
 8003978:	ab01      	add	r3, sp, #4
 800397a:	f7ff ffc9 	bl	8003910 <__swhatbuf_r>
 800397e:	9f00      	ldr	r7, [sp, #0]
 8003980:	4605      	mov	r5, r0
 8003982:	4639      	mov	r1, r7
 8003984:	4630      	mov	r0, r6
 8003986:	f7ff fbbf 	bl	8003108 <_malloc_r>
 800398a:	b948      	cbnz	r0, 80039a0 <__smakebuf_r+0x46>
 800398c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003990:	059a      	lsls	r2, r3, #22
 8003992:	d4ee      	bmi.n	8003972 <__smakebuf_r+0x18>
 8003994:	f023 0303 	bic.w	r3, r3, #3
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	81a3      	strh	r3, [r4, #12]
 800399e:	e7e2      	b.n	8003966 <__smakebuf_r+0xc>
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	9b01      	ldr	r3, [sp, #4]
 80039ae:	6020      	str	r0, [r4, #0]
 80039b0:	b15b      	cbz	r3, 80039ca <__smakebuf_r+0x70>
 80039b2:	4630      	mov	r0, r6
 80039b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039b8:	f000 f81e 	bl	80039f8 <_isatty_r>
 80039bc:	b128      	cbz	r0, 80039ca <__smakebuf_r+0x70>
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	431d      	orrs	r5, r3
 80039ce:	81a5      	strh	r5, [r4, #12]
 80039d0:	e7cf      	b.n	8003972 <__smakebuf_r+0x18>
	...

080039d4 <_fstat_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	2300      	movs	r3, #0
 80039d8:	4d06      	ldr	r5, [pc, #24]	@ (80039f4 <_fstat_r+0x20>)
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	f7fc ffc9 	bl	8000978 <_fstat>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	d102      	bne.n	80039f0 <_fstat_r+0x1c>
 80039ea:	682b      	ldr	r3, [r5, #0]
 80039ec:	b103      	cbz	r3, 80039f0 <_fstat_r+0x1c>
 80039ee:	6023      	str	r3, [r4, #0]
 80039f0:	bd38      	pop	{r3, r4, r5, pc}
 80039f2:	bf00      	nop
 80039f4:	20000260 	.word	0x20000260

080039f8 <_isatty_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	2300      	movs	r3, #0
 80039fc:	4d05      	ldr	r5, [pc, #20]	@ (8003a14 <_isatty_r+0x1c>)
 80039fe:	4604      	mov	r4, r0
 8003a00:	4608      	mov	r0, r1
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	f7fc ffc7 	bl	8000996 <_isatty>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d102      	bne.n	8003a12 <_isatty_r+0x1a>
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	b103      	cbz	r3, 8003a12 <_isatty_r+0x1a>
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	20000260 	.word	0x20000260

08003a18 <_sbrk_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4d05      	ldr	r5, [pc, #20]	@ (8003a34 <_sbrk_r+0x1c>)
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	f7fc ffce 	bl	80009c4 <_sbrk>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_sbrk_r+0x1a>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_sbrk_r+0x1a>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20000260 	.word	0x20000260

08003a38 <memchr>:
 8003a38:	4603      	mov	r3, r0
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	b2c9      	uxtb	r1, r1
 8003a3e:	4402      	add	r2, r0
 8003a40:	4293      	cmp	r3, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	d101      	bne.n	8003a4a <memchr+0x12>
 8003a46:	2000      	movs	r0, #0
 8003a48:	e003      	b.n	8003a52 <memchr+0x1a>
 8003a4a:	7804      	ldrb	r4, [r0, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	428c      	cmp	r4, r1
 8003a50:	d1f6      	bne.n	8003a40 <memchr+0x8>
 8003a52:	bd10      	pop	{r4, pc}

08003a54 <_init>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr

08003a60 <_fini>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr
